#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import logging
from ttypes import *
import XKCommon.ttypes
from thrift.Thrift import TProcessor
from thrift.transport import TTransport


class Iface(object):
    def login(self, accountInfo):
        """
        Parameters:
         - accountInfo
        """
        pass

    def findXKAccountByProofNum(self, proofNum):
        """
        Parameters:
         - proofNum
        """
        pass

    def checkBindstate(self, deviceId, userId):
        """
        Parameters:
         - deviceId
         - userId
        """
        pass

    def registerAccount(self, accountInfo, deviceId, verifyCode):
        """
        Parameters:
         - accountInfo
         - deviceId
         - verifyCode
        """
        pass

    def registerAndBindAccount(self, accountInfo, deviceId, verifyCode):
        """
        Parameters:
         - accountInfo
         - deviceId
         - verifyCode
        """
        pass

    def updateAccount(self, accountInfo):
        """
        Parameters:
         - accountInfo
        """
        pass

    def editPassword(self, userId, oldPassword, newPassword):
        """
        Parameters:
         - userId
         - oldPassword
         - newPassword
        """
        pass

    def getMembers(self, userId):
        """
        Parameters:
         - userId
        """
        pass

    def addMember(self, userId, password, loginUserId):
        """
        Parameters:
         - userId
         - password
         - loginUserId
        """
        pass

    def deleteMembers(self, userIds, loginUserId):
        """
        Parameters:
         - userIds
         - loginUserId
        """
        pass

    def getCaregiverInfoService(self, userId, deviceId):
        """
        Parameters:
         - userId
         - deviceId
        """
        pass

    def bindDeviceByUserName(self, userName, password, deviceId):
        """
        Parameters:
         - userName
         - password
         - deviceId
        """
        pass

    def bindDeviceByUserId(self, userId, deviceId):
        """
        Parameters:
         - userId
         - deviceId
        """
        pass

    def getAccountInfosByDeviceId(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def deleteAccountsByDeviceId(self, userIds, deviceId):
        """
        Parameters:
         - userIds
         - deviceId
        """
        pass

    def getFamilyInfosByUserId(self, userId):
        """
        Parameters:
         - userId
        """
        pass

    def getVerifyCodeByDeviceId(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def sendSmsVerifyCode(self, phoneNum, verifyCode, deviceId):
        """
        Parameters:
         - phoneNum
         - verifyCode
         - deviceId
        """
        pass

    def validateSmsVerifyCode(self, phoneNum, smsVerifyCode, deviceId):
        """
        Parameters:
         - phoneNum
         - smsVerifyCode
         - deviceId
        """
        pass

    def resetPassword(self, phoneNum, newPassword, smsVerifyCode, deviceId):
        """
        Parameters:
         - phoneNum
         - newPassword
         - smsVerifyCode
         - deviceId
        """
        pass

    def bindDeviceByFamilyId(self, familyId, deviceId):
        """
        Parameters:
         - familyId
         - deviceId
        """
        pass

    def unBindDeviceByFamilyId(self, familyId, deviceId):
        """
        Parameters:
         - familyId
         - deviceId
        """
        pass

    def getDoctorInfoService(self, userId, deviceId):
        """
        Parameters:
         - userId
         - deviceId
        """
        pass

    def getDoctorInfoByDeviceID(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def getRecipeListByUserID(self, userId, startTime):
        """
        Parameters:
         - userId
         - startTime
        """
        pass

    def getRecipeListByDeviceID(self, deviceId, startTime):
        """
        Parameters:
         - deviceId
         - startTime
        """
        pass

    def getphotoBydeviceID(self, deviceId, shareTime):
        """
        Parameters:
         - deviceId
         - shareTime
        """
        pass

    def getphotoInfoByurl(self, photourls):
        """
        Parameters:
         - photourls
        """
        pass

    def getUserNameByUserID(self, userId):
        """
        Parameters:
         - userId
        """
        pass

    def checkBindStateByDeviceID(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def messageNotify(self, msgInfo):
        """
        Parameters:
         - msgInfo
        """
        pass

    def getOutsideListByDeviceId(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def hostlogin(self, deviceId, hostid):
        """
        Parameters:
         - deviceId
         - hostid
        """
        pass

    def getAllServices(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def getUsingServices(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def addOutside(self, deviceId, info):
        """
        Parameters:
         - deviceId
         - info
        """
        pass

    def getServiceRecords(self, deviceId, ServiceId):
        """
        Parameters:
         - deviceId
         - ServiceId
        """
        pass

    def getServiceHistory(self, deviceId, serviceId):
        """
        Parameters:
         - deviceId
         - serviceId
        """
        pass

    def getFamilyPoints(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def getPointsHistory(self, deviceId, num):
        """
        Parameters:
         - deviceId
         - num
        """
        pass

    def updateServiceRecords(self, recordId, result):
        """
        Parameters:
         - recordId
         - result
        """
        pass

    def getHealthReportLists(self, userid, type, startindex, endindex):
        """
        Parameters:
         - userid
         - type
         - startindex
         - endindex
        """
        pass

    def getHealthReportListsByFamilyId(self, userid, type, startindex, endindex, familyId):
        """
        Parameters:
         - userid
         - type
         - startindex
         - endindex
         - familyId
        """
        pass

    def getNewRecipeListByUserID(self, userId, startTime, endTime):
        """
        Parameters:
         - userId
         - startTime
         - endTime
        """
        pass

    def getNewRecipeListByDeviceID(self, deviceId, startTime, endTime):
        """
        Parameters:
         - deviceId
         - startTime
         - endTime
        """
        pass

    def getNewphotoBydeviceID(self, deviceId, starTime, endtime):
        """
        Parameters:
         - deviceId
         - starTime
         - endtime
        """
        pass

    def serviceCardGetUserPoints(self, userId):
        """
        Parameters:
         - userId
        """
        pass

    def serviceCardGetPointsHistory(self, userId, num):
        """
        Parameters:
         - userId
         - num
        """
        pass

    def serviceCardLoginByCardNum(self, accountInfo, cardNo):
        """
        Parameters:
         - accountInfo
         - cardNo
        """
        pass

    def serviceCardLoginByAccount(self, accountInfo):
        """
        Parameters:
         - accountInfo
        """
        pass

    def BindCardToPerson(self, deviceid, cardNo, pwd, userid):
        """
        Parameters:
         - deviceid
         - cardNo
         - pwd
         - userid
        """
        pass

    def getPurchasedServices(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def getPushMessage(self, msgid):
        """
        Parameters:
         - msgid
        """
        pass

    def getHealthControllerPlan(self, userid):
        """
        Parameters:
         - userid
        """
        pass

    def getHealthControllerRemindByMember(self, userid):
        """
        Parameters:
         - userid
        """
        pass

    def getHealthControllerRemindByDeviceId(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        pass

    def getHealthControllerRemindByDevice(self, deviceid):
        """
        Parameters:
         - deviceid
        """
        pass

    def sendMessageToManager(self, accountInfo, deviceid):
        """
        Parameters:
         - accountInfo
         - deviceid
        """
        pass

    def serviceLoginByProofNum(self, proofNum, deviceid):
        """
        Parameters:
         - proofNum
         - deviceid
        """
        pass

    def getCallDoctor(self, serviceid):
        """
        Parameters:
         - serviceid
        """
        pass

    def saveInterfaceLog(self, interfaceLog):
        """
        Parameters:
         - interfaceLog
        """
        pass

    def getPeripheralConfigureList(self):
        pass

    def getMemberHealthInfo(self, personPHRCode):
        """
        Parameters:
         - personPHRCode
        """
        pass

    def updateMemeberHealthInfo(self, personPHRCode, healthInfo):
        """
        Parameters:
         - personPHRCode
         - healthInfo
        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def login(self, accountInfo):
        """
        Parameters:
         - accountInfo
        """
        self.send_login(accountInfo)
        return self.recv_login()

    def send_login(self, accountInfo):
        self._oprot.writeMessageBegin('login', TMessageType.CALL, self._seqid)
        args = login_args()
        args.accountInfo = accountInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_login(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = login_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "login failed: unknown result")

    def findXKAccountByProofNum(self, proofNum):
        """
        Parameters:
         - proofNum
        """
        self.send_findXKAccountByProofNum(proofNum)
        return self.recv_findXKAccountByProofNum()

    def send_findXKAccountByProofNum(self, proofNum):
        self._oprot.writeMessageBegin('findXKAccountByProofNum', TMessageType.CALL, self._seqid)
        args = findXKAccountByProofNum_args()
        args.proofNum = proofNum
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_findXKAccountByProofNum(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = findXKAccountByProofNum_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "findXKAccountByProofNum failed: unknown result")

    def checkBindstate(self, deviceId, userId):
        """
        Parameters:
         - deviceId
         - userId
        """
        self.send_checkBindstate(deviceId, userId)
        return self.recv_checkBindstate()

    def send_checkBindstate(self, deviceId, userId):
        self._oprot.writeMessageBegin('checkBindstate', TMessageType.CALL, self._seqid)
        args = checkBindstate_args()
        args.deviceId = deviceId
        args.userId = userId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_checkBindstate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = checkBindstate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "checkBindstate failed: unknown result")

    def registerAccount(self, accountInfo, deviceId, verifyCode):
        """
        Parameters:
         - accountInfo
         - deviceId
         - verifyCode
        """
        self.send_registerAccount(accountInfo, deviceId, verifyCode)
        return self.recv_registerAccount()

    def send_registerAccount(self, accountInfo, deviceId, verifyCode):
        self._oprot.writeMessageBegin('registerAccount', TMessageType.CALL, self._seqid)
        args = registerAccount_args()
        args.accountInfo = accountInfo
        args.deviceId = deviceId
        args.verifyCode = verifyCode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_registerAccount(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = registerAccount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "registerAccount failed: unknown result")

    def registerAndBindAccount(self, accountInfo, deviceId, verifyCode):
        """
        Parameters:
         - accountInfo
         - deviceId
         - verifyCode
        """
        self.send_registerAndBindAccount(accountInfo, deviceId, verifyCode)
        return self.recv_registerAndBindAccount()

    def send_registerAndBindAccount(self, accountInfo, deviceId, verifyCode):
        self._oprot.writeMessageBegin('registerAndBindAccount', TMessageType.CALL, self._seqid)
        args = registerAndBindAccount_args()
        args.accountInfo = accountInfo
        args.deviceId = deviceId
        args.verifyCode = verifyCode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_registerAndBindAccount(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = registerAndBindAccount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "registerAndBindAccount failed: unknown result")

    def updateAccount(self, accountInfo):
        """
        Parameters:
         - accountInfo
        """
        self.send_updateAccount(accountInfo)
        return self.recv_updateAccount()

    def send_updateAccount(self, accountInfo):
        self._oprot.writeMessageBegin('updateAccount', TMessageType.CALL, self._seqid)
        args = updateAccount_args()
        args.accountInfo = accountInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateAccount(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateAccount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateAccount failed: unknown result")

    def editPassword(self, userId, oldPassword, newPassword):
        """
        Parameters:
         - userId
         - oldPassword
         - newPassword
        """
        self.send_editPassword(userId, oldPassword, newPassword)
        self.recv_editPassword()

    def send_editPassword(self, userId, oldPassword, newPassword):
        self._oprot.writeMessageBegin('editPassword', TMessageType.CALL, self._seqid)
        args = editPassword_args()
        args.userId = userId
        args.oldPassword = oldPassword
        args.newPassword = newPassword
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_editPassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = editPassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def getMembers(self, userId):
        """
        Parameters:
         - userId
        """
        self.send_getMembers(userId)
        return self.recv_getMembers()

    def send_getMembers(self, userId):
        self._oprot.writeMessageBegin('getMembers', TMessageType.CALL, self._seqid)
        args = getMembers_args()
        args.userId = userId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMembers failed: unknown result")

    def addMember(self, userId, password, loginUserId):
        """
        Parameters:
         - userId
         - password
         - loginUserId
        """
        self.send_addMember(userId, password, loginUserId)
        self.recv_addMember()

    def send_addMember(self, userId, password, loginUserId):
        self._oprot.writeMessageBegin('addMember', TMessageType.CALL, self._seqid)
        args = addMember_args()
        args.userId = userId
        args.password = password
        args.loginUserId = loginUserId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def deleteMembers(self, userIds, loginUserId):
        """
        Parameters:
         - userIds
         - loginUserId
        """
        self.send_deleteMembers(userIds, loginUserId)
        return self.recv_deleteMembers()

    def send_deleteMembers(self, userIds, loginUserId):
        self._oprot.writeMessageBegin('deleteMembers', TMessageType.CALL, self._seqid)
        args = deleteMembers_args()
        args.userIds = userIds
        args.loginUserId = loginUserId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteMembers(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteMembers_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteMembers failed: unknown result")

    def getCaregiverInfoService(self, userId, deviceId):
        """
        Parameters:
         - userId
         - deviceId
        """
        self.send_getCaregiverInfoService(userId, deviceId)
        return self.recv_getCaregiverInfoService()

    def send_getCaregiverInfoService(self, userId, deviceId):
        self._oprot.writeMessageBegin('getCaregiverInfoService', TMessageType.CALL, self._seqid)
        args = getCaregiverInfoService_args()
        args.userId = userId
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCaregiverInfoService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCaregiverInfoService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCaregiverInfoService failed: unknown result")

    def bindDeviceByUserName(self, userName, password, deviceId):
        """
        Parameters:
         - userName
         - password
         - deviceId
        """
        self.send_bindDeviceByUserName(userName, password, deviceId)
        self.recv_bindDeviceByUserName()

    def send_bindDeviceByUserName(self, userName, password, deviceId):
        self._oprot.writeMessageBegin('bindDeviceByUserName', TMessageType.CALL, self._seqid)
        args = bindDeviceByUserName_args()
        args.userName = userName
        args.password = password
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_bindDeviceByUserName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = bindDeviceByUserName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def bindDeviceByUserId(self, userId, deviceId):
        """
        Parameters:
         - userId
         - deviceId
        """
        self.send_bindDeviceByUserId(userId, deviceId)
        self.recv_bindDeviceByUserId()

    def send_bindDeviceByUserId(self, userId, deviceId):
        self._oprot.writeMessageBegin('bindDeviceByUserId', TMessageType.CALL, self._seqid)
        args = bindDeviceByUserId_args()
        args.userId = userId
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_bindDeviceByUserId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = bindDeviceByUserId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def getAccountInfosByDeviceId(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_getAccountInfosByDeviceId(deviceId)
        return self.recv_getAccountInfosByDeviceId()

    def send_getAccountInfosByDeviceId(self, deviceId):
        self._oprot.writeMessageBegin('getAccountInfosByDeviceId', TMessageType.CALL, self._seqid)
        args = getAccountInfosByDeviceId_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAccountInfosByDeviceId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAccountInfosByDeviceId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAccountInfosByDeviceId failed: unknown result")

    def deleteAccountsByDeviceId(self, userIds, deviceId):
        """
        Parameters:
         - userIds
         - deviceId
        """
        self.send_deleteAccountsByDeviceId(userIds, deviceId)
        return self.recv_deleteAccountsByDeviceId()

    def send_deleteAccountsByDeviceId(self, userIds, deviceId):
        self._oprot.writeMessageBegin('deleteAccountsByDeviceId', TMessageType.CALL, self._seqid)
        args = deleteAccountsByDeviceId_args()
        args.userIds = userIds
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteAccountsByDeviceId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteAccountsByDeviceId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteAccountsByDeviceId failed: unknown result")

    def getFamilyInfosByUserId(self, userId):
        """
        Parameters:
         - userId
        """
        self.send_getFamilyInfosByUserId(userId)
        return self.recv_getFamilyInfosByUserId()

    def send_getFamilyInfosByUserId(self, userId):
        self._oprot.writeMessageBegin('getFamilyInfosByUserId', TMessageType.CALL, self._seqid)
        args = getFamilyInfosByUserId_args()
        args.userId = userId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getFamilyInfosByUserId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getFamilyInfosByUserId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getFamilyInfosByUserId failed: unknown result")

    def getVerifyCodeByDeviceId(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_getVerifyCodeByDeviceId(deviceId)
        return self.recv_getVerifyCodeByDeviceId()

    def send_getVerifyCodeByDeviceId(self, deviceId):
        self._oprot.writeMessageBegin('getVerifyCodeByDeviceId', TMessageType.CALL, self._seqid)
        args = getVerifyCodeByDeviceId_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getVerifyCodeByDeviceId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getVerifyCodeByDeviceId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getVerifyCodeByDeviceId failed: unknown result")

    def sendSmsVerifyCode(self, phoneNum, verifyCode, deviceId):
        """
        Parameters:
         - phoneNum
         - verifyCode
         - deviceId
        """
        self.send_sendSmsVerifyCode(phoneNum, verifyCode, deviceId)
        self.recv_sendSmsVerifyCode()

    def send_sendSmsVerifyCode(self, phoneNum, verifyCode, deviceId):
        self._oprot.writeMessageBegin('sendSmsVerifyCode', TMessageType.CALL, self._seqid)
        args = sendSmsVerifyCode_args()
        args.phoneNum = phoneNum
        args.verifyCode = verifyCode
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sendSmsVerifyCode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendSmsVerifyCode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def validateSmsVerifyCode(self, phoneNum, smsVerifyCode, deviceId):
        """
        Parameters:
         - phoneNum
         - smsVerifyCode
         - deviceId
        """
        self.send_validateSmsVerifyCode(phoneNum, smsVerifyCode, deviceId)
        self.recv_validateSmsVerifyCode()

    def send_validateSmsVerifyCode(self, phoneNum, smsVerifyCode, deviceId):
        self._oprot.writeMessageBegin('validateSmsVerifyCode', TMessageType.CALL, self._seqid)
        args = validateSmsVerifyCode_args()
        args.phoneNum = phoneNum
        args.smsVerifyCode = smsVerifyCode
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_validateSmsVerifyCode(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = validateSmsVerifyCode_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def resetPassword(self, phoneNum, newPassword, smsVerifyCode, deviceId):
        """
        Parameters:
         - phoneNum
         - newPassword
         - smsVerifyCode
         - deviceId
        """
        self.send_resetPassword(phoneNum, newPassword, smsVerifyCode, deviceId)
        self.recv_resetPassword()

    def send_resetPassword(self, phoneNum, newPassword, smsVerifyCode, deviceId):
        self._oprot.writeMessageBegin('resetPassword', TMessageType.CALL, self._seqid)
        args = resetPassword_args()
        args.phoneNum = phoneNum
        args.newPassword = newPassword
        args.smsVerifyCode = smsVerifyCode
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_resetPassword(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = resetPassword_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def bindDeviceByFamilyId(self, familyId, deviceId):
        """
        Parameters:
         - familyId
         - deviceId
        """
        self.send_bindDeviceByFamilyId(familyId, deviceId)
        self.recv_bindDeviceByFamilyId()

    def send_bindDeviceByFamilyId(self, familyId, deviceId):
        self._oprot.writeMessageBegin('bindDeviceByFamilyId', TMessageType.CALL, self._seqid)
        args = bindDeviceByFamilyId_args()
        args.familyId = familyId
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_bindDeviceByFamilyId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = bindDeviceByFamilyId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def unBindDeviceByFamilyId(self, familyId, deviceId):
        """
        Parameters:
         - familyId
         - deviceId
        """
        self.send_unBindDeviceByFamilyId(familyId, deviceId)
        self.recv_unBindDeviceByFamilyId()

    def send_unBindDeviceByFamilyId(self, familyId, deviceId):
        self._oprot.writeMessageBegin('unBindDeviceByFamilyId', TMessageType.CALL, self._seqid)
        args = unBindDeviceByFamilyId_args()
        args.familyId = familyId
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_unBindDeviceByFamilyId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = unBindDeviceByFamilyId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def getDoctorInfoService(self, userId, deviceId):
        """
        Parameters:
         - userId
         - deviceId
        """
        self.send_getDoctorInfoService(userId, deviceId)
        return self.recv_getDoctorInfoService()

    def send_getDoctorInfoService(self, userId, deviceId):
        self._oprot.writeMessageBegin('getDoctorInfoService', TMessageType.CALL, self._seqid)
        args = getDoctorInfoService_args()
        args.userId = userId
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDoctorInfoService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDoctorInfoService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDoctorInfoService failed: unknown result")

    def getDoctorInfoByDeviceID(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_getDoctorInfoByDeviceID(deviceId)
        return self.recv_getDoctorInfoByDeviceID()

    def send_getDoctorInfoByDeviceID(self, deviceId):
        self._oprot.writeMessageBegin('getDoctorInfoByDeviceID', TMessageType.CALL, self._seqid)
        args = getDoctorInfoByDeviceID_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getDoctorInfoByDeviceID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getDoctorInfoByDeviceID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getDoctorInfoByDeviceID failed: unknown result")

    def getRecipeListByUserID(self, userId, startTime):
        """
        Parameters:
         - userId
         - startTime
        """
        self.send_getRecipeListByUserID(userId, startTime)
        return self.recv_getRecipeListByUserID()

    def send_getRecipeListByUserID(self, userId, startTime):
        self._oprot.writeMessageBegin('getRecipeListByUserID', TMessageType.CALL, self._seqid)
        args = getRecipeListByUserID_args()
        args.userId = userId
        args.startTime = startTime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRecipeListByUserID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRecipeListByUserID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRecipeListByUserID failed: unknown result")

    def getRecipeListByDeviceID(self, deviceId, startTime):
        """
        Parameters:
         - deviceId
         - startTime
        """
        self.send_getRecipeListByDeviceID(deviceId, startTime)
        return self.recv_getRecipeListByDeviceID()

    def send_getRecipeListByDeviceID(self, deviceId, startTime):
        self._oprot.writeMessageBegin('getRecipeListByDeviceID', TMessageType.CALL, self._seqid)
        args = getRecipeListByDeviceID_args()
        args.deviceId = deviceId
        args.startTime = startTime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getRecipeListByDeviceID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getRecipeListByDeviceID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getRecipeListByDeviceID failed: unknown result")

    def getphotoBydeviceID(self, deviceId, shareTime):
        """
        Parameters:
         - deviceId
         - shareTime
        """
        self.send_getphotoBydeviceID(deviceId, shareTime)
        return self.recv_getphotoBydeviceID()

    def send_getphotoBydeviceID(self, deviceId, shareTime):
        self._oprot.writeMessageBegin('getphotoBydeviceID', TMessageType.CALL, self._seqid)
        args = getphotoBydeviceID_args()
        args.deviceId = deviceId
        args.shareTime = shareTime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getphotoBydeviceID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getphotoBydeviceID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getphotoBydeviceID failed: unknown result")

    def getphotoInfoByurl(self, photourls):
        """
        Parameters:
         - photourls
        """
        self.send_getphotoInfoByurl(photourls)
        return self.recv_getphotoInfoByurl()

    def send_getphotoInfoByurl(self, photourls):
        self._oprot.writeMessageBegin('getphotoInfoByurl', TMessageType.CALL, self._seqid)
        args = getphotoInfoByurl_args()
        args.photourls = photourls
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getphotoInfoByurl(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getphotoInfoByurl_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getphotoInfoByurl failed: unknown result")

    def getUserNameByUserID(self, userId):
        """
        Parameters:
         - userId
        """
        self.send_getUserNameByUserID(userId)
        return self.recv_getUserNameByUserID()

    def send_getUserNameByUserID(self, userId):
        self._oprot.writeMessageBegin('getUserNameByUserID', TMessageType.CALL, self._seqid)
        args = getUserNameByUserID_args()
        args.userId = userId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUserNameByUserID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUserNameByUserID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserNameByUserID failed: unknown result")

    def checkBindStateByDeviceID(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_checkBindStateByDeviceID(deviceId)
        return self.recv_checkBindStateByDeviceID()

    def send_checkBindStateByDeviceID(self, deviceId):
        self._oprot.writeMessageBegin('checkBindStateByDeviceID', TMessageType.CALL, self._seqid)
        args = checkBindStateByDeviceID_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_checkBindStateByDeviceID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = checkBindStateByDeviceID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "checkBindStateByDeviceID failed: unknown result")

    def messageNotify(self, msgInfo):
        """
        Parameters:
         - msgInfo
        """
        self.send_messageNotify(msgInfo)
        self.recv_messageNotify()

    def send_messageNotify(self, msgInfo):
        self._oprot.writeMessageBegin('messageNotify', TMessageType.CALL, self._seqid)
        args = messageNotify_args()
        args.msgInfo = msgInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_messageNotify(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = messageNotify_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def getOutsideListByDeviceId(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_getOutsideListByDeviceId(deviceId)
        return self.recv_getOutsideListByDeviceId()

    def send_getOutsideListByDeviceId(self, deviceId):
        self._oprot.writeMessageBegin('getOutsideListByDeviceId', TMessageType.CALL, self._seqid)
        args = getOutsideListByDeviceId_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getOutsideListByDeviceId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getOutsideListByDeviceId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getOutsideListByDeviceId failed: unknown result")

    def hostlogin(self, deviceId, hostid):
        """
        Parameters:
         - deviceId
         - hostid
        """
        self.send_hostlogin(deviceId, hostid)
        return self.recv_hostlogin()

    def send_hostlogin(self, deviceId, hostid):
        self._oprot.writeMessageBegin('hostlogin', TMessageType.CALL, self._seqid)
        args = hostlogin_args()
        args.deviceId = deviceId
        args.hostid = hostid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_hostlogin(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = hostlogin_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "hostlogin failed: unknown result")

    def getAllServices(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_getAllServices(deviceId)
        return self.recv_getAllServices()

    def send_getAllServices(self, deviceId):
        self._oprot.writeMessageBegin('getAllServices', TMessageType.CALL, self._seqid)
        args = getAllServices_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAllServices(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAllServices_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllServices failed: unknown result")

    def getUsingServices(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_getUsingServices(deviceId)
        return self.recv_getUsingServices()

    def send_getUsingServices(self, deviceId):
        self._oprot.writeMessageBegin('getUsingServices', TMessageType.CALL, self._seqid)
        args = getUsingServices_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getUsingServices(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getUsingServices_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getUsingServices failed: unknown result")

    def addOutside(self, deviceId, info):
        """
        Parameters:
         - deviceId
         - info
        """
        self.send_addOutside(deviceId, info)
        return self.recv_addOutside()

    def send_addOutside(self, deviceId, info):
        self._oprot.writeMessageBegin('addOutside', TMessageType.CALL, self._seqid)
        args = addOutside_args()
        args.deviceId = deviceId
        args.info = info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_addOutside(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = addOutside_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "addOutside failed: unknown result")

    def getServiceRecords(self, deviceId, ServiceId):
        """
        Parameters:
         - deviceId
         - ServiceId
        """
        self.send_getServiceRecords(deviceId, ServiceId)
        return self.recv_getServiceRecords()

    def send_getServiceRecords(self, deviceId, ServiceId):
        self._oprot.writeMessageBegin('getServiceRecords', TMessageType.CALL, self._seqid)
        args = getServiceRecords_args()
        args.deviceId = deviceId
        args.ServiceId = ServiceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getServiceRecords(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getServiceRecords_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getServiceRecords failed: unknown result")

    def getServiceHistory(self, deviceId, serviceId):
        """
        Parameters:
         - deviceId
         - serviceId
        """
        self.send_getServiceHistory(deviceId, serviceId)
        return self.recv_getServiceHistory()

    def send_getServiceHistory(self, deviceId, serviceId):
        self._oprot.writeMessageBegin('getServiceHistory', TMessageType.CALL, self._seqid)
        args = getServiceHistory_args()
        args.deviceId = deviceId
        args.serviceId = serviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getServiceHistory(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getServiceHistory_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getServiceHistory failed: unknown result")

    def getFamilyPoints(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_getFamilyPoints(deviceId)
        return self.recv_getFamilyPoints()

    def send_getFamilyPoints(self, deviceId):
        self._oprot.writeMessageBegin('getFamilyPoints', TMessageType.CALL, self._seqid)
        args = getFamilyPoints_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getFamilyPoints(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getFamilyPoints_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getFamilyPoints failed: unknown result")

    def getPointsHistory(self, deviceId, num):
        """
        Parameters:
         - deviceId
         - num
        """
        self.send_getPointsHistory(deviceId, num)
        return self.recv_getPointsHistory()

    def send_getPointsHistory(self, deviceId, num):
        self._oprot.writeMessageBegin('getPointsHistory', TMessageType.CALL, self._seqid)
        args = getPointsHistory_args()
        args.deviceId = deviceId
        args.num = num
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPointsHistory(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPointsHistory_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPointsHistory failed: unknown result")

    def updateServiceRecords(self, recordId, result):
        """
        Parameters:
         - recordId
         - result
        """
        self.send_updateServiceRecords(recordId, result)
        return self.recv_updateServiceRecords()

    def send_updateServiceRecords(self, recordId, result):
        self._oprot.writeMessageBegin('updateServiceRecords', TMessageType.CALL, self._seqid)
        args = updateServiceRecords_args()
        args.recordId = recordId
        args.result = result
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateServiceRecords(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateServiceRecords_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateServiceRecords failed: unknown result")

    def getHealthReportLists(self, userid, type, startindex, endindex):
        """
        Parameters:
         - userid
         - type
         - startindex
         - endindex
        """
        self.send_getHealthReportLists(userid, type, startindex, endindex)
        return self.recv_getHealthReportLists()

    def send_getHealthReportLists(self, userid, type, startindex, endindex):
        self._oprot.writeMessageBegin('getHealthReportLists', TMessageType.CALL, self._seqid)
        args = getHealthReportLists_args()
        args.userid = userid
        args.type = type
        args.startindex = startindex
        args.endindex = endindex
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getHealthReportLists(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getHealthReportLists_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getHealthReportLists failed: unknown result")

    def getHealthReportListsByFamilyId(self, userid, type, startindex, endindex, familyId):
        """
        Parameters:
         - userid
         - type
         - startindex
         - endindex
         - familyId
        """
        self.send_getHealthReportListsByFamilyId(userid, type, startindex, endindex, familyId)
        return self.recv_getHealthReportListsByFamilyId()

    def send_getHealthReportListsByFamilyId(self, userid, type, startindex, endindex, familyId):
        self._oprot.writeMessageBegin('getHealthReportListsByFamilyId', TMessageType.CALL, self._seqid)
        args = getHealthReportListsByFamilyId_args()
        args.userid = userid
        args.type = type
        args.startindex = startindex
        args.endindex = endindex
        args.familyId = familyId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getHealthReportListsByFamilyId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getHealthReportListsByFamilyId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getHealthReportListsByFamilyId failed: unknown result")

    def getNewRecipeListByUserID(self, userId, startTime, endTime):
        """
        Parameters:
         - userId
         - startTime
         - endTime
        """
        self.send_getNewRecipeListByUserID(userId, startTime, endTime)
        return self.recv_getNewRecipeListByUserID()

    def send_getNewRecipeListByUserID(self, userId, startTime, endTime):
        self._oprot.writeMessageBegin('getNewRecipeListByUserID', TMessageType.CALL, self._seqid)
        args = getNewRecipeListByUserID_args()
        args.userId = userId
        args.startTime = startTime
        args.endTime = endTime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getNewRecipeListByUserID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getNewRecipeListByUserID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getNewRecipeListByUserID failed: unknown result")

    def getNewRecipeListByDeviceID(self, deviceId, startTime, endTime):
        """
        Parameters:
         - deviceId
         - startTime
         - endTime
        """
        self.send_getNewRecipeListByDeviceID(deviceId, startTime, endTime)
        return self.recv_getNewRecipeListByDeviceID()

    def send_getNewRecipeListByDeviceID(self, deviceId, startTime, endTime):
        self._oprot.writeMessageBegin('getNewRecipeListByDeviceID', TMessageType.CALL, self._seqid)
        args = getNewRecipeListByDeviceID_args()
        args.deviceId = deviceId
        args.startTime = startTime
        args.endTime = endTime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getNewRecipeListByDeviceID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getNewRecipeListByDeviceID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getNewRecipeListByDeviceID failed: unknown result")

    def getNewphotoBydeviceID(self, deviceId, starTime, endtime):
        """
        Parameters:
         - deviceId
         - starTime
         - endtime
        """
        self.send_getNewphotoBydeviceID(deviceId, starTime, endtime)
        return self.recv_getNewphotoBydeviceID()

    def send_getNewphotoBydeviceID(self, deviceId, starTime, endtime):
        self._oprot.writeMessageBegin('getNewphotoBydeviceID', TMessageType.CALL, self._seqid)
        args = getNewphotoBydeviceID_args()
        args.deviceId = deviceId
        args.starTime = starTime
        args.endtime = endtime
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getNewphotoBydeviceID(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getNewphotoBydeviceID_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getNewphotoBydeviceID failed: unknown result")

    def serviceCardGetUserPoints(self, userId):
        """
        Parameters:
         - userId
        """
        self.send_serviceCardGetUserPoints(userId)
        return self.recv_serviceCardGetUserPoints()

    def send_serviceCardGetUserPoints(self, userId):
        self._oprot.writeMessageBegin('serviceCardGetUserPoints', TMessageType.CALL, self._seqid)
        args = serviceCardGetUserPoints_args()
        args.userId = userId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_serviceCardGetUserPoints(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = serviceCardGetUserPoints_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "serviceCardGetUserPoints failed: unknown result")

    def serviceCardGetPointsHistory(self, userId, num):
        """
        Parameters:
         - userId
         - num
        """
        self.send_serviceCardGetPointsHistory(userId, num)
        return self.recv_serviceCardGetPointsHistory()

    def send_serviceCardGetPointsHistory(self, userId, num):
        self._oprot.writeMessageBegin('serviceCardGetPointsHistory', TMessageType.CALL, self._seqid)
        args = serviceCardGetPointsHistory_args()
        args.userId = userId
        args.num = num
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_serviceCardGetPointsHistory(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = serviceCardGetPointsHistory_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "serviceCardGetPointsHistory failed: unknown result")

    def serviceCardLoginByCardNum(self, accountInfo, cardNo):
        """
        Parameters:
         - accountInfo
         - cardNo
        """
        self.send_serviceCardLoginByCardNum(accountInfo, cardNo)
        return self.recv_serviceCardLoginByCardNum()

    def send_serviceCardLoginByCardNum(self, accountInfo, cardNo):
        self._oprot.writeMessageBegin('serviceCardLoginByCardNum', TMessageType.CALL, self._seqid)
        args = serviceCardLoginByCardNum_args()
        args.accountInfo = accountInfo
        args.cardNo = cardNo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_serviceCardLoginByCardNum(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = serviceCardLoginByCardNum_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "serviceCardLoginByCardNum failed: unknown result")

    def serviceCardLoginByAccount(self, accountInfo):
        """
        Parameters:
         - accountInfo
        """
        self.send_serviceCardLoginByAccount(accountInfo)
        return self.recv_serviceCardLoginByAccount()

    def send_serviceCardLoginByAccount(self, accountInfo):
        self._oprot.writeMessageBegin('serviceCardLoginByAccount', TMessageType.CALL, self._seqid)
        args = serviceCardLoginByAccount_args()
        args.accountInfo = accountInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_serviceCardLoginByAccount(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = serviceCardLoginByAccount_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "serviceCardLoginByAccount failed: unknown result")

    def BindCardToPerson(self, deviceid, cardNo, pwd, userid):
        """
        Parameters:
         - deviceid
         - cardNo
         - pwd
         - userid
        """
        self.send_BindCardToPerson(deviceid, cardNo, pwd, userid)
        return self.recv_BindCardToPerson()

    def send_BindCardToPerson(self, deviceid, cardNo, pwd, userid):
        self._oprot.writeMessageBegin('BindCardToPerson', TMessageType.CALL, self._seqid)
        args = BindCardToPerson_args()
        args.deviceid = deviceid
        args.cardNo = cardNo
        args.pwd = pwd
        args.userid = userid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_BindCardToPerson(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = BindCardToPerson_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "BindCardToPerson failed: unknown result")

    def getPurchasedServices(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_getPurchasedServices(deviceId)
        return self.recv_getPurchasedServices()

    def send_getPurchasedServices(self, deviceId):
        self._oprot.writeMessageBegin('getPurchasedServices', TMessageType.CALL, self._seqid)
        args = getPurchasedServices_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPurchasedServices(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPurchasedServices_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPurchasedServices failed: unknown result")

    def getPushMessage(self, msgid):
        """
        Parameters:
         - msgid
        """
        self.send_getPushMessage(msgid)
        return self.recv_getPushMessage()

    def send_getPushMessage(self, msgid):
        self._oprot.writeMessageBegin('getPushMessage', TMessageType.CALL, self._seqid)
        args = getPushMessage_args()
        args.msgid = msgid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPushMessage(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPushMessage_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPushMessage failed: unknown result")

    def getHealthControllerPlan(self, userid):
        """
        Parameters:
         - userid
        """
        self.send_getHealthControllerPlan(userid)
        return self.recv_getHealthControllerPlan()

    def send_getHealthControllerPlan(self, userid):
        self._oprot.writeMessageBegin('getHealthControllerPlan', TMessageType.CALL, self._seqid)
        args = getHealthControllerPlan_args()
        args.userid = userid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getHealthControllerPlan(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getHealthControllerPlan_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getHealthControllerPlan failed: unknown result")

    def getHealthControllerRemindByMember(self, userid):
        """
        Parameters:
         - userid
        """
        self.send_getHealthControllerRemindByMember(userid)
        return self.recv_getHealthControllerRemindByMember()

    def send_getHealthControllerRemindByMember(self, userid):
        self._oprot.writeMessageBegin('getHealthControllerRemindByMember', TMessageType.CALL, self._seqid)
        args = getHealthControllerRemindByMember_args()
        args.userid = userid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getHealthControllerRemindByMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getHealthControllerRemindByMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getHealthControllerRemindByMember failed: unknown result")

    def getHealthControllerRemindByDeviceId(self, deviceId):
        """
        Parameters:
         - deviceId
        """
        self.send_getHealthControllerRemindByDeviceId(deviceId)
        return self.recv_getHealthControllerRemindByDeviceId()

    def send_getHealthControllerRemindByDeviceId(self, deviceId):
        self._oprot.writeMessageBegin('getHealthControllerRemindByDeviceId', TMessageType.CALL, self._seqid)
        args = getHealthControllerRemindByDeviceId_args()
        args.deviceId = deviceId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getHealthControllerRemindByDeviceId(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getHealthControllerRemindByDeviceId_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getHealthControllerRemindByDeviceId failed: unknown result")

    def getHealthControllerRemindByDevice(self, deviceid):
        """
        Parameters:
         - deviceid
        """
        self.send_getHealthControllerRemindByDevice(deviceid)
        return self.recv_getHealthControllerRemindByDevice()

    def send_getHealthControllerRemindByDevice(self, deviceid):
        self._oprot.writeMessageBegin('getHealthControllerRemindByDevice', TMessageType.CALL, self._seqid)
        args = getHealthControllerRemindByDevice_args()
        args.deviceid = deviceid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getHealthControllerRemindByDevice(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getHealthControllerRemindByDevice_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getHealthControllerRemindByDevice failed: unknown result")

    def sendMessageToManager(self, accountInfo, deviceid):
        """
        Parameters:
         - accountInfo
         - deviceid
        """
        self.send_sendMessageToManager(accountInfo, deviceid)
        self.recv_sendMessageToManager()

    def send_sendMessageToManager(self, accountInfo, deviceid):
        self._oprot.writeMessageBegin('sendMessageToManager', TMessageType.CALL, self._seqid)
        args = sendMessageToManager_args()
        args.accountInfo = accountInfo
        args.deviceid = deviceid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sendMessageToManager(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sendMessageToManager_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.ex is not None:
            raise result.ex
        return

    def serviceLoginByProofNum(self, proofNum, deviceid):
        """
        Parameters:
         - proofNum
         - deviceid
        """
        self.send_serviceLoginByProofNum(proofNum, deviceid)
        return self.recv_serviceLoginByProofNum()

    def send_serviceLoginByProofNum(self, proofNum, deviceid):
        self._oprot.writeMessageBegin('serviceLoginByProofNum', TMessageType.CALL, self._seqid)
        args = serviceLoginByProofNum_args()
        args.proofNum = proofNum
        args.deviceid = deviceid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_serviceLoginByProofNum(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = serviceLoginByProofNum_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.ex is not None:
            raise result.ex
        raise TApplicationException(TApplicationException.MISSING_RESULT, "serviceLoginByProofNum failed: unknown result")

    def getCallDoctor(self, serviceid):
        """
        Parameters:
         - serviceid
        """
        self.send_getCallDoctor(serviceid)
        return self.recv_getCallDoctor()

    def send_getCallDoctor(self, serviceid):
        self._oprot.writeMessageBegin('getCallDoctor', TMessageType.CALL, self._seqid)
        args = getCallDoctor_args()
        args.serviceid = serviceid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCallDoctor(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCallDoctor_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCallDoctor failed: unknown result")

    def saveInterfaceLog(self, interfaceLog):
        """
        Parameters:
         - interfaceLog
        """
        self.send_saveInterfaceLog(interfaceLog)
        self.recv_saveInterfaceLog()

    def send_saveInterfaceLog(self, interfaceLog):
        self._oprot.writeMessageBegin('saveInterfaceLog', TMessageType.CALL, self._seqid)
        args = saveInterfaceLog_args()
        args.interfaceLog = interfaceLog
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_saveInterfaceLog(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = saveInterfaceLog_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return

    def getPeripheralConfigureList(self):
        self.send_getPeripheralConfigureList()
        return self.recv_getPeripheralConfigureList()

    def send_getPeripheralConfigureList(self):
        self._oprot.writeMessageBegin('getPeripheralConfigureList', TMessageType.CALL, self._seqid)
        args = getPeripheralConfigureList_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPeripheralConfigureList(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPeripheralConfigureList_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPeripheralConfigureList failed: unknown result")

    def getMemberHealthInfo(self, personPHRCode):
        """
        Parameters:
         - personPHRCode
        """
        self.send_getMemberHealthInfo(personPHRCode)
        return self.recv_getMemberHealthInfo()

    def send_getMemberHealthInfo(self, personPHRCode):
        self._oprot.writeMessageBegin('getMemberHealthInfo', TMessageType.CALL, self._seqid)
        args = getMemberHealthInfo_args()
        args.personPHRCode = personPHRCode
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMemberHealthInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMemberHealthInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMemberHealthInfo failed: unknown result")

    def updateMemeberHealthInfo(self, personPHRCode, healthInfo):
        """
        Parameters:
         - personPHRCode
         - healthInfo
        """
        self.send_updateMemeberHealthInfo(personPHRCode, healthInfo)
        self.recv_updateMemeberHealthInfo()

    def send_updateMemeberHealthInfo(self, personPHRCode, healthInfo):
        self._oprot.writeMessageBegin('updateMemeberHealthInfo', TMessageType.CALL, self._seqid)
        args = updateMemeberHealthInfo_args()
        args.personPHRCode = personPHRCode
        args.healthInfo = healthInfo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateMemeberHealthInfo(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateMemeberHealthInfo_result()
        result.read(iprot)
        iprot.readMessageEnd()
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["login"] = Processor.process_login
        self._processMap["findXKAccountByProofNum"] = Processor.process_findXKAccountByProofNum
        self._processMap["checkBindstate"] = Processor.process_checkBindstate
        self._processMap["registerAccount"] = Processor.process_registerAccount
        self._processMap["registerAndBindAccount"] = Processor.process_registerAndBindAccount
        self._processMap["updateAccount"] = Processor.process_updateAccount
        self._processMap["editPassword"] = Processor.process_editPassword
        self._processMap["getMembers"] = Processor.process_getMembers
        self._processMap["addMember"] = Processor.process_addMember
        self._processMap["deleteMembers"] = Processor.process_deleteMembers
        self._processMap["getCaregiverInfoService"] = Processor.process_getCaregiverInfoService
        self._processMap["bindDeviceByUserName"] = Processor.process_bindDeviceByUserName
        self._processMap["bindDeviceByUserId"] = Processor.process_bindDeviceByUserId
        self._processMap["getAccountInfosByDeviceId"] = Processor.process_getAccountInfosByDeviceId
        self._processMap["deleteAccountsByDeviceId"] = Processor.process_deleteAccountsByDeviceId
        self._processMap["getFamilyInfosByUserId"] = Processor.process_getFamilyInfosByUserId
        self._processMap["getVerifyCodeByDeviceId"] = Processor.process_getVerifyCodeByDeviceId
        self._processMap["sendSmsVerifyCode"] = Processor.process_sendSmsVerifyCode
        self._processMap["validateSmsVerifyCode"] = Processor.process_validateSmsVerifyCode
        self._processMap["resetPassword"] = Processor.process_resetPassword
        self._processMap["bindDeviceByFamilyId"] = Processor.process_bindDeviceByFamilyId
        self._processMap["unBindDeviceByFamilyId"] = Processor.process_unBindDeviceByFamilyId
        self._processMap["getDoctorInfoService"] = Processor.process_getDoctorInfoService
        self._processMap["getDoctorInfoByDeviceID"] = Processor.process_getDoctorInfoByDeviceID
        self._processMap["getRecipeListByUserID"] = Processor.process_getRecipeListByUserID
        self._processMap["getRecipeListByDeviceID"] = Processor.process_getRecipeListByDeviceID
        self._processMap["getphotoBydeviceID"] = Processor.process_getphotoBydeviceID
        self._processMap["getphotoInfoByurl"] = Processor.process_getphotoInfoByurl
        self._processMap["getUserNameByUserID"] = Processor.process_getUserNameByUserID
        self._processMap["checkBindStateByDeviceID"] = Processor.process_checkBindStateByDeviceID
        self._processMap["messageNotify"] = Processor.process_messageNotify
        self._processMap["getOutsideListByDeviceId"] = Processor.process_getOutsideListByDeviceId
        self._processMap["hostlogin"] = Processor.process_hostlogin
        self._processMap["getAllServices"] = Processor.process_getAllServices
        self._processMap["getUsingServices"] = Processor.process_getUsingServices
        self._processMap["addOutside"] = Processor.process_addOutside
        self._processMap["getServiceRecords"] = Processor.process_getServiceRecords
        self._processMap["getServiceHistory"] = Processor.process_getServiceHistory
        self._processMap["getFamilyPoints"] = Processor.process_getFamilyPoints
        self._processMap["getPointsHistory"] = Processor.process_getPointsHistory
        self._processMap["updateServiceRecords"] = Processor.process_updateServiceRecords
        self._processMap["getHealthReportLists"] = Processor.process_getHealthReportLists
        self._processMap["getHealthReportListsByFamilyId"] = Processor.process_getHealthReportListsByFamilyId
        self._processMap["getNewRecipeListByUserID"] = Processor.process_getNewRecipeListByUserID
        self._processMap["getNewRecipeListByDeviceID"] = Processor.process_getNewRecipeListByDeviceID
        self._processMap["getNewphotoBydeviceID"] = Processor.process_getNewphotoBydeviceID
        self._processMap["serviceCardGetUserPoints"] = Processor.process_serviceCardGetUserPoints
        self._processMap["serviceCardGetPointsHistory"] = Processor.process_serviceCardGetPointsHistory
        self._processMap["serviceCardLoginByCardNum"] = Processor.process_serviceCardLoginByCardNum
        self._processMap["serviceCardLoginByAccount"] = Processor.process_serviceCardLoginByAccount
        self._processMap["BindCardToPerson"] = Processor.process_BindCardToPerson
        self._processMap["getPurchasedServices"] = Processor.process_getPurchasedServices
        self._processMap["getPushMessage"] = Processor.process_getPushMessage
        self._processMap["getHealthControllerPlan"] = Processor.process_getHealthControllerPlan
        self._processMap["getHealthControllerRemindByMember"] = Processor.process_getHealthControllerRemindByMember
        self._processMap["getHealthControllerRemindByDeviceId"] = Processor.process_getHealthControllerRemindByDeviceId
        self._processMap["getHealthControllerRemindByDevice"] = Processor.process_getHealthControllerRemindByDevice
        self._processMap["sendMessageToManager"] = Processor.process_sendMessageToManager
        self._processMap["serviceLoginByProofNum"] = Processor.process_serviceLoginByProofNum
        self._processMap["getCallDoctor"] = Processor.process_getCallDoctor
        self._processMap["saveInterfaceLog"] = Processor.process_saveInterfaceLog
        self._processMap["getPeripheralConfigureList"] = Processor.process_getPeripheralConfigureList
        self._processMap["getMemberHealthInfo"] = Processor.process_getMemberHealthInfo
        self._processMap["updateMemeberHealthInfo"] = Processor.process_updateMemeberHealthInfo

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_login(self, seqid, iprot, oprot):
        args = login_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = login_result()
        try:
            result.success = self._handler.login(args.accountInfo)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("login", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_findXKAccountByProofNum(self, seqid, iprot, oprot):
        args = findXKAccountByProofNum_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = findXKAccountByProofNum_result()
        try:
            result.success = self._handler.findXKAccountByProofNum(args.proofNum)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("findXKAccountByProofNum", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_checkBindstate(self, seqid, iprot, oprot):
        args = checkBindstate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = checkBindstate_result()
        try:
            result.success = self._handler.checkBindstate(args.deviceId, args.userId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("checkBindstate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_registerAccount(self, seqid, iprot, oprot):
        args = registerAccount_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = registerAccount_result()
        try:
            result.success = self._handler.registerAccount(args.accountInfo, args.deviceId, args.verifyCode)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("registerAccount", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_registerAndBindAccount(self, seqid, iprot, oprot):
        args = registerAndBindAccount_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = registerAndBindAccount_result()
        try:
            result.success = self._handler.registerAndBindAccount(args.accountInfo, args.deviceId, args.verifyCode)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("registerAndBindAccount", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateAccount(self, seqid, iprot, oprot):
        args = updateAccount_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateAccount_result()
        try:
            result.success = self._handler.updateAccount(args.accountInfo)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateAccount", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_editPassword(self, seqid, iprot, oprot):
        args = editPassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = editPassword_result()
        try:
            self._handler.editPassword(args.userId, args.oldPassword, args.newPassword)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("editPassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMembers(self, seqid, iprot, oprot):
        args = getMembers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMembers_result()
        try:
            result.success = self._handler.getMembers(args.userId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMembers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_addMember(self, seqid, iprot, oprot):
        args = addMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addMember_result()
        try:
            self._handler.addMember(args.userId, args.password, args.loginUserId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("addMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteMembers(self, seqid, iprot, oprot):
        args = deleteMembers_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteMembers_result()
        try:
            result.success = self._handler.deleteMembers(args.userIds, args.loginUserId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteMembers", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCaregiverInfoService(self, seqid, iprot, oprot):
        args = getCaregiverInfoService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCaregiverInfoService_result()
        try:
            result.success = self._handler.getCaregiverInfoService(args.userId, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCaregiverInfoService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_bindDeviceByUserName(self, seqid, iprot, oprot):
        args = bindDeviceByUserName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = bindDeviceByUserName_result()
        try:
            self._handler.bindDeviceByUserName(args.userName, args.password, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("bindDeviceByUserName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_bindDeviceByUserId(self, seqid, iprot, oprot):
        args = bindDeviceByUserId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = bindDeviceByUserId_result()
        try:
            self._handler.bindDeviceByUserId(args.userId, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("bindDeviceByUserId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAccountInfosByDeviceId(self, seqid, iprot, oprot):
        args = getAccountInfosByDeviceId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAccountInfosByDeviceId_result()
        try:
            result.success = self._handler.getAccountInfosByDeviceId(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAccountInfosByDeviceId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteAccountsByDeviceId(self, seqid, iprot, oprot):
        args = deleteAccountsByDeviceId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteAccountsByDeviceId_result()
        try:
            result.success = self._handler.deleteAccountsByDeviceId(args.userIds, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteAccountsByDeviceId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getFamilyInfosByUserId(self, seqid, iprot, oprot):
        args = getFamilyInfosByUserId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getFamilyInfosByUserId_result()
        try:
            result.success = self._handler.getFamilyInfosByUserId(args.userId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getFamilyInfosByUserId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getVerifyCodeByDeviceId(self, seqid, iprot, oprot):
        args = getVerifyCodeByDeviceId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getVerifyCodeByDeviceId_result()
        try:
            result.success = self._handler.getVerifyCodeByDeviceId(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getVerifyCodeByDeviceId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sendSmsVerifyCode(self, seqid, iprot, oprot):
        args = sendSmsVerifyCode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendSmsVerifyCode_result()
        try:
            self._handler.sendSmsVerifyCode(args.phoneNum, args.verifyCode, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sendSmsVerifyCode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_validateSmsVerifyCode(self, seqid, iprot, oprot):
        args = validateSmsVerifyCode_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = validateSmsVerifyCode_result()
        try:
            self._handler.validateSmsVerifyCode(args.phoneNum, args.smsVerifyCode, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("validateSmsVerifyCode", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_resetPassword(self, seqid, iprot, oprot):
        args = resetPassword_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = resetPassword_result()
        try:
            self._handler.resetPassword(args.phoneNum, args.newPassword, args.smsVerifyCode, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("resetPassword", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_bindDeviceByFamilyId(self, seqid, iprot, oprot):
        args = bindDeviceByFamilyId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = bindDeviceByFamilyId_result()
        try:
            self._handler.bindDeviceByFamilyId(args.familyId, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("bindDeviceByFamilyId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_unBindDeviceByFamilyId(self, seqid, iprot, oprot):
        args = unBindDeviceByFamilyId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = unBindDeviceByFamilyId_result()
        try:
            self._handler.unBindDeviceByFamilyId(args.familyId, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("unBindDeviceByFamilyId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDoctorInfoService(self, seqid, iprot, oprot):
        args = getDoctorInfoService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDoctorInfoService_result()
        try:
            result.success = self._handler.getDoctorInfoService(args.userId, args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDoctorInfoService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getDoctorInfoByDeviceID(self, seqid, iprot, oprot):
        args = getDoctorInfoByDeviceID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getDoctorInfoByDeviceID_result()
        try:
            result.success = self._handler.getDoctorInfoByDeviceID(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getDoctorInfoByDeviceID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRecipeListByUserID(self, seqid, iprot, oprot):
        args = getRecipeListByUserID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRecipeListByUserID_result()
        try:
            result.success = self._handler.getRecipeListByUserID(args.userId, args.startTime)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRecipeListByUserID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getRecipeListByDeviceID(self, seqid, iprot, oprot):
        args = getRecipeListByDeviceID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getRecipeListByDeviceID_result()
        try:
            result.success = self._handler.getRecipeListByDeviceID(args.deviceId, args.startTime)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getRecipeListByDeviceID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getphotoBydeviceID(self, seqid, iprot, oprot):
        args = getphotoBydeviceID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getphotoBydeviceID_result()
        try:
            result.success = self._handler.getphotoBydeviceID(args.deviceId, args.shareTime)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getphotoBydeviceID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getphotoInfoByurl(self, seqid, iprot, oprot):
        args = getphotoInfoByurl_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getphotoInfoByurl_result()
        try:
            result.success = self._handler.getphotoInfoByurl(args.photourls)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getphotoInfoByurl", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getUserNameByUserID(self, seqid, iprot, oprot):
        args = getUserNameByUserID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUserNameByUserID_result()
        try:
            result.success = self._handler.getUserNameByUserID(args.userId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getUserNameByUserID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_checkBindStateByDeviceID(self, seqid, iprot, oprot):
        args = checkBindStateByDeviceID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = checkBindStateByDeviceID_result()
        try:
            result.success = self._handler.checkBindStateByDeviceID(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("checkBindStateByDeviceID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_messageNotify(self, seqid, iprot, oprot):
        args = messageNotify_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = messageNotify_result()
        try:
            self._handler.messageNotify(args.msgInfo)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("messageNotify", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getOutsideListByDeviceId(self, seqid, iprot, oprot):
        args = getOutsideListByDeviceId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getOutsideListByDeviceId_result()
        try:
            result.success = self._handler.getOutsideListByDeviceId(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getOutsideListByDeviceId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_hostlogin(self, seqid, iprot, oprot):
        args = hostlogin_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = hostlogin_result()
        try:
            result.success = self._handler.hostlogin(args.deviceId, args.hostid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("hostlogin", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAllServices(self, seqid, iprot, oprot):
        args = getAllServices_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAllServices_result()
        try:
            result.success = self._handler.getAllServices(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAllServices", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getUsingServices(self, seqid, iprot, oprot):
        args = getUsingServices_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getUsingServices_result()
        try:
            result.success = self._handler.getUsingServices(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getUsingServices", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_addOutside(self, seqid, iprot, oprot):
        args = addOutside_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = addOutside_result()
        try:
            result.success = self._handler.addOutside(args.deviceId, args.info)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("addOutside", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getServiceRecords(self, seqid, iprot, oprot):
        args = getServiceRecords_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getServiceRecords_result()
        try:
            result.success = self._handler.getServiceRecords(args.deviceId, args.ServiceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getServiceRecords", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getServiceHistory(self, seqid, iprot, oprot):
        args = getServiceHistory_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getServiceHistory_result()
        try:
            result.success = self._handler.getServiceHistory(args.deviceId, args.serviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getServiceHistory", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getFamilyPoints(self, seqid, iprot, oprot):
        args = getFamilyPoints_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getFamilyPoints_result()
        try:
            result.success = self._handler.getFamilyPoints(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getFamilyPoints", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPointsHistory(self, seqid, iprot, oprot):
        args = getPointsHistory_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPointsHistory_result()
        try:
            result.success = self._handler.getPointsHistory(args.deviceId, args.num)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPointsHistory", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateServiceRecords(self, seqid, iprot, oprot):
        args = updateServiceRecords_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateServiceRecords_result()
        try:
            result.success = self._handler.updateServiceRecords(args.recordId, args.result)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateServiceRecords", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getHealthReportLists(self, seqid, iprot, oprot):
        args = getHealthReportLists_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getHealthReportLists_result()
        try:
            result.success = self._handler.getHealthReportLists(args.userid, args.type, args.startindex, args.endindex)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getHealthReportLists", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getHealthReportListsByFamilyId(self, seqid, iprot, oprot):
        args = getHealthReportListsByFamilyId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getHealthReportListsByFamilyId_result()
        try:
            result.success = self._handler.getHealthReportListsByFamilyId(args.userid, args.type, args.startindex, args.endindex, args.familyId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getHealthReportListsByFamilyId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getNewRecipeListByUserID(self, seqid, iprot, oprot):
        args = getNewRecipeListByUserID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getNewRecipeListByUserID_result()
        try:
            result.success = self._handler.getNewRecipeListByUserID(args.userId, args.startTime, args.endTime)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getNewRecipeListByUserID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getNewRecipeListByDeviceID(self, seqid, iprot, oprot):
        args = getNewRecipeListByDeviceID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getNewRecipeListByDeviceID_result()
        try:
            result.success = self._handler.getNewRecipeListByDeviceID(args.deviceId, args.startTime, args.endTime)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getNewRecipeListByDeviceID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getNewphotoBydeviceID(self, seqid, iprot, oprot):
        args = getNewphotoBydeviceID_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getNewphotoBydeviceID_result()
        try:
            result.success = self._handler.getNewphotoBydeviceID(args.deviceId, args.starTime, args.endtime)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getNewphotoBydeviceID", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_serviceCardGetUserPoints(self, seqid, iprot, oprot):
        args = serviceCardGetUserPoints_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = serviceCardGetUserPoints_result()
        try:
            result.success = self._handler.serviceCardGetUserPoints(args.userId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("serviceCardGetUserPoints", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_serviceCardGetPointsHistory(self, seqid, iprot, oprot):
        args = serviceCardGetPointsHistory_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = serviceCardGetPointsHistory_result()
        try:
            result.success = self._handler.serviceCardGetPointsHistory(args.userId, args.num)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("serviceCardGetPointsHistory", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_serviceCardLoginByCardNum(self, seqid, iprot, oprot):
        args = serviceCardLoginByCardNum_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = serviceCardLoginByCardNum_result()
        try:
            result.success = self._handler.serviceCardLoginByCardNum(args.accountInfo, args.cardNo)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("serviceCardLoginByCardNum", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_serviceCardLoginByAccount(self, seqid, iprot, oprot):
        args = serviceCardLoginByAccount_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = serviceCardLoginByAccount_result()
        try:
            result.success = self._handler.serviceCardLoginByAccount(args.accountInfo)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("serviceCardLoginByAccount", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_BindCardToPerson(self, seqid, iprot, oprot):
        args = BindCardToPerson_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = BindCardToPerson_result()
        try:
            result.success = self._handler.BindCardToPerson(args.deviceid, args.cardNo, args.pwd, args.userid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("BindCardToPerson", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPurchasedServices(self, seqid, iprot, oprot):
        args = getPurchasedServices_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPurchasedServices_result()
        try:
            result.success = self._handler.getPurchasedServices(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPurchasedServices", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPushMessage(self, seqid, iprot, oprot):
        args = getPushMessage_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPushMessage_result()
        try:
            result.success = self._handler.getPushMessage(args.msgid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPushMessage", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getHealthControllerPlan(self, seqid, iprot, oprot):
        args = getHealthControllerPlan_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getHealthControllerPlan_result()
        try:
            result.success = self._handler.getHealthControllerPlan(args.userid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getHealthControllerPlan", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getHealthControllerRemindByMember(self, seqid, iprot, oprot):
        args = getHealthControllerRemindByMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getHealthControllerRemindByMember_result()
        try:
            result.success = self._handler.getHealthControllerRemindByMember(args.userid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getHealthControllerRemindByMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getHealthControllerRemindByDeviceId(self, seqid, iprot, oprot):
        args = getHealthControllerRemindByDeviceId_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getHealthControllerRemindByDeviceId_result()
        try:
            result.success = self._handler.getHealthControllerRemindByDeviceId(args.deviceId)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getHealthControllerRemindByDeviceId", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getHealthControllerRemindByDevice(self, seqid, iprot, oprot):
        args = getHealthControllerRemindByDevice_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getHealthControllerRemindByDevice_result()
        try:
            result.success = self._handler.getHealthControllerRemindByDevice(args.deviceid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getHealthControllerRemindByDevice", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_sendMessageToManager(self, seqid, iprot, oprot):
        args = sendMessageToManager_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sendMessageToManager_result()
        try:
            self._handler.sendMessageToManager(args.accountInfo, args.deviceid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sendMessageToManager", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_serviceLoginByProofNum(self, seqid, iprot, oprot):
        args = serviceLoginByProofNum_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = serviceLoginByProofNum_result()
        try:
            result.success = self._handler.serviceLoginByProofNum(args.proofNum, args.deviceid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except XKCommon.ttypes.HealthServiceException as ex:
            msg_type = TMessageType.REPLY
            result.ex = ex
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("serviceLoginByProofNum", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCallDoctor(self, seqid, iprot, oprot):
        args = getCallDoctor_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCallDoctor_result()
        try:
            result.success = self._handler.getCallDoctor(args.serviceid)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCallDoctor", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_saveInterfaceLog(self, seqid, iprot, oprot):
        args = saveInterfaceLog_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = saveInterfaceLog_result()
        try:
            self._handler.saveInterfaceLog(args.interfaceLog)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("saveInterfaceLog", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPeripheralConfigureList(self, seqid, iprot, oprot):
        args = getPeripheralConfigureList_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPeripheralConfigureList_result()
        try:
            result.success = self._handler.getPeripheralConfigureList()
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPeripheralConfigureList", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMemberHealthInfo(self, seqid, iprot, oprot):
        args = getMemberHealthInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMemberHealthInfo_result()
        try:
            result.success = self._handler.getMemberHealthInfo(args.personPHRCode)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMemberHealthInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateMemeberHealthInfo(self, seqid, iprot, oprot):
        args = updateMemeberHealthInfo_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateMemeberHealthInfo_result()
        try:
            self._handler.updateMemeberHealthInfo(args.personPHRCode, args.healthInfo)
            msg_type = TMessageType.REPLY
        except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
            raise
        except Exception as ex:
            msg_type = TMessageType.EXCEPTION
            logging.exception(ex)
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateMemeberHealthInfo", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class login_args(object):
    """
    Attributes:
     - accountInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'accountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 1
    )

    def __init__(self, accountInfo=None,):
        self.accountInfo = accountInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.accountInfo = AccountInfo()
                    self.accountInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('login_args')
        if self.accountInfo is not None:
            oprot.writeFieldBegin('accountInfo', TType.STRUCT, 1)
            self.accountInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class login_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = AccountInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('login_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class findXKAccountByProofNum_args(object):
    """
    Attributes:
     - proofNum
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'proofNum', 'UTF8', None, ),  # 1
    )

    def __init__(self, proofNum=None,):
        self.proofNum = proofNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.proofNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('findXKAccountByProofNum_args')
        if self.proofNum is not None:
            oprot.writeFieldBegin('proofNum', TType.STRING, 1)
            oprot.writeString(self.proofNum.encode('utf-8') if sys.version_info[0] == 2 else self.proofNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class findXKAccountByProofNum_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = AccountInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('findXKAccountByProofNum_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class checkBindstate_args(object):
    """
    Attributes:
     - deviceId
     - userId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
    )

    def __init__(self, deviceId=None, userId=None,):
        self.deviceId = deviceId
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('checkBindstate_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class checkBindstate_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.BOOL, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('checkBindstate_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class registerAccount_args(object):
    """
    Attributes:
     - accountInfo
     - deviceId
     - verifyCode
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'accountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'deviceId', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'verifyCode', 'UTF8', None, ),  # 3
    )

    def __init__(self, accountInfo=None, deviceId=None, verifyCode=None,):
        self.accountInfo = accountInfo
        self.deviceId = deviceId
        self.verifyCode = verifyCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.accountInfo = AccountInfo()
                    self.accountInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.verifyCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('registerAccount_args')
        if self.accountInfo is not None:
            oprot.writeFieldBegin('accountInfo', TType.STRUCT, 1)
            self.accountInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 2)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.verifyCode is not None:
            oprot.writeFieldBegin('verifyCode', TType.STRING, 3)
            oprot.writeString(self.verifyCode.encode('utf-8') if sys.version_info[0] == 2 else self.verifyCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class registerAccount_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = AccountInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('registerAccount_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class registerAndBindAccount_args(object):
    """
    Attributes:
     - accountInfo
     - deviceId
     - verifyCode
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'accountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'deviceId', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'verifyCode', 'UTF8', None, ),  # 3
    )

    def __init__(self, accountInfo=None, deviceId=None, verifyCode=None,):
        self.accountInfo = accountInfo
        self.deviceId = deviceId
        self.verifyCode = verifyCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.accountInfo = AccountInfo()
                    self.accountInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.verifyCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('registerAndBindAccount_args')
        if self.accountInfo is not None:
            oprot.writeFieldBegin('accountInfo', TType.STRUCT, 1)
            self.accountInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 2)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.verifyCode is not None:
            oprot.writeFieldBegin('verifyCode', TType.STRING, 3)
            oprot.writeString(self.verifyCode.encode('utf-8') if sys.version_info[0] == 2 else self.verifyCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class registerAndBindAccount_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = AccountInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('registerAndBindAccount_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateAccount_args(object):
    """
    Attributes:
     - accountInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'accountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 1
    )

    def __init__(self, accountInfo=None,):
        self.accountInfo = accountInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.accountInfo = AccountInfo()
                    self.accountInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateAccount_args')
        if self.accountInfo is not None:
            oprot.writeFieldBegin('accountInfo', TType.STRUCT, 1)
            self.accountInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateAccount_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = AccountInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateAccount_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class editPassword_args(object):
    """
    Attributes:
     - userId
     - oldPassword
     - newPassword
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'oldPassword', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'newPassword', 'UTF8', None, ),  # 3
    )

    def __init__(self, userId=None, oldPassword=None, newPassword=None,):
        self.userId = userId
        self.oldPassword = oldPassword
        self.newPassword = newPassword

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.oldPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.newPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('editPassword_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.oldPassword is not None:
            oprot.writeFieldBegin('oldPassword', TType.STRING, 2)
            oprot.writeString(self.oldPassword.encode('utf-8') if sys.version_info[0] == 2 else self.oldPassword)
            oprot.writeFieldEnd()
        if self.newPassword is not None:
            oprot.writeFieldBegin('newPassword', TType.STRING, 3)
            oprot.writeString(self.newPassword.encode('utf-8') if sys.version_info[0] == 2 else self.newPassword)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class editPassword_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('editPassword_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getMembers_args(object):
    """
    Attributes:
     - userId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    )

    def __init__(self, userId=None,):
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getMembers_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getMembers_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (MemberInfo, MemberInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype66, _size63) = iprot.readListBegin()
                    for _i67 in range(_size63):
                        _elem68 = MemberInfo()
                        _elem68.read(iprot)
                        self.success.append(_elem68)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getMembers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter69 in self.success:
                iter69.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class addMember_args(object):
    """
    Attributes:
     - userId
     - password
     - loginUserId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'loginUserId', 'UTF8', None, ),  # 3
    )

    def __init__(self, userId=None, password=None, loginUserId=None,):
        self.userId = userId
        self.password = password
        self.loginUserId = loginUserId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.loginUserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('addMember_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.loginUserId is not None:
            oprot.writeFieldBegin('loginUserId', TType.STRING, 3)
            oprot.writeString(self.loginUserId.encode('utf-8') if sys.version_info[0] == 2 else self.loginUserId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class addMember_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('addMember_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteMembers_args(object):
    """
    Attributes:
     - userIds
     - loginUserId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'userIds', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRING, 'loginUserId', 'UTF8', None, ),  # 2
    )

    def __init__(self, userIds=None, loginUserId=None,):
        self.userIds = userIds
        self.loginUserId = loginUserId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.userIds = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.userIds.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.loginUserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteMembers_args')
        if self.userIds is not None:
            oprot.writeFieldBegin('userIds', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.userIds))
            for iter76 in self.userIds:
                oprot.writeString(iter76.encode('utf-8') if sys.version_info[0] == 2 else iter76)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.loginUserId is not None:
            oprot.writeFieldBegin('loginUserId', TType.STRING, 2)
            oprot.writeString(self.loginUserId.encode('utf-8') if sys.version_info[0] == 2 else self.loginUserId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteMembers_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (MemberInfo, MemberInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype80, _size77) = iprot.readListBegin()
                    for _i81 in range(_size77):
                        _elem82 = MemberInfo()
                        _elem82.read(iprot)
                        self.success.append(_elem82)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteMembers_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter83 in self.success:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getCaregiverInfoService_args(object):
    """
    Attributes:
     - userId
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'deviceId', 'UTF8', None, ),  # 2
    )

    def __init__(self, userId=None, deviceId=None,):
        self.userId = userId
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getCaregiverInfoService_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 2)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getCaregiverInfoService_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (CaregiverInfo, CaregiverInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = CaregiverInfo()
                        _elem89.read(iprot)
                        self.success.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getCaregiverInfoService_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter90 in self.success:
                iter90.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bindDeviceByUserName_args(object):
    """
    Attributes:
     - userName
     - password
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userName', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'deviceId', 'UTF8', None, ),  # 3
    )

    def __init__(self, userName=None, password=None, deviceId=None,):
        self.userName = userName
        self.password = password
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('bindDeviceByUserName_args')
        if self.userName is not None:
            oprot.writeFieldBegin('userName', TType.STRING, 1)
            oprot.writeString(self.userName.encode('utf-8') if sys.version_info[0] == 2 else self.userName)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 3)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bindDeviceByUserName_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('bindDeviceByUserName_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bindDeviceByUserId_args(object):
    """
    Attributes:
     - userId
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'deviceId', 'UTF8', None, ),  # 2
    )

    def __init__(self, userId=None, deviceId=None,):
        self.userId = userId
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('bindDeviceByUserId_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 2)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bindDeviceByUserId_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('bindDeviceByUserId_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAccountInfosByDeviceId_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAccountInfosByDeviceId_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAccountInfosByDeviceId_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (AccountInfo, AccountInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = AccountInfo()
                        _elem96.read(iprot)
                        self.success.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAccountInfosByDeviceId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter97 in self.success:
                iter97.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteAccountsByDeviceId_args(object):
    """
    Attributes:
     - userIds
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'userIds', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.STRING, 'deviceId', 'UTF8', None, ),  # 2
    )

    def __init__(self, userIds=None, deviceId=None,):
        self.userIds = userIds
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.userIds = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.userIds.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteAccountsByDeviceId_args')
        if self.userIds is not None:
            oprot.writeFieldBegin('userIds', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.userIds))
            for iter104 in self.userIds:
                oprot.writeString(iter104.encode('utf-8') if sys.version_info[0] == 2 else iter104)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 2)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deleteAccountsByDeviceId_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (AccountInfo, AccountInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = AccountInfo()
                        _elem110.read(iprot)
                        self.success.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('deleteAccountsByDeviceId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter111 in self.success:
                iter111.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getFamilyInfosByUserId_args(object):
    """
    Attributes:
     - userId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    )

    def __init__(self, userId=None,):
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getFamilyInfosByUserId_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getFamilyInfosByUserId_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (FamilyInfo, FamilyInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype115, _size112) = iprot.readListBegin()
                    for _i116 in range(_size112):
                        _elem117 = FamilyInfo()
                        _elem117.read(iprot)
                        self.success.append(_elem117)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getFamilyInfosByUserId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter118 in self.success:
                iter118.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getVerifyCodeByDeviceId_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getVerifyCodeByDeviceId_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getVerifyCodeByDeviceId_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getVerifyCodeByDeviceId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendSmsVerifyCode_args(object):
    """
    Attributes:
     - phoneNum
     - verifyCode
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'phoneNum', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'verifyCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'deviceId', 'UTF8', None, ),  # 3
    )

    def __init__(self, phoneNum=None, verifyCode=None, deviceId=None,):
        self.phoneNum = phoneNum
        self.verifyCode = verifyCode
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.phoneNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.verifyCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendSmsVerifyCode_args')
        if self.phoneNum is not None:
            oprot.writeFieldBegin('phoneNum', TType.STRING, 1)
            oprot.writeString(self.phoneNum.encode('utf-8') if sys.version_info[0] == 2 else self.phoneNum)
            oprot.writeFieldEnd()
        if self.verifyCode is not None:
            oprot.writeFieldBegin('verifyCode', TType.STRING, 2)
            oprot.writeString(self.verifyCode.encode('utf-8') if sys.version_info[0] == 2 else self.verifyCode)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 3)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendSmsVerifyCode_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendSmsVerifyCode_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class validateSmsVerifyCode_args(object):
    """
    Attributes:
     - phoneNum
     - smsVerifyCode
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'phoneNum', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'smsVerifyCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'deviceId', 'UTF8', None, ),  # 3
    )

    def __init__(self, phoneNum=None, smsVerifyCode=None, deviceId=None,):
        self.phoneNum = phoneNum
        self.smsVerifyCode = smsVerifyCode
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.phoneNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.smsVerifyCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('validateSmsVerifyCode_args')
        if self.phoneNum is not None:
            oprot.writeFieldBegin('phoneNum', TType.STRING, 1)
            oprot.writeString(self.phoneNum.encode('utf-8') if sys.version_info[0] == 2 else self.phoneNum)
            oprot.writeFieldEnd()
        if self.smsVerifyCode is not None:
            oprot.writeFieldBegin('smsVerifyCode', TType.STRING, 2)
            oprot.writeString(self.smsVerifyCode.encode('utf-8') if sys.version_info[0] == 2 else self.smsVerifyCode)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 3)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class validateSmsVerifyCode_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('validateSmsVerifyCode_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class resetPassword_args(object):
    """
    Attributes:
     - phoneNum
     - newPassword
     - smsVerifyCode
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'phoneNum', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'newPassword', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'smsVerifyCode', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'deviceId', 'UTF8', None, ),  # 4
    )

    def __init__(self, phoneNum=None, newPassword=None, smsVerifyCode=None, deviceId=None,):
        self.phoneNum = phoneNum
        self.newPassword = newPassword
        self.smsVerifyCode = smsVerifyCode
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.phoneNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.newPassword = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.smsVerifyCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('resetPassword_args')
        if self.phoneNum is not None:
            oprot.writeFieldBegin('phoneNum', TType.STRING, 1)
            oprot.writeString(self.phoneNum.encode('utf-8') if sys.version_info[0] == 2 else self.phoneNum)
            oprot.writeFieldEnd()
        if self.newPassword is not None:
            oprot.writeFieldBegin('newPassword', TType.STRING, 2)
            oprot.writeString(self.newPassword.encode('utf-8') if sys.version_info[0] == 2 else self.newPassword)
            oprot.writeFieldEnd()
        if self.smsVerifyCode is not None:
            oprot.writeFieldBegin('smsVerifyCode', TType.STRING, 3)
            oprot.writeString(self.smsVerifyCode.encode('utf-8') if sys.version_info[0] == 2 else self.smsVerifyCode)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 4)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class resetPassword_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('resetPassword_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bindDeviceByFamilyId_args(object):
    """
    Attributes:
     - familyId
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'familyId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'deviceId', 'UTF8', None, ),  # 2
    )

    def __init__(self, familyId=None, deviceId=None,):
        self.familyId = familyId
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.familyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('bindDeviceByFamilyId_args')
        if self.familyId is not None:
            oprot.writeFieldBegin('familyId', TType.STRING, 1)
            oprot.writeString(self.familyId.encode('utf-8') if sys.version_info[0] == 2 else self.familyId)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 2)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class bindDeviceByFamilyId_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('bindDeviceByFamilyId_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class unBindDeviceByFamilyId_args(object):
    """
    Attributes:
     - familyId
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'familyId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'deviceId', 'UTF8', None, ),  # 2
    )

    def __init__(self, familyId=None, deviceId=None,):
        self.familyId = familyId
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.familyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('unBindDeviceByFamilyId_args')
        if self.familyId is not None:
            oprot.writeFieldBegin('familyId', TType.STRING, 1)
            oprot.writeString(self.familyId.encode('utf-8') if sys.version_info[0] == 2 else self.familyId)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 2)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class unBindDeviceByFamilyId_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('unBindDeviceByFamilyId_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getDoctorInfoService_args(object):
    """
    Attributes:
     - userId
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'deviceId', 'UTF8', None, ),  # 2
    )

    def __init__(self, userId=None, deviceId=None,):
        self.userId = userId
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getDoctorInfoService_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 2)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getDoctorInfoService_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (CaregiverInfo, CaregiverInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = CaregiverInfo()
                        _elem124.read(iprot)
                        self.success.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getDoctorInfoService_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter125 in self.success:
                iter125.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getDoctorInfoByDeviceID_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getDoctorInfoByDeviceID_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getDoctorInfoByDeviceID_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (MemberDoctorRelation, MemberDoctorRelation.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype129, _size126) = iprot.readListBegin()
                    for _i130 in range(_size126):
                        _elem131 = MemberDoctorRelation()
                        _elem131.read(iprot)
                        self.success.append(_elem131)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getDoctorInfoByDeviceID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter132 in self.success:
                iter132.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRecipeListByUserID_args(object):
    """
    Attributes:
     - userId
     - startTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'startTime', 'UTF8', None, ),  # 2
    )

    def __init__(self, userId=None, startTime=None,):
        self.userId = userId
        self.startTime = startTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.startTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRecipeListByUserID_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.STRING, 2)
            oprot.writeString(self.startTime.encode('utf-8') if sys.version_info[0] == 2 else self.startTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRecipeListByUserID_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (RecipeInfo, RecipeInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = RecipeInfo()
                        _elem138.read(iprot)
                        self.success.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRecipeListByUserID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter139 in self.success:
                iter139.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRecipeListByDeviceID_args(object):
    """
    Attributes:
     - deviceId
     - startTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'startTime', 'UTF8', None, ),  # 2
    )

    def __init__(self, deviceId=None, startTime=None,):
        self.deviceId = deviceId
        self.startTime = startTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.startTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRecipeListByDeviceID_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.STRING, 2)
            oprot.writeString(self.startTime.encode('utf-8') if sys.version_info[0] == 2 else self.startTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getRecipeListByDeviceID_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (RecipeInfo, RecipeInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype143, _size140) = iprot.readListBegin()
                    for _i144 in range(_size140):
                        _elem145 = RecipeInfo()
                        _elem145.read(iprot)
                        self.success.append(_elem145)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getRecipeListByDeviceID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter146 in self.success:
                iter146.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getphotoBydeviceID_args(object):
    """
    Attributes:
     - deviceId
     - shareTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'shareTime', 'UTF8', None, ),  # 2
    )

    def __init__(self, deviceId=None, shareTime=None,):
        self.deviceId = deviceId
        self.shareTime = shareTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.shareTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getphotoBydeviceID_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.shareTime is not None:
            oprot.writeFieldBegin('shareTime', TType.STRING, 2)
            oprot.writeString(self.shareTime.encode('utf-8') if sys.version_info[0] == 2 else self.shareTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getphotoBydeviceID_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (PhotoInfo, PhotoInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype150, _size147) = iprot.readListBegin()
                    for _i151 in range(_size147):
                        _elem152 = PhotoInfo()
                        _elem152.read(iprot)
                        self.success.append(_elem152)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getphotoBydeviceID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter153 in self.success:
                iter153.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getphotoInfoByurl_args(object):
    """
    Attributes:
     - photourls
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'photourls', (TType.STRING, 'UTF8', False), None, ),  # 1
    )

    def __init__(self, photourls=None,):
        self.photourls = photourls

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.photourls = []
                    (_etype157, _size154) = iprot.readListBegin()
                    for _i158 in range(_size154):
                        _elem159 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.photourls.append(_elem159)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getphotoInfoByurl_args')
        if self.photourls is not None:
            oprot.writeFieldBegin('photourls', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.photourls))
            for iter160 in self.photourls:
                oprot.writeString(iter160.encode('utf-8') if sys.version_info[0] == 2 else iter160)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getphotoInfoByurl_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRING, 'BINARY', False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype164, _size161) = iprot.readListBegin()
                    for _i165 in range(_size161):
                        _elem166 = iprot.readBinary()
                        self.success.append(_elem166)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getphotoInfoByurl_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for iter167 in self.success:
                oprot.writeBinary(iter167)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUserNameByUserID_args(object):
    """
    Attributes:
     - userId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    )

    def __init__(self, userId=None,):
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUserNameByUserID_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUserNameByUserID_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUserNameByUserID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class checkBindStateByDeviceID_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('checkBindStateByDeviceID_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class checkBindStateByDeviceID_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (FamilyInfo, FamilyInfo.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FamilyInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('checkBindStateByDeviceID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class messageNotify_args(object):
    """
    Attributes:
     - msgInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'msgInfo', (MessageInfo, MessageInfo.thrift_spec), None, ),  # 1
    )

    def __init__(self, msgInfo=None,):
        self.msgInfo = msgInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.msgInfo = MessageInfo()
                    self.msgInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('messageNotify_args')
        if self.msgInfo is not None:
            oprot.writeFieldBegin('msgInfo', TType.STRUCT, 1)
            self.msgInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class messageNotify_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('messageNotify_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getOutsideListByDeviceId_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getOutsideListByDeviceId_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getOutsideListByDeviceId_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (OutsideInfo, OutsideInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype171, _size168) = iprot.readListBegin()
                    for _i172 in range(_size168):
                        _elem173 = OutsideInfo()
                        _elem173.read(iprot)
                        self.success.append(_elem173)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getOutsideListByDeviceId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter174 in self.success:
                iter174.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class hostlogin_args(object):
    """
    Attributes:
     - deviceId
     - hostid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'hostid', 'UTF8', None, ),  # 2
    )

    def __init__(self, deviceId=None, hostid=None,):
        self.deviceId = deviceId
        self.hostid = hostid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hostid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('hostlogin_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.hostid is not None:
            oprot.writeFieldBegin('hostid', TType.STRING, 2)
            oprot.writeString(self.hostid.encode('utf-8') if sys.version_info[0] == 2 else self.hostid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class hostlogin_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('hostlogin_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllServices_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllServices_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getAllServices_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (ServicesInfo, ServicesInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype178, _size175) = iprot.readListBegin()
                    for _i179 in range(_size175):
                        _elem180 = ServicesInfo()
                        _elem180.read(iprot)
                        self.success.append(_elem180)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getAllServices_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter181 in self.success:
                iter181.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUsingServices_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUsingServices_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getUsingServices_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (UsingServices, UsingServices.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype185, _size182) = iprot.readListBegin()
                    for _i186 in range(_size182):
                        _elem187 = UsingServices()
                        _elem187.read(iprot)
                        self.success.append(_elem187)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getUsingServices_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter188 in self.success:
                iter188.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class addOutside_args(object):
    """
    Attributes:
     - deviceId
     - info
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'info', (OutsideInfo, OutsideInfo.thrift_spec), None, ),  # 2
    )

    def __init__(self, deviceId=None, info=None,):
        self.deviceId = deviceId
        self.info = info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.info = OutsideInfo()
                    self.info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('addOutside_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.STRUCT, 2)
            self.info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class addOutside_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('addOutside_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getServiceRecords_args(object):
    """
    Attributes:
     - deviceId
     - ServiceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'ServiceId', 'UTF8', None, ),  # 2
    )

    def __init__(self, deviceId=None, ServiceId=None,):
        self.deviceId = deviceId
        self.ServiceId = ServiceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ServiceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getServiceRecords_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.ServiceId is not None:
            oprot.writeFieldBegin('ServiceId', TType.STRING, 2)
            oprot.writeString(self.ServiceId.encode('utf-8') if sys.version_info[0] == 2 else self.ServiceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getServiceRecords_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (ServiceRecord, ServiceRecord.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype192, _size189) = iprot.readListBegin()
                    for _i193 in range(_size189):
                        _elem194 = ServiceRecord()
                        _elem194.read(iprot)
                        self.success.append(_elem194)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getServiceRecords_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter195 in self.success:
                iter195.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getServiceHistory_args(object):
    """
    Attributes:
     - deviceId
     - serviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'serviceId', 'UTF8', None, ),  # 2
    )

    def __init__(self, deviceId=None, serviceId=None,):
        self.deviceId = deviceId
        self.serviceId = serviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.serviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getServiceHistory_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.STRING, 2)
            oprot.writeString(self.serviceId.encode('utf-8') if sys.version_info[0] == 2 else self.serviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getServiceHistory_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (UsingServices, UsingServices.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype199, _size196) = iprot.readListBegin()
                    for _i200 in range(_size196):
                        _elem201 = UsingServices()
                        _elem201.read(iprot)
                        self.success.append(_elem201)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getServiceHistory_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter202 in self.success:
                iter202.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getFamilyPoints_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getFamilyPoints_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getFamilyPoints_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getFamilyPoints_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPointsHistory_args(object):
    """
    Attributes:
     - deviceId
     - num
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.I32, 'num', None, None, ),  # 2
    )

    def __init__(self, deviceId=None, num=None,):
        self.deviceId = deviceId
        self.num = num

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPointsHistory_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.num is not None:
            oprot.writeFieldBegin('num', TType.I32, 2)
            oprot.writeI32(self.num)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPointsHistory_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (PointRecords, PointRecords.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype206, _size203) = iprot.readListBegin()
                    for _i207 in range(_size203):
                        _elem208 = PointRecords()
                        _elem208.read(iprot)
                        self.success.append(_elem208)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPointsHistory_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter209 in self.success:
                iter209.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateServiceRecords_args(object):
    """
    Attributes:
     - recordId
     - result
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'recordId', None, None, ),  # 1
        (2, TType.I32, 'result', None, None, ),  # 2
    )

    def __init__(self, recordId=None, result=None,):
        self.recordId = recordId
        self.result = result

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.recordId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.result = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateServiceRecords_args')
        if self.recordId is not None:
            oprot.writeFieldBegin('recordId', TType.I32, 1)
            oprot.writeI32(self.recordId)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.I32, 2)
            oprot.writeI32(self.result)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateServiceRecords_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateServiceRecords_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthReportLists_args(object):
    """
    Attributes:
     - userid
     - type
     - startindex
     - endindex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userid', 'UTF8', None, ),  # 1
        (2, TType.I32, 'type', None, None, ),  # 2
        (3, TType.I32, 'startindex', None, None, ),  # 3
        (4, TType.I32, 'endindex', None, None, ),  # 4
    )

    def __init__(self, userid=None, type=None, startindex=None, endindex=None,):
        self.userid = userid
        self.type = type
        self.startindex = startindex
        self.endindex = endindex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.startindex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.endindex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthReportLists_args')
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.STRING, 1)
            oprot.writeString(self.userid.encode('utf-8') if sys.version_info[0] == 2 else self.userid)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.startindex is not None:
            oprot.writeFieldBegin('startindex', TType.I32, 3)
            oprot.writeI32(self.startindex)
            oprot.writeFieldEnd()
        if self.endindex is not None:
            oprot.writeFieldBegin('endindex', TType.I32, 4)
            oprot.writeI32(self.endindex)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthReportLists_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (HealthReport, HealthReport.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype213, _size210) = iprot.readListBegin()
                    for _i214 in range(_size210):
                        _elem215 = HealthReport()
                        _elem215.read(iprot)
                        self.success.append(_elem215)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthReportLists_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter216 in self.success:
                iter216.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthReportListsByFamilyId_args(object):
    """
    Attributes:
     - userid
     - type
     - startindex
     - endindex
     - familyId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userid', 'UTF8', None, ),  # 1
        (2, TType.I32, 'type', None, None, ),  # 2
        (3, TType.I32, 'startindex', None, None, ),  # 3
        (4, TType.I32, 'endindex', None, None, ),  # 4
        (5, TType.STRING, 'familyId', 'UTF8', None, ),  # 5
    )

    def __init__(self, userid=None, type=None, startindex=None, endindex=None, familyId=None,):
        self.userid = userid
        self.type = type
        self.startindex = startindex
        self.endindex = endindex
        self.familyId = familyId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.startindex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.endindex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.familyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthReportListsByFamilyId_args')
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.STRING, 1)
            oprot.writeString(self.userid.encode('utf-8') if sys.version_info[0] == 2 else self.userid)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.startindex is not None:
            oprot.writeFieldBegin('startindex', TType.I32, 3)
            oprot.writeI32(self.startindex)
            oprot.writeFieldEnd()
        if self.endindex is not None:
            oprot.writeFieldBegin('endindex', TType.I32, 4)
            oprot.writeI32(self.endindex)
            oprot.writeFieldEnd()
        if self.familyId is not None:
            oprot.writeFieldBegin('familyId', TType.STRING, 5)
            oprot.writeString(self.familyId.encode('utf-8') if sys.version_info[0] == 2 else self.familyId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthReportListsByFamilyId_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (HealthReport, HealthReport.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype220, _size217) = iprot.readListBegin()
                    for _i221 in range(_size217):
                        _elem222 = HealthReport()
                        _elem222.read(iprot)
                        self.success.append(_elem222)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthReportListsByFamilyId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter223 in self.success:
                iter223.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getNewRecipeListByUserID_args(object):
    """
    Attributes:
     - userId
     - startTime
     - endTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'startTime', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'endTime', 'UTF8', None, ),  # 3
    )

    def __init__(self, userId=None, startTime=None, endTime=None,):
        self.userId = userId
        self.startTime = startTime
        self.endTime = endTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.startTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.endTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getNewRecipeListByUserID_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.STRING, 2)
            oprot.writeString(self.startTime.encode('utf-8') if sys.version_info[0] == 2 else self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.STRING, 3)
            oprot.writeString(self.endTime.encode('utf-8') if sys.version_info[0] == 2 else self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getNewRecipeListByUserID_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (RecipeInfo, RecipeInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype227, _size224) = iprot.readListBegin()
                    for _i228 in range(_size224):
                        _elem229 = RecipeInfo()
                        _elem229.read(iprot)
                        self.success.append(_elem229)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getNewRecipeListByUserID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter230 in self.success:
                iter230.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getNewRecipeListByDeviceID_args(object):
    """
    Attributes:
     - deviceId
     - startTime
     - endTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'startTime', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'endTime', 'UTF8', None, ),  # 3
    )

    def __init__(self, deviceId=None, startTime=None, endTime=None,):
        self.deviceId = deviceId
        self.startTime = startTime
        self.endTime = endTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.startTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.endTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getNewRecipeListByDeviceID_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.STRING, 2)
            oprot.writeString(self.startTime.encode('utf-8') if sys.version_info[0] == 2 else self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.STRING, 3)
            oprot.writeString(self.endTime.encode('utf-8') if sys.version_info[0] == 2 else self.endTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getNewRecipeListByDeviceID_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (RecipeInfo, RecipeInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype234, _size231) = iprot.readListBegin()
                    for _i235 in range(_size231):
                        _elem236 = RecipeInfo()
                        _elem236.read(iprot)
                        self.success.append(_elem236)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getNewRecipeListByDeviceID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter237 in self.success:
                iter237.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getNewphotoBydeviceID_args(object):
    """
    Attributes:
     - deviceId
     - starTime
     - endtime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'starTime', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'endtime', 'UTF8', None, ),  # 3
    )

    def __init__(self, deviceId=None, starTime=None, endtime=None,):
        self.deviceId = deviceId
        self.starTime = starTime
        self.endtime = endtime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.starTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.endtime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getNewphotoBydeviceID_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.starTime is not None:
            oprot.writeFieldBegin('starTime', TType.STRING, 2)
            oprot.writeString(self.starTime.encode('utf-8') if sys.version_info[0] == 2 else self.starTime)
            oprot.writeFieldEnd()
        if self.endtime is not None:
            oprot.writeFieldBegin('endtime', TType.STRING, 3)
            oprot.writeString(self.endtime.encode('utf-8') if sys.version_info[0] == 2 else self.endtime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getNewphotoBydeviceID_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (PhotoInfo, PhotoInfo.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype241, _size238) = iprot.readListBegin()
                    for _i242 in range(_size238):
                        _elem243 = PhotoInfo()
                        _elem243.read(iprot)
                        self.success.append(_elem243)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getNewphotoBydeviceID_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter244 in self.success:
                iter244.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceCardGetUserPoints_args(object):
    """
    Attributes:
     - userId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    )

    def __init__(self, userId=None,):
        self.userId = userId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceCardGetUserPoints_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceCardGetUserPoints_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.I32, 'success', None, None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceCardGetUserPoints_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceCardGetPointsHistory_args(object):
    """
    Attributes:
     - userId
     - num
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.I32, 'num', None, None, ),  # 2
    )

    def __init__(self, userId=None, num=None,):
        self.userId = userId
        self.num = num

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceCardGetPointsHistory_args')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.num is not None:
            oprot.writeFieldBegin('num', TType.I32, 2)
            oprot.writeI32(self.num)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceCardGetPointsHistory_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (PointRecords, PointRecords.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype248, _size245) = iprot.readListBegin()
                    for _i249 in range(_size245):
                        _elem250 = PointRecords()
                        _elem250.read(iprot)
                        self.success.append(_elem250)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceCardGetPointsHistory_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter251 in self.success:
                iter251.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceCardLoginByCardNum_args(object):
    """
    Attributes:
     - accountInfo
     - cardNo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'accountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'cardNo', 'UTF8', None, ),  # 2
    )

    def __init__(self, accountInfo=None, cardNo=None,):
        self.accountInfo = accountInfo
        self.cardNo = cardNo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.accountInfo = AccountInfo()
                    self.accountInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cardNo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceCardLoginByCardNum_args')
        if self.accountInfo is not None:
            oprot.writeFieldBegin('accountInfo', TType.STRUCT, 1)
            self.accountInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.cardNo is not None:
            oprot.writeFieldBegin('cardNo', TType.STRING, 2)
            oprot.writeString(self.cardNo.encode('utf-8') if sys.version_info[0] == 2 else self.cardNo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceCardLoginByCardNum_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (ServiceCardResult, ServiceCardResult.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ServiceCardResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceCardLoginByCardNum_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceCardLoginByAccount_args(object):
    """
    Attributes:
     - accountInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'accountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 1
    )

    def __init__(self, accountInfo=None,):
        self.accountInfo = accountInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.accountInfo = AccountInfo()
                    self.accountInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceCardLoginByAccount_args')
        if self.accountInfo is not None:
            oprot.writeFieldBegin('accountInfo', TType.STRUCT, 1)
            self.accountInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceCardLoginByAccount_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (ServiceCardResult, ServiceCardResult.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ServiceCardResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceCardLoginByAccount_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BindCardToPerson_args(object):
    """
    Attributes:
     - deviceid
     - cardNo
     - pwd
     - userid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceid', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'cardNo', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'pwd', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'userid', 'UTF8', None, ),  # 4
    )

    def __init__(self, deviceid=None, cardNo=None, pwd=None, userid=None,):
        self.deviceid = deviceid
        self.cardNo = cardNo
        self.pwd = pwd
        self.userid = userid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cardNo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pwd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.userid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('BindCardToPerson_args')
        if self.deviceid is not None:
            oprot.writeFieldBegin('deviceid', TType.STRING, 1)
            oprot.writeString(self.deviceid.encode('utf-8') if sys.version_info[0] == 2 else self.deviceid)
            oprot.writeFieldEnd()
        if self.cardNo is not None:
            oprot.writeFieldBegin('cardNo', TType.STRING, 2)
            oprot.writeString(self.cardNo.encode('utf-8') if sys.version_info[0] == 2 else self.cardNo)
            oprot.writeFieldEnd()
        if self.pwd is not None:
            oprot.writeFieldBegin('pwd', TType.STRING, 3)
            oprot.writeString(self.pwd.encode('utf-8') if sys.version_info[0] == 2 else self.pwd)
            oprot.writeFieldEnd()
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.STRING, 4)
            oprot.writeString(self.userid.encode('utf-8') if sys.version_info[0] == 2 else self.userid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BindCardToPerson_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (ServiceCardResult, ServiceCardResult.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ServiceCardResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('BindCardToPerson_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPurchasedServices_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPurchasedServices_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPurchasedServices_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (PurchasedServices, PurchasedServices.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype255, _size252) = iprot.readListBegin()
                    for _i256 in range(_size252):
                        _elem257 = PurchasedServices()
                        _elem257.read(iprot)
                        self.success.append(_elem257)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPurchasedServices_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter258 in self.success:
                iter258.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPushMessage_args(object):
    """
    Attributes:
     - msgid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'msgid', 'UTF8', None, ),  # 1
    )

    def __init__(self, msgid=None,):
        self.msgid = msgid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.msgid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPushMessage_args')
        if self.msgid is not None:
            oprot.writeFieldBegin('msgid', TType.STRING, 1)
            oprot.writeString(self.msgid.encode('utf-8') if sys.version_info[0] == 2 else self.msgid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPushMessage_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (MessageDetail, MessageDetail.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = MessageDetail()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPushMessage_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthControllerPlan_args(object):
    """
    Attributes:
     - userid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userid', 'UTF8', None, ),  # 1
    )

    def __init__(self, userid=None,):
        self.userid = userid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthControllerPlan_args')
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.STRING, 1)
            oprot.writeString(self.userid.encode('utf-8') if sys.version_info[0] == 2 else self.userid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthControllerPlan_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (HealthControllerPlan, HealthControllerPlan.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype262, _size259) = iprot.readListBegin()
                    for _i263 in range(_size259):
                        _elem264 = HealthControllerPlan()
                        _elem264.read(iprot)
                        self.success.append(_elem264)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthControllerPlan_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter265 in self.success:
                iter265.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthControllerRemindByMember_args(object):
    """
    Attributes:
     - userid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userid', 'UTF8', None, ),  # 1
    )

    def __init__(self, userid=None,):
        self.userid = userid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthControllerRemindByMember_args')
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.STRING, 1)
            oprot.writeString(self.userid.encode('utf-8') if sys.version_info[0] == 2 else self.userid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthControllerRemindByMember_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (HealthControllerRemind, HealthControllerRemind.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = HealthControllerRemind()
                        _elem271.read(iprot)
                        self.success.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthControllerRemindByMember_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter272 in self.success:
                iter272.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthControllerRemindByDeviceId_args(object):
    """
    Attributes:
     - deviceId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceId', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceId=None,):
        self.deviceId = deviceId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthControllerRemindByDeviceId_args')
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 1)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthControllerRemindByDeviceId_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (HealthControllerRemind, HealthControllerRemind.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype276, _size273) = iprot.readListBegin()
                    for _i277 in range(_size273):
                        _elem278 = HealthControllerRemind()
                        _elem278.read(iprot)
                        self.success.append(_elem278)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthControllerRemindByDeviceId_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter279 in self.success:
                iter279.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthControllerRemindByDevice_args(object):
    """
    Attributes:
     - deviceid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'deviceid', 'UTF8', None, ),  # 1
    )

    def __init__(self, deviceid=None,):
        self.deviceid = deviceid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.deviceid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthControllerRemindByDevice_args')
        if self.deviceid is not None:
            oprot.writeFieldBegin('deviceid', TType.STRING, 1)
            oprot.writeString(self.deviceid.encode('utf-8') if sys.version_info[0] == 2 else self.deviceid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getHealthControllerRemindByDevice_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (HealthControllerRemind, HealthControllerRemind.thrift_spec), False), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype283, _size280) = iprot.readListBegin()
                    for _i284 in range(_size280):
                        _elem285 = HealthControllerRemind()
                        _elem285.read(iprot)
                        self.success.append(_elem285)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getHealthControllerRemindByDevice_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter286 in self.success:
                iter286.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendMessageToManager_args(object):
    """
    Attributes:
     - accountInfo
     - deviceid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'accountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 1
        (2, TType.STRING, 'deviceid', 'UTF8', None, ),  # 2
    )

    def __init__(self, accountInfo=None, deviceid=None,):
        self.accountInfo = accountInfo
        self.deviceid = deviceid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.accountInfo = AccountInfo()
                    self.accountInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendMessageToManager_args')
        if self.accountInfo is not None:
            oprot.writeFieldBegin('accountInfo', TType.STRUCT, 1)
            self.accountInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.deviceid is not None:
            oprot.writeFieldBegin('deviceid', TType.STRING, 2)
            oprot.writeString(self.deviceid.encode('utf-8') if sys.version_info[0] == 2 else self.deviceid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class sendMessageToManager_result(object):
    """
    Attributes:
     - ex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, ex=None,):
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('sendMessageToManager_result')
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceLoginByProofNum_args(object):
    """
    Attributes:
     - proofNum
     - deviceid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'proofNum', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'deviceid', 'UTF8', None, ),  # 2
    )

    def __init__(self, proofNum=None, deviceid=None,):
        self.proofNum = proofNum
        self.deviceid = deviceid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.proofNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deviceid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceLoginByProofNum_args')
        if self.proofNum is not None:
            oprot.writeFieldBegin('proofNum', TType.STRING, 1)
            oprot.writeString(self.proofNum.encode('utf-8') if sys.version_info[0] == 2 else self.proofNum)
            oprot.writeFieldEnd()
        if self.deviceid is not None:
            oprot.writeFieldBegin('deviceid', TType.STRING, 2)
            oprot.writeString(self.deviceid.encode('utf-8') if sys.version_info[0] == 2 else self.deviceid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class serviceLoginByProofNum_result(object):
    """
    Attributes:
     - success
     - ex
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (ServiceCardResult, ServiceCardResult.thrift_spec), None, ),  # 0
        (1, TType.STRUCT, 'ex', (XKCommon.ttypes.HealthServiceException, XKCommon.ttypes.HealthServiceException.thrift_spec), None, ),  # 1
    )

    def __init__(self, success=None, ex=None,):
        self.success = success
        self.ex = ex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ServiceCardResult()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.ex = XKCommon.ttypes.HealthServiceException()
                    self.ex.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('serviceLoginByProofNum_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.ex is not None:
            oprot.writeFieldBegin('ex', TType.STRUCT, 1)
            self.ex.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getCallDoctor_args(object):
    """
    Attributes:
     - serviceid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'serviceid', 'UTF8', None, ),  # 1
    )

    def __init__(self, serviceid=None,):
        self.serviceid = serviceid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getCallDoctor_args')
        if self.serviceid is not None:
            oprot.writeFieldBegin('serviceid', TType.STRING, 1)
            oprot.writeString(self.serviceid.encode('utf-8') if sys.version_info[0] == 2 else self.serviceid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getCallDoctor_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getCallDoctor_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class saveInterfaceLog_args(object):
    """
    Attributes:
     - interfaceLog
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'interfaceLog', (InterfaceLog, InterfaceLog.thrift_spec), None, ),  # 1
    )

    def __init__(self, interfaceLog=None,):
        self.interfaceLog = interfaceLog

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.interfaceLog = InterfaceLog()
                    self.interfaceLog.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('saveInterfaceLog_args')
        if self.interfaceLog is not None:
            oprot.writeFieldBegin('interfaceLog', TType.STRUCT, 1)
            self.interfaceLog.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class saveInterfaceLog_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('saveInterfaceLog_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPeripheralConfigureList_args(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPeripheralConfigureList_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getPeripheralConfigureList_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.LIST, 'success', (TType.STRUCT, (PeripheralConfigure, PeripheralConfigure.thrift_spec), False), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype290, _size287) = iprot.readListBegin()
                    for _i291 in range(_size287):
                        _elem292 = PeripheralConfigure()
                        _elem292.read(iprot)
                        self.success.append(_elem292)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getPeripheralConfigureList_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter293 in self.success:
                iter293.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getMemberHealthInfo_args(object):
    """
    Attributes:
     - personPHRCode
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'personPHRCode', 'UTF8', None, ),  # 1
    )

    def __init__(self, personPHRCode=None,):
        self.personPHRCode = personPHRCode

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.personPHRCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getMemberHealthInfo_args')
        if self.personPHRCode is not None:
            oprot.writeFieldBegin('personPHRCode', TType.STRING, 1)
            oprot.writeString(self.personPHRCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPHRCode)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class getMemberHealthInfo_result(object):
    """
    Attributes:
     - success
    """

    thrift_spec = (
        (0, TType.STRUCT, 'success', (YTJ_MemberHealthInfo, YTJ_MemberHealthInfo.thrift_spec), None, ),  # 0
    )

    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = YTJ_MemberHealthInfo()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('getMemberHealthInfo_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateMemeberHealthInfo_args(object):
    """
    Attributes:
     - personPHRCode
     - healthInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'personPHRCode', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'healthInfo', (YTJ_MemberHealthInfo, YTJ_MemberHealthInfo.thrift_spec), None, ),  # 2
    )

    def __init__(self, personPHRCode=None, healthInfo=None,):
        self.personPHRCode = personPHRCode
        self.healthInfo = healthInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.personPHRCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.healthInfo = YTJ_MemberHealthInfo()
                    self.healthInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateMemeberHealthInfo_args')
        if self.personPHRCode is not None:
            oprot.writeFieldBegin('personPHRCode', TType.STRING, 1)
            oprot.writeString(self.personPHRCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPHRCode)
            oprot.writeFieldEnd()
        if self.healthInfo is not None:
            oprot.writeFieldBegin('healthInfo', TType.STRUCT, 2)
            self.healthInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class updateMemeberHealthInfo_result(object):

    thrift_spec = (
    )

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('updateMemeberHealthInfo_result')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
