#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys
import XKCommon.ttypes

from thrift.transport import TTransport


class AccountInfo(object):
    """
    Attributes:
     - userId
     - password
     - nickName
     - fullName
     - registDatetime
     - loginDatetime
     - headPortrait
     - cardID
     - birthday
     - sex
     - email
     - mobileNum
     - watchId
     - isEnable
     - deviceId
     - loginStatus
     - accountName
     - proofNum
     - addrDetail
     - login_token
     - isHost
     - role
     - usersig
     - headPictureUrl
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'nickName', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'fullName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'registDatetime', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'loginDatetime', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'headPortrait', 'BINARY', None, ),  # 7
        (8, TType.STRING, 'cardID', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'birthday', 'UTF8', None, ),  # 9
        (10, TType.I32, 'sex', None, None, ),  # 10
        (11, TType.STRING, 'email', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'mobileNum', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'watchId', 'UTF8', None, ),  # 13
        (14, TType.I32, 'isEnable', None, None, ),  # 14
        (15, TType.STRING, 'deviceId', 'UTF8', None, ),  # 15
        (16, TType.I32, 'loginStatus', None, None, ),  # 16
        (17, TType.STRING, 'accountName', 'UTF8', None, ),  # 17
        (18, TType.STRING, 'proofNum', 'UTF8', None, ),  # 18
        (19, TType.STRING, 'addrDetail', 'UTF8', None, ),  # 19
        (20, TType.STRING, 'login_token', 'UTF8', None, ),  # 20
        (21, TType.STRING, 'isHost', 'UTF8', None, ),  # 21
        (22, TType.STRING, 'role', 'UTF8', None, ),  # 22
        (23, TType.STRING, 'usersig', 'UTF8', None, ),  # 23
        (24, TType.STRING, 'headPictureUrl', 'UTF8', None, ),  # 24
    )

    def __init__(self, userId=None, password=None, nickName=None, fullName=None, registDatetime=None, loginDatetime=None, headPortrait=None, cardID=None, birthday=None, sex=None, email=None, mobileNum=None, watchId=None, isEnable=None, deviceId=None, loginStatus=None, accountName=None, proofNum=None, addrDetail=None, login_token=None, isHost=None, role=None, usersig=None, headPictureUrl=None,):
        self.userId = userId
        self.password = password
        self.nickName = nickName
        self.fullName = fullName
        self.registDatetime = registDatetime
        self.loginDatetime = loginDatetime
        self.headPortrait = headPortrait
        self.cardID = cardID
        self.birthday = birthday
        self.sex = sex
        self.email = email
        self.mobileNum = mobileNum
        self.watchId = watchId
        self.isEnable = isEnable
        self.deviceId = deviceId
        self.loginStatus = loginStatus
        self.accountName = accountName
        self.proofNum = proofNum
        self.addrDetail = addrDetail
        self.login_token = login_token
        self.isHost = isHost
        self.role = role
        self.usersig = usersig
        self.headPictureUrl = headPictureUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.nickName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.fullName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.registDatetime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.loginDatetime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.headPortrait = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.cardID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.birthday = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.sex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.mobileNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.watchId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.isEnable = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.deviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.loginStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.accountName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.proofNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.addrDetail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.login_token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.isHost = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.role = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.usersig = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.headPictureUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccountInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.nickName is not None:
            oprot.writeFieldBegin('nickName', TType.STRING, 3)
            oprot.writeString(self.nickName.encode('utf-8') if sys.version_info[0] == 2 else self.nickName)
            oprot.writeFieldEnd()
        if self.fullName is not None:
            oprot.writeFieldBegin('fullName', TType.STRING, 4)
            oprot.writeString(self.fullName.encode('utf-8') if sys.version_info[0] == 2 else self.fullName)
            oprot.writeFieldEnd()
        if self.registDatetime is not None:
            oprot.writeFieldBegin('registDatetime', TType.STRING, 5)
            oprot.writeString(self.registDatetime.encode('utf-8') if sys.version_info[0] == 2 else self.registDatetime)
            oprot.writeFieldEnd()
        if self.loginDatetime is not None:
            oprot.writeFieldBegin('loginDatetime', TType.STRING, 6)
            oprot.writeString(self.loginDatetime.encode('utf-8') if sys.version_info[0] == 2 else self.loginDatetime)
            oprot.writeFieldEnd()
        if self.headPortrait is not None:
            oprot.writeFieldBegin('headPortrait', TType.STRING, 7)
            oprot.writeBinary(self.headPortrait)
            oprot.writeFieldEnd()
        if self.cardID is not None:
            oprot.writeFieldBegin('cardID', TType.STRING, 8)
            oprot.writeString(self.cardID.encode('utf-8') if sys.version_info[0] == 2 else self.cardID)
            oprot.writeFieldEnd()
        if self.birthday is not None:
            oprot.writeFieldBegin('birthday', TType.STRING, 9)
            oprot.writeString(self.birthday.encode('utf-8') if sys.version_info[0] == 2 else self.birthday)
            oprot.writeFieldEnd()
        if self.sex is not None:
            oprot.writeFieldBegin('sex', TType.I32, 10)
            oprot.writeI32(self.sex)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 11)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.mobileNum is not None:
            oprot.writeFieldBegin('mobileNum', TType.STRING, 12)
            oprot.writeString(self.mobileNum.encode('utf-8') if sys.version_info[0] == 2 else self.mobileNum)
            oprot.writeFieldEnd()
        if self.watchId is not None:
            oprot.writeFieldBegin('watchId', TType.STRING, 13)
            oprot.writeString(self.watchId.encode('utf-8') if sys.version_info[0] == 2 else self.watchId)
            oprot.writeFieldEnd()
        if self.isEnable is not None:
            oprot.writeFieldBegin('isEnable', TType.I32, 14)
            oprot.writeI32(self.isEnable)
            oprot.writeFieldEnd()
        if self.deviceId is not None:
            oprot.writeFieldBegin('deviceId', TType.STRING, 15)
            oprot.writeString(self.deviceId.encode('utf-8') if sys.version_info[0] == 2 else self.deviceId)
            oprot.writeFieldEnd()
        if self.loginStatus is not None:
            oprot.writeFieldBegin('loginStatus', TType.I32, 16)
            oprot.writeI32(self.loginStatus)
            oprot.writeFieldEnd()
        if self.accountName is not None:
            oprot.writeFieldBegin('accountName', TType.STRING, 17)
            oprot.writeString(self.accountName.encode('utf-8') if sys.version_info[0] == 2 else self.accountName)
            oprot.writeFieldEnd()
        if self.proofNum is not None:
            oprot.writeFieldBegin('proofNum', TType.STRING, 18)
            oprot.writeString(self.proofNum.encode('utf-8') if sys.version_info[0] == 2 else self.proofNum)
            oprot.writeFieldEnd()
        if self.addrDetail is not None:
            oprot.writeFieldBegin('addrDetail', TType.STRING, 19)
            oprot.writeString(self.addrDetail.encode('utf-8') if sys.version_info[0] == 2 else self.addrDetail)
            oprot.writeFieldEnd()
        if self.login_token is not None:
            oprot.writeFieldBegin('login_token', TType.STRING, 20)
            oprot.writeString(self.login_token.encode('utf-8') if sys.version_info[0] == 2 else self.login_token)
            oprot.writeFieldEnd()
        if self.isHost is not None:
            oprot.writeFieldBegin('isHost', TType.STRING, 21)
            oprot.writeString(self.isHost.encode('utf-8') if sys.version_info[0] == 2 else self.isHost)
            oprot.writeFieldEnd()
        if self.role is not None:
            oprot.writeFieldBegin('role', TType.STRING, 22)
            oprot.writeString(self.role.encode('utf-8') if sys.version_info[0] == 2 else self.role)
            oprot.writeFieldEnd()
        if self.usersig is not None:
            oprot.writeFieldBegin('usersig', TType.STRING, 23)
            oprot.writeString(self.usersig.encode('utf-8') if sys.version_info[0] == 2 else self.usersig)
            oprot.writeFieldEnd()
        if self.headPictureUrl is not None:
            oprot.writeFieldBegin('headPictureUrl', TType.STRING, 24)
            oprot.writeString(self.headPictureUrl.encode('utf-8') if sys.version_info[0] == 2 else self.headPictureUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PhrHealthClinic(object):
    """
    Attributes:
     - id
     - personPhrCode
     - diseaseCode
     - diseaseName
     - icd10Code
     - onsetDate
     - examineDate
     - orgName
     - doctorName
     - illnessLayerCode
     - illnessLayerName
     - complicationNameStr
     - complicationCodeStr
     - memo
     - prognosisCode
     - prognosisName
     - recoveryDate
     - optTime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'personPhrCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'diseaseCode', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'diseaseName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'icd10Code', 'UTF8', None, ),  # 5
        (6, TType.I64, 'onsetDate', None, None, ),  # 6
        (7, TType.I64, 'examineDate', None, None, ),  # 7
        (8, TType.STRING, 'orgName', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'doctorName', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'illnessLayerCode', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'illnessLayerName', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'complicationNameStr', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'complicationCodeStr', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'memo', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'prognosisCode', 'UTF8', None, ),  # 15
        (16, TType.STRING, 'prognosisName', 'UTF8', None, ),  # 16
        (17, TType.I64, 'recoveryDate', None, None, ),  # 17
        (18, TType.I64, 'optTime', None, None, ),  # 18
    )

    def __init__(self, id=None, personPhrCode=None, diseaseCode=None, diseaseName=None, icd10Code=None, onsetDate=None, examineDate=None, orgName=None, doctorName=None, illnessLayerCode=None, illnessLayerName=None, complicationNameStr=None, complicationCodeStr=None, memo=None, prognosisCode=None, prognosisName=None, recoveryDate=None, optTime=None,):
        self.id = id
        self.personPhrCode = personPhrCode
        self.diseaseCode = diseaseCode
        self.diseaseName = diseaseName
        self.icd10Code = icd10Code
        self.onsetDate = onsetDate
        self.examineDate = examineDate
        self.orgName = orgName
        self.doctorName = doctorName
        self.illnessLayerCode = illnessLayerCode
        self.illnessLayerName = illnessLayerName
        self.complicationNameStr = complicationNameStr
        self.complicationCodeStr = complicationCodeStr
        self.memo = memo
        self.prognosisCode = prognosisCode
        self.prognosisName = prognosisName
        self.recoveryDate = recoveryDate
        self.optTime = optTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.personPhrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.diseaseCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.diseaseName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.icd10Code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.onsetDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.examineDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.orgName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.doctorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.illnessLayerCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.illnessLayerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.complicationNameStr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.complicationCodeStr = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.memo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.prognosisCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.prognosisName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I64:
                    self.recoveryDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I64:
                    self.optTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PhrHealthClinic')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.personPhrCode is not None:
            oprot.writeFieldBegin('personPhrCode', TType.STRING, 2)
            oprot.writeString(self.personPhrCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPhrCode)
            oprot.writeFieldEnd()
        if self.diseaseCode is not None:
            oprot.writeFieldBegin('diseaseCode', TType.STRING, 3)
            oprot.writeString(self.diseaseCode.encode('utf-8') if sys.version_info[0] == 2 else self.diseaseCode)
            oprot.writeFieldEnd()
        if self.diseaseName is not None:
            oprot.writeFieldBegin('diseaseName', TType.STRING, 4)
            oprot.writeString(self.diseaseName.encode('utf-8') if sys.version_info[0] == 2 else self.diseaseName)
            oprot.writeFieldEnd()
        if self.icd10Code is not None:
            oprot.writeFieldBegin('icd10Code', TType.STRING, 5)
            oprot.writeString(self.icd10Code.encode('utf-8') if sys.version_info[0] == 2 else self.icd10Code)
            oprot.writeFieldEnd()
        if self.onsetDate is not None:
            oprot.writeFieldBegin('onsetDate', TType.I64, 6)
            oprot.writeI64(self.onsetDate)
            oprot.writeFieldEnd()
        if self.examineDate is not None:
            oprot.writeFieldBegin('examineDate', TType.I64, 7)
            oprot.writeI64(self.examineDate)
            oprot.writeFieldEnd()
        if self.orgName is not None:
            oprot.writeFieldBegin('orgName', TType.STRING, 8)
            oprot.writeString(self.orgName.encode('utf-8') if sys.version_info[0] == 2 else self.orgName)
            oprot.writeFieldEnd()
        if self.doctorName is not None:
            oprot.writeFieldBegin('doctorName', TType.STRING, 9)
            oprot.writeString(self.doctorName.encode('utf-8') if sys.version_info[0] == 2 else self.doctorName)
            oprot.writeFieldEnd()
        if self.illnessLayerCode is not None:
            oprot.writeFieldBegin('illnessLayerCode', TType.STRING, 10)
            oprot.writeString(self.illnessLayerCode.encode('utf-8') if sys.version_info[0] == 2 else self.illnessLayerCode)
            oprot.writeFieldEnd()
        if self.illnessLayerName is not None:
            oprot.writeFieldBegin('illnessLayerName', TType.STRING, 11)
            oprot.writeString(self.illnessLayerName.encode('utf-8') if sys.version_info[0] == 2 else self.illnessLayerName)
            oprot.writeFieldEnd()
        if self.complicationNameStr is not None:
            oprot.writeFieldBegin('complicationNameStr', TType.STRING, 12)
            oprot.writeString(self.complicationNameStr.encode('utf-8') if sys.version_info[0] == 2 else self.complicationNameStr)
            oprot.writeFieldEnd()
        if self.complicationCodeStr is not None:
            oprot.writeFieldBegin('complicationCodeStr', TType.STRING, 13)
            oprot.writeString(self.complicationCodeStr.encode('utf-8') if sys.version_info[0] == 2 else self.complicationCodeStr)
            oprot.writeFieldEnd()
        if self.memo is not None:
            oprot.writeFieldBegin('memo', TType.STRING, 14)
            oprot.writeString(self.memo.encode('utf-8') if sys.version_info[0] == 2 else self.memo)
            oprot.writeFieldEnd()
        if self.prognosisCode is not None:
            oprot.writeFieldBegin('prognosisCode', TType.STRING, 15)
            oprot.writeString(self.prognosisCode.encode('utf-8') if sys.version_info[0] == 2 else self.prognosisCode)
            oprot.writeFieldEnd()
        if self.prognosisName is not None:
            oprot.writeFieldBegin('prognosisName', TType.STRING, 16)
            oprot.writeString(self.prognosisName.encode('utf-8') if sys.version_info[0] == 2 else self.prognosisName)
            oprot.writeFieldEnd()
        if self.recoveryDate is not None:
            oprot.writeFieldBegin('recoveryDate', TType.I64, 17)
            oprot.writeI64(self.recoveryDate)
            oprot.writeFieldEnd()
        if self.optTime is not None:
            oprot.writeFieldBegin('optTime', TType.I64, 18)
            oprot.writeI64(self.optTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_DiseaseHistory(object):
    """
    Attributes:
     - healthCode
     - phrDiseaseList
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'healthCode', 'UTF8', None, ),  # 1
        (2, TType.LIST, 'phrDiseaseList', (TType.STRUCT, (PhrHealthClinic, PhrHealthClinic.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, healthCode=None, phrDiseaseList=None,):
        self.healthCode = healthCode
        self.phrDiseaseList = phrDiseaseList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.healthCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.phrDiseaseList = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = PhrHealthClinic()
                        _elem5.read(iprot)
                        self.phrDiseaseList.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_DiseaseHistory')
        if self.healthCode is not None:
            oprot.writeFieldBegin('healthCode', TType.STRING, 1)
            oprot.writeString(self.healthCode.encode('utf-8') if sys.version_info[0] == 2 else self.healthCode)
            oprot.writeFieldEnd()
        if self.phrDiseaseList is not None:
            oprot.writeFieldBegin('phrDiseaseList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.phrDiseaseList))
            for iter6 in self.phrDiseaseList:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_FamilyDiseaseHistory(object):
    """
    Attributes:
     - id
     - personPhrCode
     - relativeCode
     - relativeName
     - diseaseCode
     - diseaseName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'personPhrCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'relativeCode', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'relativeName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'diseaseCode', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'diseaseName', 'UTF8', None, ),  # 6
    )

    def __init__(self, id=None, personPhrCode=None, relativeCode=None, relativeName=None, diseaseCode=None, diseaseName=None,):
        self.id = id
        self.personPhrCode = personPhrCode
        self.relativeCode = relativeCode
        self.relativeName = relativeName
        self.diseaseCode = diseaseCode
        self.diseaseName = diseaseName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.personPhrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.relativeCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.relativeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.diseaseCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.diseaseName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_FamilyDiseaseHistory')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.personPhrCode is not None:
            oprot.writeFieldBegin('personPhrCode', TType.STRING, 2)
            oprot.writeString(self.personPhrCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPhrCode)
            oprot.writeFieldEnd()
        if self.relativeCode is not None:
            oprot.writeFieldBegin('relativeCode', TType.STRING, 3)
            oprot.writeString(self.relativeCode.encode('utf-8') if sys.version_info[0] == 2 else self.relativeCode)
            oprot.writeFieldEnd()
        if self.relativeName is not None:
            oprot.writeFieldBegin('relativeName', TType.STRING, 4)
            oprot.writeString(self.relativeName.encode('utf-8') if sys.version_info[0] == 2 else self.relativeName)
            oprot.writeFieldEnd()
        if self.diseaseCode is not None:
            oprot.writeFieldBegin('diseaseCode', TType.STRING, 5)
            oprot.writeString(self.diseaseCode.encode('utf-8') if sys.version_info[0] == 2 else self.diseaseCode)
            oprot.writeFieldEnd()
        if self.diseaseName is not None:
            oprot.writeFieldBegin('diseaseName', TType.STRING, 6)
            oprot.writeString(self.diseaseName.encode('utf-8') if sys.version_info[0] == 2 else self.diseaseName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_HealthClinicBean(object):
    """
    Attributes:
     - id
     - personPhrCode
     - diseaseCode
     - diseaseName
     - icd10Code
     - onsetTime
     - examineTime
     - orgName
     - doctorName
     - illnessLayerCode
     - illnessLayerName
     - memo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'personPhrCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'diseaseCode', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'diseaseName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'icd10Code', 'UTF8', None, ),  # 5
        (6, TType.I64, 'onsetTime', None, None, ),  # 6
        (7, TType.I64, 'examineTime', None, None, ),  # 7
        (8, TType.STRING, 'orgName', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'doctorName', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'illnessLayerCode', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'illnessLayerName', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'memo', 'UTF8', None, ),  # 12
    )

    def __init__(self, id=None, personPhrCode=None, diseaseCode=None, diseaseName=None, icd10Code=None, onsetTime=None, examineTime=None, orgName=None, doctorName=None, illnessLayerCode=None, illnessLayerName=None, memo=None,):
        self.id = id
        self.personPhrCode = personPhrCode
        self.diseaseCode = diseaseCode
        self.diseaseName = diseaseName
        self.icd10Code = icd10Code
        self.onsetTime = onsetTime
        self.examineTime = examineTime
        self.orgName = orgName
        self.doctorName = doctorName
        self.illnessLayerCode = illnessLayerCode
        self.illnessLayerName = illnessLayerName
        self.memo = memo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.personPhrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.diseaseCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.diseaseName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.icd10Code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.onsetTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.examineTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.orgName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.doctorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.illnessLayerCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.illnessLayerName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.memo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_HealthClinicBean')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.personPhrCode is not None:
            oprot.writeFieldBegin('personPhrCode', TType.STRING, 2)
            oprot.writeString(self.personPhrCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPhrCode)
            oprot.writeFieldEnd()
        if self.diseaseCode is not None:
            oprot.writeFieldBegin('diseaseCode', TType.STRING, 3)
            oprot.writeString(self.diseaseCode.encode('utf-8') if sys.version_info[0] == 2 else self.diseaseCode)
            oprot.writeFieldEnd()
        if self.diseaseName is not None:
            oprot.writeFieldBegin('diseaseName', TType.STRING, 4)
            oprot.writeString(self.diseaseName.encode('utf-8') if sys.version_info[0] == 2 else self.diseaseName)
            oprot.writeFieldEnd()
        if self.icd10Code is not None:
            oprot.writeFieldBegin('icd10Code', TType.STRING, 5)
            oprot.writeString(self.icd10Code.encode('utf-8') if sys.version_info[0] == 2 else self.icd10Code)
            oprot.writeFieldEnd()
        if self.onsetTime is not None:
            oprot.writeFieldBegin('onsetTime', TType.I64, 6)
            oprot.writeI64(self.onsetTime)
            oprot.writeFieldEnd()
        if self.examineTime is not None:
            oprot.writeFieldBegin('examineTime', TType.I64, 7)
            oprot.writeI64(self.examineTime)
            oprot.writeFieldEnd()
        if self.orgName is not None:
            oprot.writeFieldBegin('orgName', TType.STRING, 8)
            oprot.writeString(self.orgName.encode('utf-8') if sys.version_info[0] == 2 else self.orgName)
            oprot.writeFieldEnd()
        if self.doctorName is not None:
            oprot.writeFieldBegin('doctorName', TType.STRING, 9)
            oprot.writeString(self.doctorName.encode('utf-8') if sys.version_info[0] == 2 else self.doctorName)
            oprot.writeFieldEnd()
        if self.illnessLayerCode is not None:
            oprot.writeFieldBegin('illnessLayerCode', TType.STRING, 10)
            oprot.writeString(self.illnessLayerCode.encode('utf-8') if sys.version_info[0] == 2 else self.illnessLayerCode)
            oprot.writeFieldEnd()
        if self.illnessLayerName is not None:
            oprot.writeFieldBegin('illnessLayerName', TType.STRING, 11)
            oprot.writeString(self.illnessLayerName.encode('utf-8') if sys.version_info[0] == 2 else self.illnessLayerName)
            oprot.writeFieldEnd()
        if self.memo is not None:
            oprot.writeFieldBegin('memo', TType.STRING, 12)
            oprot.writeString(self.memo.encode('utf-8') if sys.version_info[0] == 2 else self.memo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_PhrRiskFactorsBean(object):
    """
    Attributes:
     - id
     - personPhrCode
     - riskFactorsFactorCode
     - riskFactorsFactorName
     - riskFactorsName
     - riskFactorsJob
     - riskFactorsLength
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'personPhrCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'riskFactorsFactorCode', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'riskFactorsFactorName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'riskFactorsName', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'riskFactorsJob', 'UTF8', None, ),  # 6
        (7, TType.I32, 'riskFactorsLength', None, None, ),  # 7
    )

    def __init__(self, id=None, personPhrCode=None, riskFactorsFactorCode=None, riskFactorsFactorName=None, riskFactorsName=None, riskFactorsJob=None, riskFactorsLength=None,):
        self.id = id
        self.personPhrCode = personPhrCode
        self.riskFactorsFactorCode = riskFactorsFactorCode
        self.riskFactorsFactorName = riskFactorsFactorName
        self.riskFactorsName = riskFactorsName
        self.riskFactorsJob = riskFactorsJob
        self.riskFactorsLength = riskFactorsLength

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.personPhrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.riskFactorsFactorCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.riskFactorsFactorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.riskFactorsName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.riskFactorsJob = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.riskFactorsLength = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_PhrRiskFactorsBean')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.personPhrCode is not None:
            oprot.writeFieldBegin('personPhrCode', TType.STRING, 2)
            oprot.writeString(self.personPhrCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPhrCode)
            oprot.writeFieldEnd()
        if self.riskFactorsFactorCode is not None:
            oprot.writeFieldBegin('riskFactorsFactorCode', TType.STRING, 3)
            oprot.writeString(self.riskFactorsFactorCode.encode('utf-8') if sys.version_info[0] == 2 else self.riskFactorsFactorCode)
            oprot.writeFieldEnd()
        if self.riskFactorsFactorName is not None:
            oprot.writeFieldBegin('riskFactorsFactorName', TType.STRING, 4)
            oprot.writeString(self.riskFactorsFactorName.encode('utf-8') if sys.version_info[0] == 2 else self.riskFactorsFactorName)
            oprot.writeFieldEnd()
        if self.riskFactorsName is not None:
            oprot.writeFieldBegin('riskFactorsName', TType.STRING, 5)
            oprot.writeString(self.riskFactorsName.encode('utf-8') if sys.version_info[0] == 2 else self.riskFactorsName)
            oprot.writeFieldEnd()
        if self.riskFactorsJob is not None:
            oprot.writeFieldBegin('riskFactorsJob', TType.STRING, 6)
            oprot.writeString(self.riskFactorsJob.encode('utf-8') if sys.version_info[0] == 2 else self.riskFactorsJob)
            oprot.writeFieldEnd()
        if self.riskFactorsLength is not None:
            oprot.writeFieldBegin('riskFactorsLength', TType.I32, 7)
            oprot.writeI32(self.riskFactorsLength)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_PhrLifestyle(object):
    """
    Attributes:
     - personPhrCode
     - smokingStateCode
     - smokingStateName
     - smokingRateCode
     - smokingRateName
     - smokingBeginAge
     - tobaccoTypeCode
     - tobaccoTypeName
     - onSmoking
     - smokingEndAge
     - drinkingRateCode
     - drinkingRateName
     - drinkingTypeCode
     - drinkingTypeName
     - drinkingQuantity
     - drinkingStartAge
     - drunkFlag
     - alcoholFlag
     - alcoholAge
     - sportsingRateCode
     - sportsingRateName
     - sportsingTime
     - sportsingYear
     - sportsingType
     - dietingHabitCode
     - dietingHabitName
     - dietingSaltCode
     - dietingSaltName
     - dietingOilCode
     - dietingOilName
     - dietingSugarCode
     - dietingSugarName
     - exposeFlag
     - optTime
     - riskFactorsList
     - sportsingNumber
     - smokingStartTime
     - smokingEndTime
     - abstinenceTime
     - drinkingKind
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'personPhrCode', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'smokingStateCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'smokingStateName', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'smokingRateCode', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'smokingRateName', 'UTF8', None, ),  # 5
        (6, TType.I32, 'smokingBeginAge', None, None, ),  # 6
        (7, TType.STRING, 'tobaccoTypeCode', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'tobaccoTypeName', 'UTF8', None, ),  # 8
        (9, TType.I32, 'onSmoking', None, None, ),  # 9
        (10, TType.I32, 'smokingEndAge', None, None, ),  # 10
        (11, TType.STRING, 'drinkingRateCode', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'drinkingRateName', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'drinkingTypeCode', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'drinkingTypeName', 'UTF8', None, ),  # 14
        (15, TType.I32, 'drinkingQuantity', None, None, ),  # 15
        (16, TType.I32, 'drinkingStartAge', None, None, ),  # 16
        (17, TType.STRING, 'drunkFlag', 'UTF8', None, ),  # 17
        (18, TType.STRING, 'alcoholFlag', 'UTF8', None, ),  # 18
        (19, TType.I32, 'alcoholAge', None, None, ),  # 19
        (20, TType.STRING, 'sportsingRateCode', 'UTF8', None, ),  # 20
        (21, TType.STRING, 'sportsingRateName', 'UTF8', None, ),  # 21
        (22, TType.I32, 'sportsingTime', None, None, ),  # 22
        (23, TType.I32, 'sportsingYear', None, None, ),  # 23
        (24, TType.STRING, 'sportsingType', 'UTF8', None, ),  # 24
        (25, TType.STRING, 'dietingHabitCode', 'UTF8', None, ),  # 25
        (26, TType.STRING, 'dietingHabitName', 'UTF8', None, ),  # 26
        (27, TType.STRING, 'dietingSaltCode', 'UTF8', None, ),  # 27
        (28, TType.STRING, 'dietingSaltName', 'UTF8', None, ),  # 28
        (29, TType.STRING, 'dietingOilCode', 'UTF8', None, ),  # 29
        (30, TType.STRING, 'dietingOilName', 'UTF8', None, ),  # 30
        (31, TType.STRING, 'dietingSugarCode', 'UTF8', None, ),  # 31
        (32, TType.STRING, 'dietingSugarName', 'UTF8', None, ),  # 32
        (33, TType.STRING, 'exposeFlag', 'UTF8', None, ),  # 33
        (34, TType.I64, 'optTime', None, None, ),  # 34
        (35, TType.LIST, 'riskFactorsList', (TType.STRUCT, (YTJ_PhrRiskFactorsBean, YTJ_PhrRiskFactorsBean.thrift_spec), False), None, ),  # 35
        (36, TType.I32, 'sportsingNumber', None, None, ),  # 36
        (37, TType.I64, 'smokingStartTime', None, None, ),  # 37
        (38, TType.I64, 'smokingEndTime', None, None, ),  # 38
        (39, TType.I64, 'abstinenceTime', None, None, ),  # 39
        (40, TType.STRING, 'drinkingKind', 'UTF8', None, ),  # 40
    )

    def __init__(self, personPhrCode=None, smokingStateCode=None, smokingStateName=None, smokingRateCode=None, smokingRateName=None, smokingBeginAge=None, tobaccoTypeCode=None, tobaccoTypeName=None, onSmoking=None, smokingEndAge=None, drinkingRateCode=None, drinkingRateName=None, drinkingTypeCode=None, drinkingTypeName=None, drinkingQuantity=None, drinkingStartAge=None, drunkFlag=None, alcoholFlag=None, alcoholAge=None, sportsingRateCode=None, sportsingRateName=None, sportsingTime=None, sportsingYear=None, sportsingType=None, dietingHabitCode=None, dietingHabitName=None, dietingSaltCode=None, dietingSaltName=None, dietingOilCode=None, dietingOilName=None, dietingSugarCode=None, dietingSugarName=None, exposeFlag=None, optTime=None, riskFactorsList=None, sportsingNumber=None, smokingStartTime=None, smokingEndTime=None, abstinenceTime=None, drinkingKind=None,):
        self.personPhrCode = personPhrCode
        self.smokingStateCode = smokingStateCode
        self.smokingStateName = smokingStateName
        self.smokingRateCode = smokingRateCode
        self.smokingRateName = smokingRateName
        self.smokingBeginAge = smokingBeginAge
        self.tobaccoTypeCode = tobaccoTypeCode
        self.tobaccoTypeName = tobaccoTypeName
        self.onSmoking = onSmoking
        self.smokingEndAge = smokingEndAge
        self.drinkingRateCode = drinkingRateCode
        self.drinkingRateName = drinkingRateName
        self.drinkingTypeCode = drinkingTypeCode
        self.drinkingTypeName = drinkingTypeName
        self.drinkingQuantity = drinkingQuantity
        self.drinkingStartAge = drinkingStartAge
        self.drunkFlag = drunkFlag
        self.alcoholFlag = alcoholFlag
        self.alcoholAge = alcoholAge
        self.sportsingRateCode = sportsingRateCode
        self.sportsingRateName = sportsingRateName
        self.sportsingTime = sportsingTime
        self.sportsingYear = sportsingYear
        self.sportsingType = sportsingType
        self.dietingHabitCode = dietingHabitCode
        self.dietingHabitName = dietingHabitName
        self.dietingSaltCode = dietingSaltCode
        self.dietingSaltName = dietingSaltName
        self.dietingOilCode = dietingOilCode
        self.dietingOilName = dietingOilName
        self.dietingSugarCode = dietingSugarCode
        self.dietingSugarName = dietingSugarName
        self.exposeFlag = exposeFlag
        self.optTime = optTime
        self.riskFactorsList = riskFactorsList
        self.sportsingNumber = sportsingNumber
        self.smokingStartTime = smokingStartTime
        self.smokingEndTime = smokingEndTime
        self.abstinenceTime = abstinenceTime
        self.drinkingKind = drinkingKind

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.personPhrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.smokingStateCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.smokingStateName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.smokingRateCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.smokingRateName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.smokingBeginAge = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.tobaccoTypeCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.tobaccoTypeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.onSmoking = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.smokingEndAge = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.drinkingRateCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.drinkingRateName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.drinkingTypeCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.drinkingTypeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.drinkingQuantity = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.drinkingStartAge = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.drunkFlag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.alcoholFlag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.alcoholAge = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.sportsingRateCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.sportsingRateName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.sportsingTime = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.sportsingYear = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.sportsingType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.dietingHabitCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.dietingHabitName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.dietingSaltCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.dietingSaltName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.dietingOilCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.dietingOilName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.dietingSugarCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.dietingSugarName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.exposeFlag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.I64:
                    self.optTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.LIST:
                    self.riskFactorsList = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = YTJ_PhrRiskFactorsBean()
                        _elem12.read(iprot)
                        self.riskFactorsList.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 36:
                if ftype == TType.I32:
                    self.sportsingNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 37:
                if ftype == TType.I64:
                    self.smokingStartTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 38:
                if ftype == TType.I64:
                    self.smokingEndTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 39:
                if ftype == TType.I64:
                    self.abstinenceTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 40:
                if ftype == TType.STRING:
                    self.drinkingKind = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_PhrLifestyle')
        if self.personPhrCode is not None:
            oprot.writeFieldBegin('personPhrCode', TType.STRING, 1)
            oprot.writeString(self.personPhrCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPhrCode)
            oprot.writeFieldEnd()
        if self.smokingStateCode is not None:
            oprot.writeFieldBegin('smokingStateCode', TType.STRING, 2)
            oprot.writeString(self.smokingStateCode.encode('utf-8') if sys.version_info[0] == 2 else self.smokingStateCode)
            oprot.writeFieldEnd()
        if self.smokingStateName is not None:
            oprot.writeFieldBegin('smokingStateName', TType.STRING, 3)
            oprot.writeString(self.smokingStateName.encode('utf-8') if sys.version_info[0] == 2 else self.smokingStateName)
            oprot.writeFieldEnd()
        if self.smokingRateCode is not None:
            oprot.writeFieldBegin('smokingRateCode', TType.STRING, 4)
            oprot.writeString(self.smokingRateCode.encode('utf-8') if sys.version_info[0] == 2 else self.smokingRateCode)
            oprot.writeFieldEnd()
        if self.smokingRateName is not None:
            oprot.writeFieldBegin('smokingRateName', TType.STRING, 5)
            oprot.writeString(self.smokingRateName.encode('utf-8') if sys.version_info[0] == 2 else self.smokingRateName)
            oprot.writeFieldEnd()
        if self.smokingBeginAge is not None:
            oprot.writeFieldBegin('smokingBeginAge', TType.I32, 6)
            oprot.writeI32(self.smokingBeginAge)
            oprot.writeFieldEnd()
        if self.tobaccoTypeCode is not None:
            oprot.writeFieldBegin('tobaccoTypeCode', TType.STRING, 7)
            oprot.writeString(self.tobaccoTypeCode.encode('utf-8') if sys.version_info[0] == 2 else self.tobaccoTypeCode)
            oprot.writeFieldEnd()
        if self.tobaccoTypeName is not None:
            oprot.writeFieldBegin('tobaccoTypeName', TType.STRING, 8)
            oprot.writeString(self.tobaccoTypeName.encode('utf-8') if sys.version_info[0] == 2 else self.tobaccoTypeName)
            oprot.writeFieldEnd()
        if self.onSmoking is not None:
            oprot.writeFieldBegin('onSmoking', TType.I32, 9)
            oprot.writeI32(self.onSmoking)
            oprot.writeFieldEnd()
        if self.smokingEndAge is not None:
            oprot.writeFieldBegin('smokingEndAge', TType.I32, 10)
            oprot.writeI32(self.smokingEndAge)
            oprot.writeFieldEnd()
        if self.drinkingRateCode is not None:
            oprot.writeFieldBegin('drinkingRateCode', TType.STRING, 11)
            oprot.writeString(self.drinkingRateCode.encode('utf-8') if sys.version_info[0] == 2 else self.drinkingRateCode)
            oprot.writeFieldEnd()
        if self.drinkingRateName is not None:
            oprot.writeFieldBegin('drinkingRateName', TType.STRING, 12)
            oprot.writeString(self.drinkingRateName.encode('utf-8') if sys.version_info[0] == 2 else self.drinkingRateName)
            oprot.writeFieldEnd()
        if self.drinkingTypeCode is not None:
            oprot.writeFieldBegin('drinkingTypeCode', TType.STRING, 13)
            oprot.writeString(self.drinkingTypeCode.encode('utf-8') if sys.version_info[0] == 2 else self.drinkingTypeCode)
            oprot.writeFieldEnd()
        if self.drinkingTypeName is not None:
            oprot.writeFieldBegin('drinkingTypeName', TType.STRING, 14)
            oprot.writeString(self.drinkingTypeName.encode('utf-8') if sys.version_info[0] == 2 else self.drinkingTypeName)
            oprot.writeFieldEnd()
        if self.drinkingQuantity is not None:
            oprot.writeFieldBegin('drinkingQuantity', TType.I32, 15)
            oprot.writeI32(self.drinkingQuantity)
            oprot.writeFieldEnd()
        if self.drinkingStartAge is not None:
            oprot.writeFieldBegin('drinkingStartAge', TType.I32, 16)
            oprot.writeI32(self.drinkingStartAge)
            oprot.writeFieldEnd()
        if self.drunkFlag is not None:
            oprot.writeFieldBegin('drunkFlag', TType.STRING, 17)
            oprot.writeString(self.drunkFlag.encode('utf-8') if sys.version_info[0] == 2 else self.drunkFlag)
            oprot.writeFieldEnd()
        if self.alcoholFlag is not None:
            oprot.writeFieldBegin('alcoholFlag', TType.STRING, 18)
            oprot.writeString(self.alcoholFlag.encode('utf-8') if sys.version_info[0] == 2 else self.alcoholFlag)
            oprot.writeFieldEnd()
        if self.alcoholAge is not None:
            oprot.writeFieldBegin('alcoholAge', TType.I32, 19)
            oprot.writeI32(self.alcoholAge)
            oprot.writeFieldEnd()
        if self.sportsingRateCode is not None:
            oprot.writeFieldBegin('sportsingRateCode', TType.STRING, 20)
            oprot.writeString(self.sportsingRateCode.encode('utf-8') if sys.version_info[0] == 2 else self.sportsingRateCode)
            oprot.writeFieldEnd()
        if self.sportsingRateName is not None:
            oprot.writeFieldBegin('sportsingRateName', TType.STRING, 21)
            oprot.writeString(self.sportsingRateName.encode('utf-8') if sys.version_info[0] == 2 else self.sportsingRateName)
            oprot.writeFieldEnd()
        if self.sportsingTime is not None:
            oprot.writeFieldBegin('sportsingTime', TType.I32, 22)
            oprot.writeI32(self.sportsingTime)
            oprot.writeFieldEnd()
        if self.sportsingYear is not None:
            oprot.writeFieldBegin('sportsingYear', TType.I32, 23)
            oprot.writeI32(self.sportsingYear)
            oprot.writeFieldEnd()
        if self.sportsingType is not None:
            oprot.writeFieldBegin('sportsingType', TType.STRING, 24)
            oprot.writeString(self.sportsingType.encode('utf-8') if sys.version_info[0] == 2 else self.sportsingType)
            oprot.writeFieldEnd()
        if self.dietingHabitCode is not None:
            oprot.writeFieldBegin('dietingHabitCode', TType.STRING, 25)
            oprot.writeString(self.dietingHabitCode.encode('utf-8') if sys.version_info[0] == 2 else self.dietingHabitCode)
            oprot.writeFieldEnd()
        if self.dietingHabitName is not None:
            oprot.writeFieldBegin('dietingHabitName', TType.STRING, 26)
            oprot.writeString(self.dietingHabitName.encode('utf-8') if sys.version_info[0] == 2 else self.dietingHabitName)
            oprot.writeFieldEnd()
        if self.dietingSaltCode is not None:
            oprot.writeFieldBegin('dietingSaltCode', TType.STRING, 27)
            oprot.writeString(self.dietingSaltCode.encode('utf-8') if sys.version_info[0] == 2 else self.dietingSaltCode)
            oprot.writeFieldEnd()
        if self.dietingSaltName is not None:
            oprot.writeFieldBegin('dietingSaltName', TType.STRING, 28)
            oprot.writeString(self.dietingSaltName.encode('utf-8') if sys.version_info[0] == 2 else self.dietingSaltName)
            oprot.writeFieldEnd()
        if self.dietingOilCode is not None:
            oprot.writeFieldBegin('dietingOilCode', TType.STRING, 29)
            oprot.writeString(self.dietingOilCode.encode('utf-8') if sys.version_info[0] == 2 else self.dietingOilCode)
            oprot.writeFieldEnd()
        if self.dietingOilName is not None:
            oprot.writeFieldBegin('dietingOilName', TType.STRING, 30)
            oprot.writeString(self.dietingOilName.encode('utf-8') if sys.version_info[0] == 2 else self.dietingOilName)
            oprot.writeFieldEnd()
        if self.dietingSugarCode is not None:
            oprot.writeFieldBegin('dietingSugarCode', TType.STRING, 31)
            oprot.writeString(self.dietingSugarCode.encode('utf-8') if sys.version_info[0] == 2 else self.dietingSugarCode)
            oprot.writeFieldEnd()
        if self.dietingSugarName is not None:
            oprot.writeFieldBegin('dietingSugarName', TType.STRING, 32)
            oprot.writeString(self.dietingSugarName.encode('utf-8') if sys.version_info[0] == 2 else self.dietingSugarName)
            oprot.writeFieldEnd()
        if self.exposeFlag is not None:
            oprot.writeFieldBegin('exposeFlag', TType.STRING, 33)
            oprot.writeString(self.exposeFlag.encode('utf-8') if sys.version_info[0] == 2 else self.exposeFlag)
            oprot.writeFieldEnd()
        if self.optTime is not None:
            oprot.writeFieldBegin('optTime', TType.I64, 34)
            oprot.writeI64(self.optTime)
            oprot.writeFieldEnd()
        if self.riskFactorsList is not None:
            oprot.writeFieldBegin('riskFactorsList', TType.LIST, 35)
            oprot.writeListBegin(TType.STRUCT, len(self.riskFactorsList))
            for iter13 in self.riskFactorsList:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sportsingNumber is not None:
            oprot.writeFieldBegin('sportsingNumber', TType.I32, 36)
            oprot.writeI32(self.sportsingNumber)
            oprot.writeFieldEnd()
        if self.smokingStartTime is not None:
            oprot.writeFieldBegin('smokingStartTime', TType.I64, 37)
            oprot.writeI64(self.smokingStartTime)
            oprot.writeFieldEnd()
        if self.smokingEndTime is not None:
            oprot.writeFieldBegin('smokingEndTime', TType.I64, 38)
            oprot.writeI64(self.smokingEndTime)
            oprot.writeFieldEnd()
        if self.abstinenceTime is not None:
            oprot.writeFieldBegin('abstinenceTime', TType.I64, 39)
            oprot.writeI64(self.abstinenceTime)
            oprot.writeFieldEnd()
        if self.drinkingKind is not None:
            oprot.writeFieldBegin('drinkingKind', TType.STRING, 40)
            oprot.writeString(self.drinkingKind.encode('utf-8') if sys.version_info[0] == 2 else self.drinkingKind)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_Anamnesis(object):
    """
    Attributes:
     - id
     - personPhrCode
     - anamnesisTypeCode
     - anamnesisTypeName
     - anamnesisName
     - memo
     - anamnesisDate
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'personPhrCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'anamnesisTypeCode', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'anamnesisTypeName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'anamnesisName', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'memo', 'UTF8', None, ),  # 6
        (7, TType.I64, 'anamnesisDate', None, None, ),  # 7
    )

    def __init__(self, id=None, personPhrCode=None, anamnesisTypeCode=None, anamnesisTypeName=None, anamnesisName=None, memo=None, anamnesisDate=None,):
        self.id = id
        self.personPhrCode = personPhrCode
        self.anamnesisTypeCode = anamnesisTypeCode
        self.anamnesisTypeName = anamnesisTypeName
        self.anamnesisName = anamnesisName
        self.memo = memo
        self.anamnesisDate = anamnesisDate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.personPhrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.anamnesisTypeCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.anamnesisTypeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.anamnesisName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.memo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.anamnesisDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_Anamnesis')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.personPhrCode is not None:
            oprot.writeFieldBegin('personPhrCode', TType.STRING, 2)
            oprot.writeString(self.personPhrCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPhrCode)
            oprot.writeFieldEnd()
        if self.anamnesisTypeCode is not None:
            oprot.writeFieldBegin('anamnesisTypeCode', TType.STRING, 3)
            oprot.writeString(self.anamnesisTypeCode.encode('utf-8') if sys.version_info[0] == 2 else self.anamnesisTypeCode)
            oprot.writeFieldEnd()
        if self.anamnesisTypeName is not None:
            oprot.writeFieldBegin('anamnesisTypeName', TType.STRING, 4)
            oprot.writeString(self.anamnesisTypeName.encode('utf-8') if sys.version_info[0] == 2 else self.anamnesisTypeName)
            oprot.writeFieldEnd()
        if self.anamnesisName is not None:
            oprot.writeFieldBegin('anamnesisName', TType.STRING, 5)
            oprot.writeString(self.anamnesisName.encode('utf-8') if sys.version_info[0] == 2 else self.anamnesisName)
            oprot.writeFieldEnd()
        if self.memo is not None:
            oprot.writeFieldBegin('memo', TType.STRING, 6)
            oprot.writeString(self.memo.encode('utf-8') if sys.version_info[0] == 2 else self.memo)
            oprot.writeFieldEnd()
        if self.anamnesisDate is not None:
            oprot.writeFieldBegin('anamnesisDate', TType.I64, 7)
            oprot.writeI64(self.anamnesisDate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_PhrHeredopathiaBean(object):
    """
    Attributes:
     - id
     - personPhrCode
     - diseaseCode
     - diseaseName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'personPhrCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'diseaseCode', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'diseaseName', 'UTF8', None, ),  # 4
    )

    def __init__(self, id=None, personPhrCode=None, diseaseCode=None, diseaseName=None,):
        self.id = id
        self.personPhrCode = personPhrCode
        self.diseaseCode = diseaseCode
        self.diseaseName = diseaseName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.personPhrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.diseaseCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.diseaseName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_PhrHeredopathiaBean')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.personPhrCode is not None:
            oprot.writeFieldBegin('personPhrCode', TType.STRING, 2)
            oprot.writeString(self.personPhrCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPhrCode)
            oprot.writeFieldEnd()
        if self.diseaseCode is not None:
            oprot.writeFieldBegin('diseaseCode', TType.STRING, 3)
            oprot.writeString(self.diseaseCode.encode('utf-8') if sys.version_info[0] == 2 else self.diseaseCode)
            oprot.writeFieldEnd()
        if self.diseaseName is not None:
            oprot.writeFieldBegin('diseaseName', TType.STRING, 4)
            oprot.writeString(self.diseaseName.encode('utf-8') if sys.version_info[0] == 2 else self.diseaseName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_AllergiesRecordBean(object):
    """
    Attributes:
     - allergiesId
     - personPhrCode
     - allergiesCode
     - allergiesName
     - allergiesSymptom
     - allergiesCause
     - foundDate
     - cureDate
     - notes
     - enabledCode
     - enabledName
     - doctorName
     - sourceTypeCode
     - sourceTypeName
     - orgCode
     - orgName
     - optId
     - optName
     - optTime
     - alleriesCategoryCode
     - alleriesCategoryName
     - prognosisCode
     - prognosisName
     - relatedDisease
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'allergiesId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'personPhrCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'allergiesCode', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'allergiesName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'allergiesSymptom', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'allergiesCause', 'UTF8', None, ),  # 6
        (7, TType.I64, 'foundDate', None, None, ),  # 7
        (8, TType.I64, 'cureDate', None, None, ),  # 8
        (9, TType.STRING, 'notes', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'enabledCode', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'enabledName', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'doctorName', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'sourceTypeCode', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'sourceTypeName', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'orgCode', 'UTF8', None, ),  # 15
        (16, TType.STRING, 'orgName', 'UTF8', None, ),  # 16
        (17, TType.STRING, 'optId', 'UTF8', None, ),  # 17
        (18, TType.STRING, 'optName', 'UTF8', None, ),  # 18
        (19, TType.I64, 'optTime', None, None, ),  # 19
        (20, TType.STRING, 'alleriesCategoryCode', 'UTF8', None, ),  # 20
        (21, TType.STRING, 'alleriesCategoryName', 'UTF8', None, ),  # 21
        (22, TType.STRING, 'prognosisCode', 'UTF8', None, ),  # 22
        (23, TType.STRING, 'prognosisName', 'UTF8', None, ),  # 23
        (24, TType.STRING, 'relatedDisease', 'UTF8', None, ),  # 24
    )

    def __init__(self, allergiesId=None, personPhrCode=None, allergiesCode=None, allergiesName=None, allergiesSymptom=None, allergiesCause=None, foundDate=None, cureDate=None, notes=None, enabledCode=None, enabledName=None, doctorName=None, sourceTypeCode=None, sourceTypeName=None, orgCode=None, orgName=None, optId=None, optName=None, optTime=None, alleriesCategoryCode=None, alleriesCategoryName=None, prognosisCode=None, prognosisName=None, relatedDisease=None,):
        self.allergiesId = allergiesId
        self.personPhrCode = personPhrCode
        self.allergiesCode = allergiesCode
        self.allergiesName = allergiesName
        self.allergiesSymptom = allergiesSymptom
        self.allergiesCause = allergiesCause
        self.foundDate = foundDate
        self.cureDate = cureDate
        self.notes = notes
        self.enabledCode = enabledCode
        self.enabledName = enabledName
        self.doctorName = doctorName
        self.sourceTypeCode = sourceTypeCode
        self.sourceTypeName = sourceTypeName
        self.orgCode = orgCode
        self.orgName = orgName
        self.optId = optId
        self.optName = optName
        self.optTime = optTime
        self.alleriesCategoryCode = alleriesCategoryCode
        self.alleriesCategoryName = alleriesCategoryName
        self.prognosisCode = prognosisCode
        self.prognosisName = prognosisName
        self.relatedDisease = relatedDisease

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.allergiesId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.personPhrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.allergiesCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.allergiesName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.allergiesSymptom = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.allergiesCause = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.foundDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.cureDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.notes = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.enabledCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.enabledName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.doctorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.sourceTypeCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.sourceTypeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.orgCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.orgName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.optId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.optName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.optTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.alleriesCategoryCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.alleriesCategoryName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.prognosisCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.prognosisName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.relatedDisease = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_AllergiesRecordBean')
        if self.allergiesId is not None:
            oprot.writeFieldBegin('allergiesId', TType.STRING, 1)
            oprot.writeString(self.allergiesId.encode('utf-8') if sys.version_info[0] == 2 else self.allergiesId)
            oprot.writeFieldEnd()
        if self.personPhrCode is not None:
            oprot.writeFieldBegin('personPhrCode', TType.STRING, 2)
            oprot.writeString(self.personPhrCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPhrCode)
            oprot.writeFieldEnd()
        if self.allergiesCode is not None:
            oprot.writeFieldBegin('allergiesCode', TType.STRING, 3)
            oprot.writeString(self.allergiesCode.encode('utf-8') if sys.version_info[0] == 2 else self.allergiesCode)
            oprot.writeFieldEnd()
        if self.allergiesName is not None:
            oprot.writeFieldBegin('allergiesName', TType.STRING, 4)
            oprot.writeString(self.allergiesName.encode('utf-8') if sys.version_info[0] == 2 else self.allergiesName)
            oprot.writeFieldEnd()
        if self.allergiesSymptom is not None:
            oprot.writeFieldBegin('allergiesSymptom', TType.STRING, 5)
            oprot.writeString(self.allergiesSymptom.encode('utf-8') if sys.version_info[0] == 2 else self.allergiesSymptom)
            oprot.writeFieldEnd()
        if self.allergiesCause is not None:
            oprot.writeFieldBegin('allergiesCause', TType.STRING, 6)
            oprot.writeString(self.allergiesCause.encode('utf-8') if sys.version_info[0] == 2 else self.allergiesCause)
            oprot.writeFieldEnd()
        if self.foundDate is not None:
            oprot.writeFieldBegin('foundDate', TType.I64, 7)
            oprot.writeI64(self.foundDate)
            oprot.writeFieldEnd()
        if self.cureDate is not None:
            oprot.writeFieldBegin('cureDate', TType.I64, 8)
            oprot.writeI64(self.cureDate)
            oprot.writeFieldEnd()
        if self.notes is not None:
            oprot.writeFieldBegin('notes', TType.STRING, 9)
            oprot.writeString(self.notes.encode('utf-8') if sys.version_info[0] == 2 else self.notes)
            oprot.writeFieldEnd()
        if self.enabledCode is not None:
            oprot.writeFieldBegin('enabledCode', TType.STRING, 10)
            oprot.writeString(self.enabledCode.encode('utf-8') if sys.version_info[0] == 2 else self.enabledCode)
            oprot.writeFieldEnd()
        if self.enabledName is not None:
            oprot.writeFieldBegin('enabledName', TType.STRING, 11)
            oprot.writeString(self.enabledName.encode('utf-8') if sys.version_info[0] == 2 else self.enabledName)
            oprot.writeFieldEnd()
        if self.doctorName is not None:
            oprot.writeFieldBegin('doctorName', TType.STRING, 12)
            oprot.writeString(self.doctorName.encode('utf-8') if sys.version_info[0] == 2 else self.doctorName)
            oprot.writeFieldEnd()
        if self.sourceTypeCode is not None:
            oprot.writeFieldBegin('sourceTypeCode', TType.STRING, 13)
            oprot.writeString(self.sourceTypeCode.encode('utf-8') if sys.version_info[0] == 2 else self.sourceTypeCode)
            oprot.writeFieldEnd()
        if self.sourceTypeName is not None:
            oprot.writeFieldBegin('sourceTypeName', TType.STRING, 14)
            oprot.writeString(self.sourceTypeName.encode('utf-8') if sys.version_info[0] == 2 else self.sourceTypeName)
            oprot.writeFieldEnd()
        if self.orgCode is not None:
            oprot.writeFieldBegin('orgCode', TType.STRING, 15)
            oprot.writeString(self.orgCode.encode('utf-8') if sys.version_info[0] == 2 else self.orgCode)
            oprot.writeFieldEnd()
        if self.orgName is not None:
            oprot.writeFieldBegin('orgName', TType.STRING, 16)
            oprot.writeString(self.orgName.encode('utf-8') if sys.version_info[0] == 2 else self.orgName)
            oprot.writeFieldEnd()
        if self.optId is not None:
            oprot.writeFieldBegin('optId', TType.STRING, 17)
            oprot.writeString(self.optId.encode('utf-8') if sys.version_info[0] == 2 else self.optId)
            oprot.writeFieldEnd()
        if self.optName is not None:
            oprot.writeFieldBegin('optName', TType.STRING, 18)
            oprot.writeString(self.optName.encode('utf-8') if sys.version_info[0] == 2 else self.optName)
            oprot.writeFieldEnd()
        if self.optTime is not None:
            oprot.writeFieldBegin('optTime', TType.I64, 19)
            oprot.writeI64(self.optTime)
            oprot.writeFieldEnd()
        if self.alleriesCategoryCode is not None:
            oprot.writeFieldBegin('alleriesCategoryCode', TType.STRING, 20)
            oprot.writeString(self.alleriesCategoryCode.encode('utf-8') if sys.version_info[0] == 2 else self.alleriesCategoryCode)
            oprot.writeFieldEnd()
        if self.alleriesCategoryName is not None:
            oprot.writeFieldBegin('alleriesCategoryName', TType.STRING, 21)
            oprot.writeString(self.alleriesCategoryName.encode('utf-8') if sys.version_info[0] == 2 else self.alleriesCategoryName)
            oprot.writeFieldEnd()
        if self.prognosisCode is not None:
            oprot.writeFieldBegin('prognosisCode', TType.STRING, 22)
            oprot.writeString(self.prognosisCode.encode('utf-8') if sys.version_info[0] == 2 else self.prognosisCode)
            oprot.writeFieldEnd()
        if self.prognosisName is not None:
            oprot.writeFieldBegin('prognosisName', TType.STRING, 23)
            oprot.writeString(self.prognosisName.encode('utf-8') if sys.version_info[0] == 2 else self.prognosisName)
            oprot.writeFieldEnd()
        if self.relatedDisease is not None:
            oprot.writeFieldBegin('relatedDisease', TType.STRING, 24)
            oprot.writeString(self.relatedDisease.encode('utf-8') if sys.version_info[0] == 2 else self.relatedDisease)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_MedicationRecordHistoryBean(object):
    """
    Attributes:
     - id
     - personPhrCode
     - medicineCode
     - medicineName
     - functionTypeCode
     - funcationTypeName
     - medicineFormulationCode
     - medicineFormulationName
     - medicineRates
     - dosageUnits
     - dose
     - totalDose
     - useMethodCode
     - medicineBeginDate
     - medicineStopDate
     - doctorName
     - notes
     - sourceTypeCode
     - sourceTypeName
     - orgCode
     - orgName
     - optId
     - optName
     - optTime
     - useComplianceName
     - useComplianceCode
     - useMethodName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'personPhrCode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'medicineCode', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'medicineName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'functionTypeCode', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'funcationTypeName', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'medicineFormulationCode', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'medicineFormulationName', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'medicineRates', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'dosageUnits', 'UTF8', None, ),  # 10
        (11, TType.DOUBLE, 'dose', None, None, ),  # 11
        (12, TType.DOUBLE, 'totalDose', None, None, ),  # 12
        (13, TType.STRING, 'useMethodCode', 'UTF8', None, ),  # 13
        (14, TType.I64, 'medicineBeginDate', None, None, ),  # 14
        (15, TType.I64, 'medicineStopDate', None, None, ),  # 15
        (16, TType.STRING, 'doctorName', 'UTF8', None, ),  # 16
        (17, TType.STRING, 'notes', 'UTF8', None, ),  # 17
        (18, TType.STRING, 'sourceTypeCode', 'UTF8', None, ),  # 18
        (19, TType.STRING, 'sourceTypeName', 'UTF8', None, ),  # 19
        (20, TType.STRING, 'orgCode', 'UTF8', None, ),  # 20
        (21, TType.STRING, 'orgName', 'UTF8', None, ),  # 21
        (22, TType.STRING, 'optId', 'UTF8', None, ),  # 22
        (23, TType.STRING, 'optName', 'UTF8', None, ),  # 23
        (24, TType.I64, 'optTime', None, None, ),  # 24
        (25, TType.STRING, 'useComplianceName', 'UTF8', None, ),  # 25
        (26, TType.STRING, 'useComplianceCode', 'UTF8', None, ),  # 26
        (27, TType.STRING, 'useMethodName', 'UTF8', None, ),  # 27
    )

    def __init__(self, id=None, personPhrCode=None, medicineCode=None, medicineName=None, functionTypeCode=None, funcationTypeName=None, medicineFormulationCode=None, medicineFormulationName=None, medicineRates=None, dosageUnits=None, dose=None, totalDose=None, useMethodCode=None, medicineBeginDate=None, medicineStopDate=None, doctorName=None, notes=None, sourceTypeCode=None, sourceTypeName=None, orgCode=None, orgName=None, optId=None, optName=None, optTime=None, useComplianceName=None, useComplianceCode=None, useMethodName=None,):
        self.id = id
        self.personPhrCode = personPhrCode
        self.medicineCode = medicineCode
        self.medicineName = medicineName
        self.functionTypeCode = functionTypeCode
        self.funcationTypeName = funcationTypeName
        self.medicineFormulationCode = medicineFormulationCode
        self.medicineFormulationName = medicineFormulationName
        self.medicineRates = medicineRates
        self.dosageUnits = dosageUnits
        self.dose = dose
        self.totalDose = totalDose
        self.useMethodCode = useMethodCode
        self.medicineBeginDate = medicineBeginDate
        self.medicineStopDate = medicineStopDate
        self.doctorName = doctorName
        self.notes = notes
        self.sourceTypeCode = sourceTypeCode
        self.sourceTypeName = sourceTypeName
        self.orgCode = orgCode
        self.orgName = orgName
        self.optId = optId
        self.optName = optName
        self.optTime = optTime
        self.useComplianceName = useComplianceName
        self.useComplianceCode = useComplianceCode
        self.useMethodName = useMethodName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.personPhrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.medicineCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.medicineName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.functionTypeCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.funcationTypeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.medicineFormulationCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.medicineFormulationName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.medicineRates = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.dosageUnits = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.DOUBLE:
                    self.dose = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.DOUBLE:
                    self.totalDose = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.useMethodCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I64:
                    self.medicineBeginDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.medicineStopDate = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.doctorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.notes = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.sourceTypeCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.sourceTypeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.orgCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.orgName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.optId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.STRING:
                    self.optName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.I64:
                    self.optTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.useComplianceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.useComplianceCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.useMethodName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_MedicationRecordHistoryBean')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.personPhrCode is not None:
            oprot.writeFieldBegin('personPhrCode', TType.STRING, 2)
            oprot.writeString(self.personPhrCode.encode('utf-8') if sys.version_info[0] == 2 else self.personPhrCode)
            oprot.writeFieldEnd()
        if self.medicineCode is not None:
            oprot.writeFieldBegin('medicineCode', TType.STRING, 3)
            oprot.writeString(self.medicineCode.encode('utf-8') if sys.version_info[0] == 2 else self.medicineCode)
            oprot.writeFieldEnd()
        if self.medicineName is not None:
            oprot.writeFieldBegin('medicineName', TType.STRING, 4)
            oprot.writeString(self.medicineName.encode('utf-8') if sys.version_info[0] == 2 else self.medicineName)
            oprot.writeFieldEnd()
        if self.functionTypeCode is not None:
            oprot.writeFieldBegin('functionTypeCode', TType.STRING, 5)
            oprot.writeString(self.functionTypeCode.encode('utf-8') if sys.version_info[0] == 2 else self.functionTypeCode)
            oprot.writeFieldEnd()
        if self.funcationTypeName is not None:
            oprot.writeFieldBegin('funcationTypeName', TType.STRING, 6)
            oprot.writeString(self.funcationTypeName.encode('utf-8') if sys.version_info[0] == 2 else self.funcationTypeName)
            oprot.writeFieldEnd()
        if self.medicineFormulationCode is not None:
            oprot.writeFieldBegin('medicineFormulationCode', TType.STRING, 7)
            oprot.writeString(self.medicineFormulationCode.encode('utf-8') if sys.version_info[0] == 2 else self.medicineFormulationCode)
            oprot.writeFieldEnd()
        if self.medicineFormulationName is not None:
            oprot.writeFieldBegin('medicineFormulationName', TType.STRING, 8)
            oprot.writeString(self.medicineFormulationName.encode('utf-8') if sys.version_info[0] == 2 else self.medicineFormulationName)
            oprot.writeFieldEnd()
        if self.medicineRates is not None:
            oprot.writeFieldBegin('medicineRates', TType.STRING, 9)
            oprot.writeString(self.medicineRates.encode('utf-8') if sys.version_info[0] == 2 else self.medicineRates)
            oprot.writeFieldEnd()
        if self.dosageUnits is not None:
            oprot.writeFieldBegin('dosageUnits', TType.STRING, 10)
            oprot.writeString(self.dosageUnits.encode('utf-8') if sys.version_info[0] == 2 else self.dosageUnits)
            oprot.writeFieldEnd()
        if self.dose is not None:
            oprot.writeFieldBegin('dose', TType.DOUBLE, 11)
            oprot.writeDouble(self.dose)
            oprot.writeFieldEnd()
        if self.totalDose is not None:
            oprot.writeFieldBegin('totalDose', TType.DOUBLE, 12)
            oprot.writeDouble(self.totalDose)
            oprot.writeFieldEnd()
        if self.useMethodCode is not None:
            oprot.writeFieldBegin('useMethodCode', TType.STRING, 13)
            oprot.writeString(self.useMethodCode.encode('utf-8') if sys.version_info[0] == 2 else self.useMethodCode)
            oprot.writeFieldEnd()
        if self.medicineBeginDate is not None:
            oprot.writeFieldBegin('medicineBeginDate', TType.I64, 14)
            oprot.writeI64(self.medicineBeginDate)
            oprot.writeFieldEnd()
        if self.medicineStopDate is not None:
            oprot.writeFieldBegin('medicineStopDate', TType.I64, 15)
            oprot.writeI64(self.medicineStopDate)
            oprot.writeFieldEnd()
        if self.doctorName is not None:
            oprot.writeFieldBegin('doctorName', TType.STRING, 16)
            oprot.writeString(self.doctorName.encode('utf-8') if sys.version_info[0] == 2 else self.doctorName)
            oprot.writeFieldEnd()
        if self.notes is not None:
            oprot.writeFieldBegin('notes', TType.STRING, 17)
            oprot.writeString(self.notes.encode('utf-8') if sys.version_info[0] == 2 else self.notes)
            oprot.writeFieldEnd()
        if self.sourceTypeCode is not None:
            oprot.writeFieldBegin('sourceTypeCode', TType.STRING, 18)
            oprot.writeString(self.sourceTypeCode.encode('utf-8') if sys.version_info[0] == 2 else self.sourceTypeCode)
            oprot.writeFieldEnd()
        if self.sourceTypeName is not None:
            oprot.writeFieldBegin('sourceTypeName', TType.STRING, 19)
            oprot.writeString(self.sourceTypeName.encode('utf-8') if sys.version_info[0] == 2 else self.sourceTypeName)
            oprot.writeFieldEnd()
        if self.orgCode is not None:
            oprot.writeFieldBegin('orgCode', TType.STRING, 20)
            oprot.writeString(self.orgCode.encode('utf-8') if sys.version_info[0] == 2 else self.orgCode)
            oprot.writeFieldEnd()
        if self.orgName is not None:
            oprot.writeFieldBegin('orgName', TType.STRING, 21)
            oprot.writeString(self.orgName.encode('utf-8') if sys.version_info[0] == 2 else self.orgName)
            oprot.writeFieldEnd()
        if self.optId is not None:
            oprot.writeFieldBegin('optId', TType.STRING, 22)
            oprot.writeString(self.optId.encode('utf-8') if sys.version_info[0] == 2 else self.optId)
            oprot.writeFieldEnd()
        if self.optName is not None:
            oprot.writeFieldBegin('optName', TType.STRING, 23)
            oprot.writeString(self.optName.encode('utf-8') if sys.version_info[0] == 2 else self.optName)
            oprot.writeFieldEnd()
        if self.optTime is not None:
            oprot.writeFieldBegin('optTime', TType.I64, 24)
            oprot.writeI64(self.optTime)
            oprot.writeFieldEnd()
        if self.useComplianceName is not None:
            oprot.writeFieldBegin('useComplianceName', TType.STRING, 25)
            oprot.writeString(self.useComplianceName.encode('utf-8') if sys.version_info[0] == 2 else self.useComplianceName)
            oprot.writeFieldEnd()
        if self.useComplianceCode is not None:
            oprot.writeFieldBegin('useComplianceCode', TType.STRING, 26)
            oprot.writeString(self.useComplianceCode.encode('utf-8') if sys.version_info[0] == 2 else self.useComplianceCode)
            oprot.writeFieldEnd()
        if self.useMethodName is not None:
            oprot.writeFieldBegin('useMethodName', TType.STRING, 27)
            oprot.writeString(self.useMethodName.encode('utf-8') if sys.version_info[0] == 2 else self.useMethodName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class YTJ_MemberHealthInfo(object):
    """
    Attributes:
     - userId
     - nickName
     - cardID
     - birthday
     - sex
     - mobileNum
     - bloodCode
     - maritalStatus
     - familyDiseaseHistoryList
     - diseaseHistory
     - anamnesisInfoList
     - medicationRecordHistory
     - phrLifestyle
     - height
     - weight
     - AllergiesRecordList
     - phrHeredopathiaList
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'nickName', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'cardID', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'birthday', 'UTF8', None, ),  # 4
        (5, TType.I32, 'sex', None, None, ),  # 5
        (6, TType.STRING, 'mobileNum', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'bloodCode', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'maritalStatus', 'UTF8', None, ),  # 8
        (9, TType.LIST, 'familyDiseaseHistoryList', (TType.STRUCT, (YTJ_FamilyDiseaseHistory, YTJ_FamilyDiseaseHistory.thrift_spec), False), None, ),  # 9
        (10, TType.STRUCT, 'diseaseHistory', (YTJ_DiseaseHistory, YTJ_DiseaseHistory.thrift_spec), None, ),  # 10
        (11, TType.LIST, 'anamnesisInfoList', (TType.STRUCT, (YTJ_Anamnesis, YTJ_Anamnesis.thrift_spec), False), None, ),  # 11
        (12, TType.STRUCT, 'medicationRecordHistory', (YTJ_MedicationRecordHistoryBean, YTJ_MedicationRecordHistoryBean.thrift_spec), None, ),  # 12
        (13, TType.STRUCT, 'phrLifestyle', (YTJ_PhrLifestyle, YTJ_PhrLifestyle.thrift_spec), None, ),  # 13
        (14, TType.DOUBLE, 'height', None, None, ),  # 14
        (15, TType.DOUBLE, 'weight', None, None, ),  # 15
        (16, TType.LIST, 'AllergiesRecordList', (TType.STRUCT, (YTJ_AllergiesRecordBean, YTJ_AllergiesRecordBean.thrift_spec), False), None, ),  # 16
        (17, TType.LIST, 'phrHeredopathiaList', (TType.STRUCT, (YTJ_PhrHeredopathiaBean, YTJ_PhrHeredopathiaBean.thrift_spec), False), None, ),  # 17
    )

    def __init__(self, userId=None, nickName=None, cardID=None, birthday=None, sex=None, mobileNum=None, bloodCode=None, maritalStatus=None, familyDiseaseHistoryList=None, diseaseHistory=None, anamnesisInfoList=None, medicationRecordHistory=None, phrLifestyle=None, height=None, weight=None, AllergiesRecordList=None, phrHeredopathiaList=None,):
        self.userId = userId
        self.nickName = nickName
        self.cardID = cardID
        self.birthday = birthday
        self.sex = sex
        self.mobileNum = mobileNum
        self.bloodCode = bloodCode
        self.maritalStatus = maritalStatus
        self.familyDiseaseHistoryList = familyDiseaseHistoryList
        self.diseaseHistory = diseaseHistory
        self.anamnesisInfoList = anamnesisInfoList
        self.medicationRecordHistory = medicationRecordHistory
        self.phrLifestyle = phrLifestyle
        self.height = height
        self.weight = weight
        self.AllergiesRecordList = AllergiesRecordList
        self.phrHeredopathiaList = phrHeredopathiaList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nickName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cardID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.birthday = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.sex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.mobileNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.bloodCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.maritalStatus = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.familyDiseaseHistoryList = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = YTJ_FamilyDiseaseHistory()
                        _elem19.read(iprot)
                        self.familyDiseaseHistoryList.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.diseaseHistory = YTJ_DiseaseHistory()
                    self.diseaseHistory.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.anamnesisInfoList = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = YTJ_Anamnesis()
                        _elem25.read(iprot)
                        self.anamnesisInfoList.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.medicationRecordHistory = YTJ_MedicationRecordHistoryBean()
                    self.medicationRecordHistory.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.phrLifestyle = YTJ_PhrLifestyle()
                    self.phrLifestyle.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.DOUBLE:
                    self.height = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.AllergiesRecordList = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = YTJ_AllergiesRecordBean()
                        _elem31.read(iprot)
                        self.AllergiesRecordList.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.LIST:
                    self.phrHeredopathiaList = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = YTJ_PhrHeredopathiaBean()
                        _elem37.read(iprot)
                        self.phrHeredopathiaList.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('YTJ_MemberHealthInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.nickName is not None:
            oprot.writeFieldBegin('nickName', TType.STRING, 2)
            oprot.writeString(self.nickName.encode('utf-8') if sys.version_info[0] == 2 else self.nickName)
            oprot.writeFieldEnd()
        if self.cardID is not None:
            oprot.writeFieldBegin('cardID', TType.STRING, 3)
            oprot.writeString(self.cardID.encode('utf-8') if sys.version_info[0] == 2 else self.cardID)
            oprot.writeFieldEnd()
        if self.birthday is not None:
            oprot.writeFieldBegin('birthday', TType.STRING, 4)
            oprot.writeString(self.birthday.encode('utf-8') if sys.version_info[0] == 2 else self.birthday)
            oprot.writeFieldEnd()
        if self.sex is not None:
            oprot.writeFieldBegin('sex', TType.I32, 5)
            oprot.writeI32(self.sex)
            oprot.writeFieldEnd()
        if self.mobileNum is not None:
            oprot.writeFieldBegin('mobileNum', TType.STRING, 6)
            oprot.writeString(self.mobileNum.encode('utf-8') if sys.version_info[0] == 2 else self.mobileNum)
            oprot.writeFieldEnd()
        if self.bloodCode is not None:
            oprot.writeFieldBegin('bloodCode', TType.STRING, 7)
            oprot.writeString(self.bloodCode.encode('utf-8') if sys.version_info[0] == 2 else self.bloodCode)
            oprot.writeFieldEnd()
        if self.maritalStatus is not None:
            oprot.writeFieldBegin('maritalStatus', TType.STRING, 8)
            oprot.writeString(self.maritalStatus.encode('utf-8') if sys.version_info[0] == 2 else self.maritalStatus)
            oprot.writeFieldEnd()
        if self.familyDiseaseHistoryList is not None:
            oprot.writeFieldBegin('familyDiseaseHistoryList', TType.LIST, 9)
            oprot.writeListBegin(TType.STRUCT, len(self.familyDiseaseHistoryList))
            for iter38 in self.familyDiseaseHistoryList:
                iter38.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.diseaseHistory is not None:
            oprot.writeFieldBegin('diseaseHistory', TType.STRUCT, 10)
            self.diseaseHistory.write(oprot)
            oprot.writeFieldEnd()
        if self.anamnesisInfoList is not None:
            oprot.writeFieldBegin('anamnesisInfoList', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.anamnesisInfoList))
            for iter39 in self.anamnesisInfoList:
                iter39.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.medicationRecordHistory is not None:
            oprot.writeFieldBegin('medicationRecordHistory', TType.STRUCT, 12)
            self.medicationRecordHistory.write(oprot)
            oprot.writeFieldEnd()
        if self.phrLifestyle is not None:
            oprot.writeFieldBegin('phrLifestyle', TType.STRUCT, 13)
            self.phrLifestyle.write(oprot)
            oprot.writeFieldEnd()
        if self.height is not None:
            oprot.writeFieldBegin('height', TType.DOUBLE, 14)
            oprot.writeDouble(self.height)
            oprot.writeFieldEnd()
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 15)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        if self.AllergiesRecordList is not None:
            oprot.writeFieldBegin('AllergiesRecordList', TType.LIST, 16)
            oprot.writeListBegin(TType.STRUCT, len(self.AllergiesRecordList))
            for iter40 in self.AllergiesRecordList:
                iter40.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.phrHeredopathiaList is not None:
            oprot.writeFieldBegin('phrHeredopathiaList', TType.LIST, 17)
            oprot.writeListBegin(TType.STRUCT, len(self.phrHeredopathiaList))
            for iter41 in self.phrHeredopathiaList:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceCardInfo(object):
    """
    Attributes:
     - cardNo
     - beginTime
     - endTime
     - status
     - haveDays
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'cardNo', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'beginTime', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'endTime', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'status', 'UTF8', None, ),  # 4
        (5, TType.I32, 'haveDays', None, None, ),  # 5
    )

    def __init__(self, cardNo=None, beginTime=None, endTime=None, status=None, haveDays=None,):
        self.cardNo = cardNo
        self.beginTime = beginTime
        self.endTime = endTime
        self.status = status
        self.haveDays = haveDays

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cardNo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.beginTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.endTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.haveDays = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServiceCardInfo')
        if self.cardNo is not None:
            oprot.writeFieldBegin('cardNo', TType.STRING, 1)
            oprot.writeString(self.cardNo.encode('utf-8') if sys.version_info[0] == 2 else self.cardNo)
            oprot.writeFieldEnd()
        if self.beginTime is not None:
            oprot.writeFieldBegin('beginTime', TType.STRING, 2)
            oprot.writeString(self.beginTime.encode('utf-8') if sys.version_info[0] == 2 else self.beginTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.STRING, 3)
            oprot.writeString(self.endTime.encode('utf-8') if sys.version_info[0] == 2 else self.endTime)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 4)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.haveDays is not None:
            oprot.writeFieldBegin('haveDays', TType.I32, 5)
            oprot.writeI32(self.haveDays)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceCardResult(object):
    """
    Attributes:
     - accountInfo
     - serviceCardInfo
     - userPoints
     - hostAccountInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'accountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'serviceCardInfo', (ServiceCardInfo, ServiceCardInfo.thrift_spec), None, ),  # 2
        (3, TType.I32, 'userPoints', None, None, ),  # 3
        (4, TType.STRUCT, 'hostAccountInfo', (AccountInfo, AccountInfo.thrift_spec), None, ),  # 4
    )

    def __init__(self, accountInfo=None, serviceCardInfo=None, userPoints=None, hostAccountInfo=None,):
        self.accountInfo = accountInfo
        self.serviceCardInfo = serviceCardInfo
        self.userPoints = userPoints
        self.hostAccountInfo = hostAccountInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.accountInfo = AccountInfo()
                    self.accountInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.serviceCardInfo = ServiceCardInfo()
                    self.serviceCardInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.userPoints = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.hostAccountInfo = AccountInfo()
                    self.hostAccountInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServiceCardResult')
        if self.accountInfo is not None:
            oprot.writeFieldBegin('accountInfo', TType.STRUCT, 1)
            self.accountInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.serviceCardInfo is not None:
            oprot.writeFieldBegin('serviceCardInfo', TType.STRUCT, 2)
            self.serviceCardInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.userPoints is not None:
            oprot.writeFieldBegin('userPoints', TType.I32, 3)
            oprot.writeI32(self.userPoints)
            oprot.writeFieldEnd()
        if self.hostAccountInfo is not None:
            oprot.writeFieldBegin('hostAccountInfo', TType.STRUCT, 4)
            self.hostAccountInfo.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MemberInfo(object):
    """
    Attributes:
     - userId
     - nickName
     - healdPortrait
     - cardID
     - birthday
     - sex
     - email
     - mobileNum
     - watchId
     - isEnable
     - userSelfId
     - isAgree
     - registDatetime
     - loginDatetime
     - password
     - headPictureUrl
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'nickName', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'healdPortrait', 'BINARY', None, ),  # 3
        (4, TType.STRING, 'cardID', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'birthday', 'UTF8', None, ),  # 5
        (6, TType.I32, 'sex', None, None, ),  # 6
        (7, TType.STRING, 'email', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'mobileNum', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'watchId', 'UTF8', None, ),  # 9
        (10, TType.I32, 'isEnable', None, None, ),  # 10
        (11, TType.STRING, 'userSelfId', 'UTF8', None, ),  # 11
        (12, TType.I32, 'isAgree', None, None, ),  # 12
        (13, TType.STRING, 'registDatetime', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'loginDatetime', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'password', 'UTF8', None, ),  # 15
        (16, TType.STRING, 'headPictureUrl', 'UTF8', None, ),  # 16
    )

    def __init__(self, userId=None, nickName=None, healdPortrait=None, cardID=None, birthday=None, sex=None, email=None, mobileNum=None, watchId=None, isEnable=None, userSelfId=None, isAgree=None, registDatetime=None, loginDatetime=None, password=None, headPictureUrl=None,):
        self.userId = userId
        self.nickName = nickName
        self.healdPortrait = healdPortrait
        self.cardID = cardID
        self.birthday = birthday
        self.sex = sex
        self.email = email
        self.mobileNum = mobileNum
        self.watchId = watchId
        self.isEnable = isEnable
        self.userSelfId = userSelfId
        self.isAgree = isAgree
        self.registDatetime = registDatetime
        self.loginDatetime = loginDatetime
        self.password = password
        self.headPictureUrl = headPictureUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nickName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.healdPortrait = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cardID = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.birthday = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.sex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.mobileNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.watchId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.isEnable = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.userSelfId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.isAgree = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.registDatetime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.loginDatetime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.headPictureUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MemberInfo')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.nickName is not None:
            oprot.writeFieldBegin('nickName', TType.STRING, 2)
            oprot.writeString(self.nickName.encode('utf-8') if sys.version_info[0] == 2 else self.nickName)
            oprot.writeFieldEnd()
        if self.healdPortrait is not None:
            oprot.writeFieldBegin('healdPortrait', TType.STRING, 3)
            oprot.writeBinary(self.healdPortrait)
            oprot.writeFieldEnd()
        if self.cardID is not None:
            oprot.writeFieldBegin('cardID', TType.STRING, 4)
            oprot.writeString(self.cardID.encode('utf-8') if sys.version_info[0] == 2 else self.cardID)
            oprot.writeFieldEnd()
        if self.birthday is not None:
            oprot.writeFieldBegin('birthday', TType.STRING, 5)
            oprot.writeString(self.birthday.encode('utf-8') if sys.version_info[0] == 2 else self.birthday)
            oprot.writeFieldEnd()
        if self.sex is not None:
            oprot.writeFieldBegin('sex', TType.I32, 6)
            oprot.writeI32(self.sex)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 7)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.mobileNum is not None:
            oprot.writeFieldBegin('mobileNum', TType.STRING, 8)
            oprot.writeString(self.mobileNum.encode('utf-8') if sys.version_info[0] == 2 else self.mobileNum)
            oprot.writeFieldEnd()
        if self.watchId is not None:
            oprot.writeFieldBegin('watchId', TType.STRING, 9)
            oprot.writeString(self.watchId.encode('utf-8') if sys.version_info[0] == 2 else self.watchId)
            oprot.writeFieldEnd()
        if self.isEnable is not None:
            oprot.writeFieldBegin('isEnable', TType.I32, 10)
            oprot.writeI32(self.isEnable)
            oprot.writeFieldEnd()
        if self.userSelfId is not None:
            oprot.writeFieldBegin('userSelfId', TType.STRING, 11)
            oprot.writeString(self.userSelfId.encode('utf-8') if sys.version_info[0] == 2 else self.userSelfId)
            oprot.writeFieldEnd()
        if self.isAgree is not None:
            oprot.writeFieldBegin('isAgree', TType.I32, 12)
            oprot.writeI32(self.isAgree)
            oprot.writeFieldEnd()
        if self.registDatetime is not None:
            oprot.writeFieldBegin('registDatetime', TType.STRING, 13)
            oprot.writeString(self.registDatetime.encode('utf-8') if sys.version_info[0] == 2 else self.registDatetime)
            oprot.writeFieldEnd()
        if self.loginDatetime is not None:
            oprot.writeFieldBegin('loginDatetime', TType.STRING, 14)
            oprot.writeString(self.loginDatetime.encode('utf-8') if sys.version_info[0] == 2 else self.loginDatetime)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 15)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.headPictureUrl is not None:
            oprot.writeFieldBegin('headPictureUrl', TType.STRING, 16)
            oprot.writeString(self.headPictureUrl.encode('utf-8') if sys.version_info[0] == 2 else self.headPictureUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CaregiverInfo(object):
    """
    Attributes:
     - employeeCode
     - employeeName
     - birthday
     - genderCode
     - genderName
     - nationCode
     - nationName
     - photoCode
     - phoneNum
     - mobileNum
     - emailNum
     - addrDetail
     - postalNum
     - titleCode
     - titleName
     - graduateSchool
     - educationalDegree
     - educationalDegreeName
     - maritalStatusCode
     - maritalStatusName
     - addrCantonalCode
     - addrCantonalName
     - proofCode
     - proofName
     - proofNum
     - resume
     - linkmanName
     - linkmanPhoneNum
     - preservation
     - preservation1
     - preservation2
     - preservation3
     - preservation4
     - headPortrait
     - headPictureUrl
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'employeeCode', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'employeeName', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'birthday', 'UTF8', None, ),  # 3
        (4, TType.I32, 'genderCode', None, None, ),  # 4
        (5, TType.STRING, 'genderName', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'nationCode', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'nationName', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'photoCode', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'phoneNum', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'mobileNum', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'emailNum', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'addrDetail', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'postalNum', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'titleCode', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'titleName', 'UTF8', None, ),  # 15
        (16, TType.STRING, 'graduateSchool', 'UTF8', None, ),  # 16
        (17, TType.I32, 'educationalDegree', None, None, ),  # 17
        (18, TType.STRING, 'educationalDegreeName', 'UTF8', None, ),  # 18
        (19, TType.I32, 'maritalStatusCode', None, None, ),  # 19
        (20, TType.STRING, 'maritalStatusName', 'UTF8', None, ),  # 20
        (21, TType.I32, 'addrCantonalCode', None, None, ),  # 21
        (22, TType.STRING, 'addrCantonalName', 'UTF8', None, ),  # 22
        (23, TType.I32, 'proofCode', None, None, ),  # 23
        (24, TType.STRING, 'proofName', 'UTF8', None, ),  # 24
        (25, TType.STRING, 'proofNum', 'UTF8', None, ),  # 25
        (26, TType.STRING, 'resume', 'UTF8', None, ),  # 26
        (27, TType.STRING, 'linkmanName', 'UTF8', None, ),  # 27
        (28, TType.STRING, 'linkmanPhoneNum', 'UTF8', None, ),  # 28
        (29, TType.STRING, 'preservation', 'UTF8', None, ),  # 29
        (30, TType.STRING, 'preservation1', 'UTF8', None, ),  # 30
        (31, TType.STRING, 'preservation2', 'UTF8', None, ),  # 31
        (32, TType.STRING, 'preservation3', 'UTF8', None, ),  # 32
        (33, TType.STRING, 'preservation4', 'UTF8', None, ),  # 33
        (34, TType.STRING, 'headPortrait', 'BINARY', None, ),  # 34
        (35, TType.STRING, 'headPictureUrl', 'UTF8', None, ),  # 35
    )

    def __init__(self, employeeCode=None, employeeName=None, birthday=None, genderCode=None, genderName=None, nationCode=None, nationName=None, photoCode=None, phoneNum=None, mobileNum=None, emailNum=None, addrDetail=None, postalNum=None, titleCode=None, titleName=None, graduateSchool=None, educationalDegree=None, educationalDegreeName=None, maritalStatusCode=None, maritalStatusName=None, addrCantonalCode=None, addrCantonalName=None, proofCode=None, proofName=None, proofNum=None, resume=None, linkmanName=None, linkmanPhoneNum=None, preservation=None, preservation1=None, preservation2=None, preservation3=None, preservation4=None, headPortrait=None, headPictureUrl=None,):
        self.employeeCode = employeeCode
        self.employeeName = employeeName
        self.birthday = birthday
        self.genderCode = genderCode
        self.genderName = genderName
        self.nationCode = nationCode
        self.nationName = nationName
        self.photoCode = photoCode
        self.phoneNum = phoneNum
        self.mobileNum = mobileNum
        self.emailNum = emailNum
        self.addrDetail = addrDetail
        self.postalNum = postalNum
        self.titleCode = titleCode
        self.titleName = titleName
        self.graduateSchool = graduateSchool
        self.educationalDegree = educationalDegree
        self.educationalDegreeName = educationalDegreeName
        self.maritalStatusCode = maritalStatusCode
        self.maritalStatusName = maritalStatusName
        self.addrCantonalCode = addrCantonalCode
        self.addrCantonalName = addrCantonalName
        self.proofCode = proofCode
        self.proofName = proofName
        self.proofNum = proofNum
        self.resume = resume
        self.linkmanName = linkmanName
        self.linkmanPhoneNum = linkmanPhoneNum
        self.preservation = preservation
        self.preservation1 = preservation1
        self.preservation2 = preservation2
        self.preservation3 = preservation3
        self.preservation4 = preservation4
        self.headPortrait = headPortrait
        self.headPictureUrl = headPictureUrl

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.employeeCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.employeeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.birthday = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.genderCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.genderName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.nationCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.nationName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.photoCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.phoneNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.mobileNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.emailNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.addrDetail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.postalNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.titleCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.titleName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.graduateSchool = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.educationalDegree = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.educationalDegreeName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I32:
                    self.maritalStatusCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.maritalStatusName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.I32:
                    self.addrCantonalCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.STRING:
                    self.addrCantonalName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 23:
                if ftype == TType.I32:
                    self.proofCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 24:
                if ftype == TType.STRING:
                    self.proofName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 25:
                if ftype == TType.STRING:
                    self.proofNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 26:
                if ftype == TType.STRING:
                    self.resume = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 27:
                if ftype == TType.STRING:
                    self.linkmanName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 28:
                if ftype == TType.STRING:
                    self.linkmanPhoneNum = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 29:
                if ftype == TType.STRING:
                    self.preservation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 30:
                if ftype == TType.STRING:
                    self.preservation1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 31:
                if ftype == TType.STRING:
                    self.preservation2 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 32:
                if ftype == TType.STRING:
                    self.preservation3 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 33:
                if ftype == TType.STRING:
                    self.preservation4 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 34:
                if ftype == TType.STRING:
                    self.headPortrait = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 35:
                if ftype == TType.STRING:
                    self.headPictureUrl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CaregiverInfo')
        if self.employeeCode is not None:
            oprot.writeFieldBegin('employeeCode', TType.STRING, 1)
            oprot.writeString(self.employeeCode.encode('utf-8') if sys.version_info[0] == 2 else self.employeeCode)
            oprot.writeFieldEnd()
        if self.employeeName is not None:
            oprot.writeFieldBegin('employeeName', TType.STRING, 2)
            oprot.writeString(self.employeeName.encode('utf-8') if sys.version_info[0] == 2 else self.employeeName)
            oprot.writeFieldEnd()
        if self.birthday is not None:
            oprot.writeFieldBegin('birthday', TType.STRING, 3)
            oprot.writeString(self.birthday.encode('utf-8') if sys.version_info[0] == 2 else self.birthday)
            oprot.writeFieldEnd()
        if self.genderCode is not None:
            oprot.writeFieldBegin('genderCode', TType.I32, 4)
            oprot.writeI32(self.genderCode)
            oprot.writeFieldEnd()
        if self.genderName is not None:
            oprot.writeFieldBegin('genderName', TType.STRING, 5)
            oprot.writeString(self.genderName.encode('utf-8') if sys.version_info[0] == 2 else self.genderName)
            oprot.writeFieldEnd()
        if self.nationCode is not None:
            oprot.writeFieldBegin('nationCode', TType.STRING, 6)
            oprot.writeString(self.nationCode.encode('utf-8') if sys.version_info[0] == 2 else self.nationCode)
            oprot.writeFieldEnd()
        if self.nationName is not None:
            oprot.writeFieldBegin('nationName', TType.STRING, 7)
            oprot.writeString(self.nationName.encode('utf-8') if sys.version_info[0] == 2 else self.nationName)
            oprot.writeFieldEnd()
        if self.photoCode is not None:
            oprot.writeFieldBegin('photoCode', TType.STRING, 8)
            oprot.writeString(self.photoCode.encode('utf-8') if sys.version_info[0] == 2 else self.photoCode)
            oprot.writeFieldEnd()
        if self.phoneNum is not None:
            oprot.writeFieldBegin('phoneNum', TType.STRING, 9)
            oprot.writeString(self.phoneNum.encode('utf-8') if sys.version_info[0] == 2 else self.phoneNum)
            oprot.writeFieldEnd()
        if self.mobileNum is not None:
            oprot.writeFieldBegin('mobileNum', TType.STRING, 10)
            oprot.writeString(self.mobileNum.encode('utf-8') if sys.version_info[0] == 2 else self.mobileNum)
            oprot.writeFieldEnd()
        if self.emailNum is not None:
            oprot.writeFieldBegin('emailNum', TType.STRING, 11)
            oprot.writeString(self.emailNum.encode('utf-8') if sys.version_info[0] == 2 else self.emailNum)
            oprot.writeFieldEnd()
        if self.addrDetail is not None:
            oprot.writeFieldBegin('addrDetail', TType.STRING, 12)
            oprot.writeString(self.addrDetail.encode('utf-8') if sys.version_info[0] == 2 else self.addrDetail)
            oprot.writeFieldEnd()
        if self.postalNum is not None:
            oprot.writeFieldBegin('postalNum', TType.STRING, 13)
            oprot.writeString(self.postalNum.encode('utf-8') if sys.version_info[0] == 2 else self.postalNum)
            oprot.writeFieldEnd()
        if self.titleCode is not None:
            oprot.writeFieldBegin('titleCode', TType.STRING, 14)
            oprot.writeString(self.titleCode.encode('utf-8') if sys.version_info[0] == 2 else self.titleCode)
            oprot.writeFieldEnd()
        if self.titleName is not None:
            oprot.writeFieldBegin('titleName', TType.STRING, 15)
            oprot.writeString(self.titleName.encode('utf-8') if sys.version_info[0] == 2 else self.titleName)
            oprot.writeFieldEnd()
        if self.graduateSchool is not None:
            oprot.writeFieldBegin('graduateSchool', TType.STRING, 16)
            oprot.writeString(self.graduateSchool.encode('utf-8') if sys.version_info[0] == 2 else self.graduateSchool)
            oprot.writeFieldEnd()
        if self.educationalDegree is not None:
            oprot.writeFieldBegin('educationalDegree', TType.I32, 17)
            oprot.writeI32(self.educationalDegree)
            oprot.writeFieldEnd()
        if self.educationalDegreeName is not None:
            oprot.writeFieldBegin('educationalDegreeName', TType.STRING, 18)
            oprot.writeString(self.educationalDegreeName.encode('utf-8') if sys.version_info[0] == 2 else self.educationalDegreeName)
            oprot.writeFieldEnd()
        if self.maritalStatusCode is not None:
            oprot.writeFieldBegin('maritalStatusCode', TType.I32, 19)
            oprot.writeI32(self.maritalStatusCode)
            oprot.writeFieldEnd()
        if self.maritalStatusName is not None:
            oprot.writeFieldBegin('maritalStatusName', TType.STRING, 20)
            oprot.writeString(self.maritalStatusName.encode('utf-8') if sys.version_info[0] == 2 else self.maritalStatusName)
            oprot.writeFieldEnd()
        if self.addrCantonalCode is not None:
            oprot.writeFieldBegin('addrCantonalCode', TType.I32, 21)
            oprot.writeI32(self.addrCantonalCode)
            oprot.writeFieldEnd()
        if self.addrCantonalName is not None:
            oprot.writeFieldBegin('addrCantonalName', TType.STRING, 22)
            oprot.writeString(self.addrCantonalName.encode('utf-8') if sys.version_info[0] == 2 else self.addrCantonalName)
            oprot.writeFieldEnd()
        if self.proofCode is not None:
            oprot.writeFieldBegin('proofCode', TType.I32, 23)
            oprot.writeI32(self.proofCode)
            oprot.writeFieldEnd()
        if self.proofName is not None:
            oprot.writeFieldBegin('proofName', TType.STRING, 24)
            oprot.writeString(self.proofName.encode('utf-8') if sys.version_info[0] == 2 else self.proofName)
            oprot.writeFieldEnd()
        if self.proofNum is not None:
            oprot.writeFieldBegin('proofNum', TType.STRING, 25)
            oprot.writeString(self.proofNum.encode('utf-8') if sys.version_info[0] == 2 else self.proofNum)
            oprot.writeFieldEnd()
        if self.resume is not None:
            oprot.writeFieldBegin('resume', TType.STRING, 26)
            oprot.writeString(self.resume.encode('utf-8') if sys.version_info[0] == 2 else self.resume)
            oprot.writeFieldEnd()
        if self.linkmanName is not None:
            oprot.writeFieldBegin('linkmanName', TType.STRING, 27)
            oprot.writeString(self.linkmanName.encode('utf-8') if sys.version_info[0] == 2 else self.linkmanName)
            oprot.writeFieldEnd()
        if self.linkmanPhoneNum is not None:
            oprot.writeFieldBegin('linkmanPhoneNum', TType.STRING, 28)
            oprot.writeString(self.linkmanPhoneNum.encode('utf-8') if sys.version_info[0] == 2 else self.linkmanPhoneNum)
            oprot.writeFieldEnd()
        if self.preservation is not None:
            oprot.writeFieldBegin('preservation', TType.STRING, 29)
            oprot.writeString(self.preservation.encode('utf-8') if sys.version_info[0] == 2 else self.preservation)
            oprot.writeFieldEnd()
        if self.preservation1 is not None:
            oprot.writeFieldBegin('preservation1', TType.STRING, 30)
            oprot.writeString(self.preservation1.encode('utf-8') if sys.version_info[0] == 2 else self.preservation1)
            oprot.writeFieldEnd()
        if self.preservation2 is not None:
            oprot.writeFieldBegin('preservation2', TType.STRING, 31)
            oprot.writeString(self.preservation2.encode('utf-8') if sys.version_info[0] == 2 else self.preservation2)
            oprot.writeFieldEnd()
        if self.preservation3 is not None:
            oprot.writeFieldBegin('preservation3', TType.STRING, 32)
            oprot.writeString(self.preservation3.encode('utf-8') if sys.version_info[0] == 2 else self.preservation3)
            oprot.writeFieldEnd()
        if self.preservation4 is not None:
            oprot.writeFieldBegin('preservation4', TType.STRING, 33)
            oprot.writeString(self.preservation4.encode('utf-8') if sys.version_info[0] == 2 else self.preservation4)
            oprot.writeFieldEnd()
        if self.headPortrait is not None:
            oprot.writeFieldBegin('headPortrait', TType.STRING, 34)
            oprot.writeBinary(self.headPortrait)
            oprot.writeFieldEnd()
        if self.headPictureUrl is not None:
            oprot.writeFieldBegin('headPictureUrl', TType.STRING, 35)
            oprot.writeString(self.headPictureUrl.encode('utf-8') if sys.version_info[0] == 2 else self.headPictureUrl)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FamilyInfo(object):
    """
    Attributes:
     - familyId
     - familyName
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'familyId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'familyName', 'UTF8', None, ),  # 2
    )

    def __init__(self, familyId=None, familyName=None,):
        self.familyId = familyId
        self.familyName = familyName

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.familyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.familyName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FamilyInfo')
        if self.familyId is not None:
            oprot.writeFieldBegin('familyId', TType.STRING, 1)
            oprot.writeString(self.familyId.encode('utf-8') if sys.version_info[0] == 2 else self.familyId)
            oprot.writeFieldEnd()
        if self.familyName is not None:
            oprot.writeFieldBegin('familyName', TType.STRING, 2)
            oprot.writeString(self.familyName.encode('utf-8') if sys.version_info[0] == 2 else self.familyName)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MemberDoctorRelation(object):
    """
    Attributes:
     - userId
     - doctors
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
        (2, TType.LIST, 'doctors', (TType.STRUCT, (CaregiverInfo, CaregiverInfo.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, userId=None, doctors=None,):
        self.userId = userId
        self.doctors = doctors

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.doctors = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = CaregiverInfo()
                        _elem47.read(iprot)
                        self.doctors.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MemberDoctorRelation')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.doctors is not None:
            oprot.writeFieldBegin('doctors', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.doctors))
            for iter48 in self.doctors:
                iter48.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RecipeInfo(object):
    """
    Attributes:
     - setUserId
     - toUserId
     - times
     - content
     - crequency
     - setPersonName
     - toPersonName
     - id
     - updatetime
     - isdel
     - msg_type
     - video_url
     - video_name
     - video_length
     - startday
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'setUserId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'toUserId', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'times', (TType.STRING, 'UTF8', False), None, ),  # 3
        (4, TType.STRING, 'content', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'crequency', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'setPersonName', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'toPersonName', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'id', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'updatetime', 'UTF8', None, ),  # 9
        (10, TType.I32, 'isdel', None, None, ),  # 10
        (11, TType.STRING, 'msg_type', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'video_url', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'video_name', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'video_length', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'startday', 'UTF8', None, ),  # 15
    )

    def __init__(self, setUserId=None, toUserId=None, times=None, content=None, crequency=None, setPersonName=None, toPersonName=None, id=None, updatetime=None, isdel=None, msg_type=None, video_url=None, video_name=None, video_length=None, startday=None,):
        self.setUserId = setUserId
        self.toUserId = toUserId
        self.times = times
        self.content = content
        self.crequency = crequency
        self.setPersonName = setPersonName
        self.toPersonName = toPersonName
        self.id = id
        self.updatetime = updatetime
        self.isdel = isdel
        self.msg_type = msg_type
        self.video_url = video_url
        self.video_name = video_name
        self.video_length = video_length
        self.startday = startday

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.setUserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.toUserId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.times = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.times.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.crequency = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.setPersonName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.toPersonName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.updatetime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.isdel = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.msg_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.video_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.video_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.video_length = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.startday = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RecipeInfo')
        if self.setUserId is not None:
            oprot.writeFieldBegin('setUserId', TType.STRING, 1)
            oprot.writeString(self.setUserId.encode('utf-8') if sys.version_info[0] == 2 else self.setUserId)
            oprot.writeFieldEnd()
        if self.toUserId is not None:
            oprot.writeFieldBegin('toUserId', TType.STRING, 2)
            oprot.writeString(self.toUserId.encode('utf-8') if sys.version_info[0] == 2 else self.toUserId)
            oprot.writeFieldEnd()
        if self.times is not None:
            oprot.writeFieldBegin('times', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.times))
            for iter55 in self.times:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 4)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.crequency is not None:
            oprot.writeFieldBegin('crequency', TType.STRING, 5)
            oprot.writeString(self.crequency.encode('utf-8') if sys.version_info[0] == 2 else self.crequency)
            oprot.writeFieldEnd()
        if self.setPersonName is not None:
            oprot.writeFieldBegin('setPersonName', TType.STRING, 6)
            oprot.writeString(self.setPersonName.encode('utf-8') if sys.version_info[0] == 2 else self.setPersonName)
            oprot.writeFieldEnd()
        if self.toPersonName is not None:
            oprot.writeFieldBegin('toPersonName', TType.STRING, 7)
            oprot.writeString(self.toPersonName.encode('utf-8') if sys.version_info[0] == 2 else self.toPersonName)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 8)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.updatetime is not None:
            oprot.writeFieldBegin('updatetime', TType.STRING, 9)
            oprot.writeString(self.updatetime.encode('utf-8') if sys.version_info[0] == 2 else self.updatetime)
            oprot.writeFieldEnd()
        if self.isdel is not None:
            oprot.writeFieldBegin('isdel', TType.I32, 10)
            oprot.writeI32(self.isdel)
            oprot.writeFieldEnd()
        if self.msg_type is not None:
            oprot.writeFieldBegin('msg_type', TType.STRING, 11)
            oprot.writeString(self.msg_type.encode('utf-8') if sys.version_info[0] == 2 else self.msg_type)
            oprot.writeFieldEnd()
        if self.video_url is not None:
            oprot.writeFieldBegin('video_url', TType.STRING, 12)
            oprot.writeString(self.video_url.encode('utf-8') if sys.version_info[0] == 2 else self.video_url)
            oprot.writeFieldEnd()
        if self.video_name is not None:
            oprot.writeFieldBegin('video_name', TType.STRING, 13)
            oprot.writeString(self.video_name.encode('utf-8') if sys.version_info[0] == 2 else self.video_name)
            oprot.writeFieldEnd()
        if self.video_length is not None:
            oprot.writeFieldBegin('video_length', TType.STRING, 14)
            oprot.writeString(self.video_length.encode('utf-8') if sys.version_info[0] == 2 else self.video_length)
            oprot.writeFieldEnd()
        if self.startday is not None:
            oprot.writeFieldBegin('startday', TType.STRING, 15)
            oprot.writeString(self.startday.encode('utf-8') if sys.version_info[0] == 2 else self.startday)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PhotoInfo(object):
    """
    Attributes:
     - sharePerson
     - photourl
     - sharetime
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'sharePerson', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'photourl', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'sharetime', 'UTF8', None, ),  # 3
    )

    def __init__(self, sharePerson=None, photourl=None, sharetime=None,):
        self.sharePerson = sharePerson
        self.photourl = photourl
        self.sharetime = sharetime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sharePerson = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.photourl = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sharetime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PhotoInfo')
        if self.sharePerson is not None:
            oprot.writeFieldBegin('sharePerson', TType.STRING, 1)
            oprot.writeString(self.sharePerson.encode('utf-8') if sys.version_info[0] == 2 else self.sharePerson)
            oprot.writeFieldEnd()
        if self.photourl is not None:
            oprot.writeFieldBegin('photourl', TType.STRING, 2)
            oprot.writeString(self.photourl.encode('utf-8') if sys.version_info[0] == 2 else self.photourl)
            oprot.writeFieldEnd()
        if self.sharetime is not None:
            oprot.writeFieldBegin('sharetime', TType.STRING, 3)
            oprot.writeString(self.sharetime.encode('utf-8') if sys.version_info[0] == 2 else self.sharetime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessageInfo(object):
    """
    Attributes:
     - fromPerson
     - toPerson
     - messageTime
     - messageType
     - messageContent
     - serviceid
     - deviceid
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'fromPerson', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'toPerson', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'messageTime', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'messageType', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'messageContent', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'serviceid', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'deviceid', 'UTF8', None, ),  # 7
    )

    def __init__(self, fromPerson=None, toPerson=None, messageTime=None, messageType=None, messageContent=None, serviceid=None, deviceid=None,):
        self.fromPerson = fromPerson
        self.toPerson = toPerson
        self.messageTime = messageTime
        self.messageType = messageType
        self.messageContent = messageContent
        self.serviceid = serviceid
        self.deviceid = deviceid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fromPerson = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.toPerson = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.messageTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.messageType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.messageContent = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.serviceid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.deviceid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MessageInfo')
        if self.fromPerson is not None:
            oprot.writeFieldBegin('fromPerson', TType.STRING, 1)
            oprot.writeString(self.fromPerson.encode('utf-8') if sys.version_info[0] == 2 else self.fromPerson)
            oprot.writeFieldEnd()
        if self.toPerson is not None:
            oprot.writeFieldBegin('toPerson', TType.STRING, 2)
            oprot.writeString(self.toPerson.encode('utf-8') if sys.version_info[0] == 2 else self.toPerson)
            oprot.writeFieldEnd()
        if self.messageTime is not None:
            oprot.writeFieldBegin('messageTime', TType.STRING, 3)
            oprot.writeString(self.messageTime.encode('utf-8') if sys.version_info[0] == 2 else self.messageTime)
            oprot.writeFieldEnd()
        if self.messageType is not None:
            oprot.writeFieldBegin('messageType', TType.STRING, 4)
            oprot.writeString(self.messageType.encode('utf-8') if sys.version_info[0] == 2 else self.messageType)
            oprot.writeFieldEnd()
        if self.messageContent is not None:
            oprot.writeFieldBegin('messageContent', TType.STRING, 5)
            oprot.writeString(self.messageContent.encode('utf-8') if sys.version_info[0] == 2 else self.messageContent)
            oprot.writeFieldEnd()
        if self.serviceid is not None:
            oprot.writeFieldBegin('serviceid', TType.STRING, 6)
            oprot.writeString(self.serviceid.encode('utf-8') if sys.version_info[0] == 2 else self.serviceid)
            oprot.writeFieldEnd()
        if self.deviceid is not None:
            oprot.writeFieldBegin('deviceid', TType.STRING, 7)
            oprot.writeString(self.deviceid.encode('utf-8') if sys.version_info[0] == 2 else self.deviceid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class OutsideInfo(object):
    """
    Attributes:
     - macAddress
     - type
     - id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'macAddress', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'id', 'UTF8', None, ),  # 3
    )

    def __init__(self, macAddress=None, type=None, id=None,):
        self.macAddress = macAddress
        self.type = type
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.macAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('OutsideInfo')
        if self.macAddress is not None:
            oprot.writeFieldBegin('macAddress', TType.STRING, 1)
            oprot.writeString(self.macAddress.encode('utf-8') if sys.version_info[0] == 2 else self.macAddress)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 3)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServicesInfo(object):
    """
    Attributes:
     - id
     - service_name
     - service_desc
     - service_type
     - start_service_num
     - price
     - pattern
     - yitiji_desc_url
     - service_connect_way
     - service_connect_tel
     - banner_yitiji
     - banner_yitiji_not_open
     - banner_yitiji_button_color
     - banner_yitiji_open
     - preservation
     - preservation1
     - allowManyDoctor
     - service_sort
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'service_name', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'service_desc', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'service_type', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'start_service_num', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'price', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'pattern', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'yitiji_desc_url', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'service_connect_way', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'service_connect_tel', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'banner_yitiji', 'BINARY', None, ),  # 11
        (12, TType.STRING, 'banner_yitiji_not_open', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'banner_yitiji_button_color', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'banner_yitiji_open', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'preservation', 'UTF8', None, ),  # 15
        (16, TType.STRING, 'preservation1', 'UTF8', None, ),  # 16
        (17, TType.I32, 'allowManyDoctor', None, None, ),  # 17
        (18, TType.I32, 'service_sort', None, None, ),  # 18
    )

    def __init__(self, id=None, service_name=None, service_desc=None, service_type=None, start_service_num=None, price=None, pattern=None, yitiji_desc_url=None, service_connect_way=None, service_connect_tel=None, banner_yitiji=None, banner_yitiji_not_open=None, banner_yitiji_button_color=None, banner_yitiji_open=None, preservation=None, preservation1=None, allowManyDoctor=None, service_sort=None,):
        self.id = id
        self.service_name = service_name
        self.service_desc = service_desc
        self.service_type = service_type
        self.start_service_num = start_service_num
        self.price = price
        self.pattern = pattern
        self.yitiji_desc_url = yitiji_desc_url
        self.service_connect_way = service_connect_way
        self.service_connect_tel = service_connect_tel
        self.banner_yitiji = banner_yitiji
        self.banner_yitiji_not_open = banner_yitiji_not_open
        self.banner_yitiji_button_color = banner_yitiji_button_color
        self.banner_yitiji_open = banner_yitiji_open
        self.preservation = preservation
        self.preservation1 = preservation1
        self.allowManyDoctor = allowManyDoctor
        self.service_sort = service_sort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.service_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.service_desc = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.start_service_num = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.price = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.pattern = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.yitiji_desc_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.service_connect_way = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.service_connect_tel = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.banner_yitiji = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.banner_yitiji_not_open = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.banner_yitiji_button_color = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.banner_yitiji_open = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.preservation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.preservation1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.I32:
                    self.allowManyDoctor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.I32:
                    self.service_sort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServicesInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.service_name is not None:
            oprot.writeFieldBegin('service_name', TType.STRING, 2)
            oprot.writeString(self.service_name.encode('utf-8') if sys.version_info[0] == 2 else self.service_name)
            oprot.writeFieldEnd()
        if self.service_desc is not None:
            oprot.writeFieldBegin('service_desc', TType.STRING, 3)
            oprot.writeString(self.service_desc.encode('utf-8') if sys.version_info[0] == 2 else self.service_desc)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 4)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        if self.start_service_num is not None:
            oprot.writeFieldBegin('start_service_num', TType.STRING, 5)
            oprot.writeString(self.start_service_num.encode('utf-8') if sys.version_info[0] == 2 else self.start_service_num)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.STRING, 6)
            oprot.writeString(self.price.encode('utf-8') if sys.version_info[0] == 2 else self.price)
            oprot.writeFieldEnd()
        if self.pattern is not None:
            oprot.writeFieldBegin('pattern', TType.STRING, 7)
            oprot.writeString(self.pattern.encode('utf-8') if sys.version_info[0] == 2 else self.pattern)
            oprot.writeFieldEnd()
        if self.yitiji_desc_url is not None:
            oprot.writeFieldBegin('yitiji_desc_url', TType.STRING, 8)
            oprot.writeString(self.yitiji_desc_url.encode('utf-8') if sys.version_info[0] == 2 else self.yitiji_desc_url)
            oprot.writeFieldEnd()
        if self.service_connect_way is not None:
            oprot.writeFieldBegin('service_connect_way', TType.STRING, 9)
            oprot.writeString(self.service_connect_way.encode('utf-8') if sys.version_info[0] == 2 else self.service_connect_way)
            oprot.writeFieldEnd()
        if self.service_connect_tel is not None:
            oprot.writeFieldBegin('service_connect_tel', TType.STRING, 10)
            oprot.writeString(self.service_connect_tel.encode('utf-8') if sys.version_info[0] == 2 else self.service_connect_tel)
            oprot.writeFieldEnd()
        if self.banner_yitiji is not None:
            oprot.writeFieldBegin('banner_yitiji', TType.STRING, 11)
            oprot.writeBinary(self.banner_yitiji)
            oprot.writeFieldEnd()
        if self.banner_yitiji_not_open is not None:
            oprot.writeFieldBegin('banner_yitiji_not_open', TType.STRING, 12)
            oprot.writeString(self.banner_yitiji_not_open.encode('utf-8') if sys.version_info[0] == 2 else self.banner_yitiji_not_open)
            oprot.writeFieldEnd()
        if self.banner_yitiji_button_color is not None:
            oprot.writeFieldBegin('banner_yitiji_button_color', TType.STRING, 13)
            oprot.writeString(self.banner_yitiji_button_color.encode('utf-8') if sys.version_info[0] == 2 else self.banner_yitiji_button_color)
            oprot.writeFieldEnd()
        if self.banner_yitiji_open is not None:
            oprot.writeFieldBegin('banner_yitiji_open', TType.STRING, 14)
            oprot.writeString(self.banner_yitiji_open.encode('utf-8') if sys.version_info[0] == 2 else self.banner_yitiji_open)
            oprot.writeFieldEnd()
        if self.preservation is not None:
            oprot.writeFieldBegin('preservation', TType.STRING, 15)
            oprot.writeString(self.preservation.encode('utf-8') if sys.version_info[0] == 2 else self.preservation)
            oprot.writeFieldEnd()
        if self.preservation1 is not None:
            oprot.writeFieldBegin('preservation1', TType.STRING, 16)
            oprot.writeString(self.preservation1.encode('utf-8') if sys.version_info[0] == 2 else self.preservation1)
            oprot.writeFieldEnd()
        if self.allowManyDoctor is not None:
            oprot.writeFieldBegin('allowManyDoctor', TType.I32, 17)
            oprot.writeI32(self.allowManyDoctor)
            oprot.writeFieldEnd()
        if self.service_sort is not None:
            oprot.writeFieldBegin('service_sort', TType.I32, 18)
            oprot.writeI32(self.service_sort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UsingServices(object):
    """
    Attributes:
     - serviceId
     - service_name
     - familyId
     - caregiver
     - total_price
     - period
     - startTime
     - endTime
     - preservation
     - preservation1
     - state
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'serviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'service_name', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'familyId', 'UTF8', None, ),  # 3
        (4, TType.STRUCT, 'caregiver', (CaregiverInfo, CaregiverInfo.thrift_spec), None, ),  # 4
        (5, TType.STRING, 'total_price', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'period', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'startTime', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'endTime', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'preservation', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'preservation1', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'state', 'UTF8', None, ),  # 11
    )

    def __init__(self, serviceId=None, service_name=None, familyId=None, caregiver=None, total_price=None, period=None, startTime=None, endTime=None, preservation=None, preservation1=None, state=None,):
        self.serviceId = serviceId
        self.service_name = service_name
        self.familyId = familyId
        self.caregiver = caregiver
        self.total_price = total_price
        self.period = period
        self.startTime = startTime
        self.endTime = endTime
        self.preservation = preservation
        self.preservation1 = preservation1
        self.state = state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.service_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.familyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.caregiver = CaregiverInfo()
                    self.caregiver.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.total_price = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.period = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.startTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.endTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.preservation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.preservation1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('UsingServices')
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.STRING, 1)
            oprot.writeString(self.serviceId.encode('utf-8') if sys.version_info[0] == 2 else self.serviceId)
            oprot.writeFieldEnd()
        if self.service_name is not None:
            oprot.writeFieldBegin('service_name', TType.STRING, 2)
            oprot.writeString(self.service_name.encode('utf-8') if sys.version_info[0] == 2 else self.service_name)
            oprot.writeFieldEnd()
        if self.familyId is not None:
            oprot.writeFieldBegin('familyId', TType.STRING, 3)
            oprot.writeString(self.familyId.encode('utf-8') if sys.version_info[0] == 2 else self.familyId)
            oprot.writeFieldEnd()
        if self.caregiver is not None:
            oprot.writeFieldBegin('caregiver', TType.STRUCT, 4)
            self.caregiver.write(oprot)
            oprot.writeFieldEnd()
        if self.total_price is not None:
            oprot.writeFieldBegin('total_price', TType.STRING, 5)
            oprot.writeString(self.total_price.encode('utf-8') if sys.version_info[0] == 2 else self.total_price)
            oprot.writeFieldEnd()
        if self.period is not None:
            oprot.writeFieldBegin('period', TType.STRING, 6)
            oprot.writeString(self.period.encode('utf-8') if sys.version_info[0] == 2 else self.period)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.STRING, 7)
            oprot.writeString(self.startTime.encode('utf-8') if sys.version_info[0] == 2 else self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.STRING, 8)
            oprot.writeString(self.endTime.encode('utf-8') if sys.version_info[0] == 2 else self.endTime)
            oprot.writeFieldEnd()
        if self.preservation is not None:
            oprot.writeFieldBegin('preservation', TType.STRING, 9)
            oprot.writeString(self.preservation.encode('utf-8') if sys.version_info[0] == 2 else self.preservation)
            oprot.writeFieldEnd()
        if self.preservation1 is not None:
            oprot.writeFieldBegin('preservation1', TType.STRING, 10)
            oprot.writeString(self.preservation1.encode('utf-8') if sys.version_info[0] == 2 else self.preservation1)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 11)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PurchasedServices(object):
    """
    Attributes:
     - serviceId
     - service_name
     - familyId
     - caregiver
     - total_price
     - period
     - startTime
     - endTime
     - preservation
     - preservation1
     - state
     - service_sort
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'serviceId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'service_name', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'familyId', 'UTF8', None, ),  # 3
        (4, TType.LIST, 'caregiver', (TType.STRUCT, (CaregiverInfo, CaregiverInfo.thrift_spec), False), None, ),  # 4
        (5, TType.STRING, 'total_price', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'period', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'startTime', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'endTime', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'preservation', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'preservation1', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'state', 'UTF8', None, ),  # 11
        (12, TType.I32, 'service_sort', None, None, ),  # 12
    )

    def __init__(self, serviceId=None, service_name=None, familyId=None, caregiver=None, total_price=None, period=None, startTime=None, endTime=None, preservation=None, preservation1=None, state=None, service_sort=None,):
        self.serviceId = serviceId
        self.service_name = service_name
        self.familyId = familyId
        self.caregiver = caregiver
        self.total_price = total_price
        self.period = period
        self.startTime = startTime
        self.endTime = endTime
        self.preservation = preservation
        self.preservation1 = preservation1
        self.state = state
        self.service_sort = service_sort

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.serviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.service_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.familyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.caregiver = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = CaregiverInfo()
                        _elem61.read(iprot)
                        self.caregiver.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.total_price = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.period = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.startTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.endTime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.preservation = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.preservation1 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.state = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.service_sort = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PurchasedServices')
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.STRING, 1)
            oprot.writeString(self.serviceId.encode('utf-8') if sys.version_info[0] == 2 else self.serviceId)
            oprot.writeFieldEnd()
        if self.service_name is not None:
            oprot.writeFieldBegin('service_name', TType.STRING, 2)
            oprot.writeString(self.service_name.encode('utf-8') if sys.version_info[0] == 2 else self.service_name)
            oprot.writeFieldEnd()
        if self.familyId is not None:
            oprot.writeFieldBegin('familyId', TType.STRING, 3)
            oprot.writeString(self.familyId.encode('utf-8') if sys.version_info[0] == 2 else self.familyId)
            oprot.writeFieldEnd()
        if self.caregiver is not None:
            oprot.writeFieldBegin('caregiver', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.caregiver))
            for iter62 in self.caregiver:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.total_price is not None:
            oprot.writeFieldBegin('total_price', TType.STRING, 5)
            oprot.writeString(self.total_price.encode('utf-8') if sys.version_info[0] == 2 else self.total_price)
            oprot.writeFieldEnd()
        if self.period is not None:
            oprot.writeFieldBegin('period', TType.STRING, 6)
            oprot.writeString(self.period.encode('utf-8') if sys.version_info[0] == 2 else self.period)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.STRING, 7)
            oprot.writeString(self.startTime.encode('utf-8') if sys.version_info[0] == 2 else self.startTime)
            oprot.writeFieldEnd()
        if self.endTime is not None:
            oprot.writeFieldBegin('endTime', TType.STRING, 8)
            oprot.writeString(self.endTime.encode('utf-8') if sys.version_info[0] == 2 else self.endTime)
            oprot.writeFieldEnd()
        if self.preservation is not None:
            oprot.writeFieldBegin('preservation', TType.STRING, 9)
            oprot.writeString(self.preservation.encode('utf-8') if sys.version_info[0] == 2 else self.preservation)
            oprot.writeFieldEnd()
        if self.preservation1 is not None:
            oprot.writeFieldBegin('preservation1', TType.STRING, 10)
            oprot.writeString(self.preservation1.encode('utf-8') if sys.version_info[0] == 2 else self.preservation1)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRING, 11)
            oprot.writeString(self.state.encode('utf-8') if sys.version_info[0] == 2 else self.state)
            oprot.writeFieldEnd()
        if self.service_sort is not None:
            oprot.writeFieldBegin('service_sort', TType.I32, 12)
            oprot.writeI32(self.service_sort)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServiceRecord(object):
    """
    Attributes:
     - familyId
     - member_code
     - caregiver_code
     - start_time
     - end_time
     - total_time
     - service_type
     - content
     - user_estimate
     - serviceId
     - recordId
     - requirement
     - member_name
     - caregiver_name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'familyId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'member_code', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'caregiver_code', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'start_time', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'end_time', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'total_time', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'service_type', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'content', 'UTF8', None, ),  # 8
        (9, TType.I32, 'user_estimate', None, None, ),  # 9
        (10, TType.STRING, 'serviceId', 'UTF8', None, ),  # 10
        (11, TType.STRING, 'recordId', 'UTF8', None, ),  # 11
        (12, TType.STRING, 'requirement', 'UTF8', None, ),  # 12
        (13, TType.STRING, 'member_name', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'caregiver_name', 'UTF8', None, ),  # 14
    )

    def __init__(self, familyId=None, member_code=None, caregiver_code=None, start_time=None, end_time=None, total_time=None, service_type=None, content=None, user_estimate=None, serviceId=None, recordId=None, requirement=None, member_name=None, caregiver_name=None,):
        self.familyId = familyId
        self.member_code = member_code
        self.caregiver_code = caregiver_code
        self.start_time = start_time
        self.end_time = end_time
        self.total_time = total_time
        self.service_type = service_type
        self.content = content
        self.user_estimate = user_estimate
        self.serviceId = serviceId
        self.recordId = recordId
        self.requirement = requirement
        self.member_name = member_name
        self.caregiver_name = caregiver_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.familyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.member_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.caregiver_code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.start_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.end_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.total_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.service_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.user_estimate = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.serviceId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.recordId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.requirement = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.member_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.caregiver_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServiceRecord')
        if self.familyId is not None:
            oprot.writeFieldBegin('familyId', TType.STRING, 1)
            oprot.writeString(self.familyId.encode('utf-8') if sys.version_info[0] == 2 else self.familyId)
            oprot.writeFieldEnd()
        if self.member_code is not None:
            oprot.writeFieldBegin('member_code', TType.STRING, 2)
            oprot.writeString(self.member_code.encode('utf-8') if sys.version_info[0] == 2 else self.member_code)
            oprot.writeFieldEnd()
        if self.caregiver_code is not None:
            oprot.writeFieldBegin('caregiver_code', TType.STRING, 3)
            oprot.writeString(self.caregiver_code.encode('utf-8') if sys.version_info[0] == 2 else self.caregiver_code)
            oprot.writeFieldEnd()
        if self.start_time is not None:
            oprot.writeFieldBegin('start_time', TType.STRING, 4)
            oprot.writeString(self.start_time.encode('utf-8') if sys.version_info[0] == 2 else self.start_time)
            oprot.writeFieldEnd()
        if self.end_time is not None:
            oprot.writeFieldBegin('end_time', TType.STRING, 5)
            oprot.writeString(self.end_time.encode('utf-8') if sys.version_info[0] == 2 else self.end_time)
            oprot.writeFieldEnd()
        if self.total_time is not None:
            oprot.writeFieldBegin('total_time', TType.STRING, 6)
            oprot.writeString(self.total_time.encode('utf-8') if sys.version_info[0] == 2 else self.total_time)
            oprot.writeFieldEnd()
        if self.service_type is not None:
            oprot.writeFieldBegin('service_type', TType.STRING, 7)
            oprot.writeString(self.service_type.encode('utf-8') if sys.version_info[0] == 2 else self.service_type)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 8)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.user_estimate is not None:
            oprot.writeFieldBegin('user_estimate', TType.I32, 9)
            oprot.writeI32(self.user_estimate)
            oprot.writeFieldEnd()
        if self.serviceId is not None:
            oprot.writeFieldBegin('serviceId', TType.STRING, 10)
            oprot.writeString(self.serviceId.encode('utf-8') if sys.version_info[0] == 2 else self.serviceId)
            oprot.writeFieldEnd()
        if self.recordId is not None:
            oprot.writeFieldBegin('recordId', TType.STRING, 11)
            oprot.writeString(self.recordId.encode('utf-8') if sys.version_info[0] == 2 else self.recordId)
            oprot.writeFieldEnd()
        if self.requirement is not None:
            oprot.writeFieldBegin('requirement', TType.STRING, 12)
            oprot.writeString(self.requirement.encode('utf-8') if sys.version_info[0] == 2 else self.requirement)
            oprot.writeFieldEnd()
        if self.member_name is not None:
            oprot.writeFieldBegin('member_name', TType.STRING, 13)
            oprot.writeString(self.member_name.encode('utf-8') if sys.version_info[0] == 2 else self.member_name)
            oprot.writeFieldEnd()
        if self.caregiver_name is not None:
            oprot.writeFieldBegin('caregiver_name', TType.STRING, 14)
            oprot.writeString(self.caregiver_name.encode('utf-8') if sys.version_info[0] == 2 else self.caregiver_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PointRecords(object):
    """
    Attributes:
     - familyId
     - operate
     - points
     - types
     - from_person
     - person_name
     - time
     - id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'familyId', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'operate', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'points', 'UTF8', None, ),  # 3
        (4, TType.I32, 'types', None, None, ),  # 4
        (5, TType.STRING, 'from_person', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'person_name', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'time', 'UTF8', None, ),  # 7
        (8, TType.I32, 'id', None, None, ),  # 8
    )

    def __init__(self, familyId=None, operate=None, points=None, types=None, from_person=None, person_name=None, time=None, id=None,):
        self.familyId = familyId
        self.operate = operate
        self.points = points
        self.types = types
        self.from_person = from_person
        self.person_name = person_name
        self.time = time
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.familyId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.operate = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.points = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.types = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.from_person = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.person_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PointRecords')
        if self.familyId is not None:
            oprot.writeFieldBegin('familyId', TType.STRING, 1)
            oprot.writeString(self.familyId.encode('utf-8') if sys.version_info[0] == 2 else self.familyId)
            oprot.writeFieldEnd()
        if self.operate is not None:
            oprot.writeFieldBegin('operate', TType.STRING, 2)
            oprot.writeString(self.operate.encode('utf-8') if sys.version_info[0] == 2 else self.operate)
            oprot.writeFieldEnd()
        if self.points is not None:
            oprot.writeFieldBegin('points', TType.STRING, 3)
            oprot.writeString(self.points.encode('utf-8') if sys.version_info[0] == 2 else self.points)
            oprot.writeFieldEnd()
        if self.types is not None:
            oprot.writeFieldBegin('types', TType.I32, 4)
            oprot.writeI32(self.types)
            oprot.writeFieldEnd()
        if self.from_person is not None:
            oprot.writeFieldBegin('from_person', TType.STRING, 5)
            oprot.writeString(self.from_person.encode('utf-8') if sys.version_info[0] == 2 else self.from_person)
            oprot.writeFieldEnd()
        if self.person_name is not None:
            oprot.writeFieldBegin('person_name', TType.STRING, 6)
            oprot.writeString(self.person_name.encode('utf-8') if sys.version_info[0] == 2 else self.person_name)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 7)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 8)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HealthReport(object):
    """
    Attributes:
     - id
     - userId
     - report_title
     - report_type
     - reporter
     - time
     - report_url
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'userId', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'report_title', 'UTF8', None, ),  # 3
        (4, TType.I32, 'report_type', None, None, ),  # 4
        (5, TType.STRING, 'reporter', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'time', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'report_url', 'UTF8', None, ),  # 7
    )

    def __init__(self, id=None, userId=None, report_title=None, report_type=None, reporter=None, time=None, report_url=None,):
        self.id = id
        self.userId = userId
        self.report_title = report_title
        self.report_type = report_type
        self.reporter = reporter
        self.time = time
        self.report_url = report_url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.report_title = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.report_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.reporter = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.report_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HealthReport')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 2)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.report_title is not None:
            oprot.writeFieldBegin('report_title', TType.STRING, 3)
            oprot.writeString(self.report_title.encode('utf-8') if sys.version_info[0] == 2 else self.report_title)
            oprot.writeFieldEnd()
        if self.report_type is not None:
            oprot.writeFieldBegin('report_type', TType.I32, 4)
            oprot.writeI32(self.report_type)
            oprot.writeFieldEnd()
        if self.reporter is not None:
            oprot.writeFieldBegin('reporter', TType.STRING, 5)
            oprot.writeString(self.reporter.encode('utf-8') if sys.version_info[0] == 2 else self.reporter)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.STRING, 6)
            oprot.writeString(self.time.encode('utf-8') if sys.version_info[0] == 2 else self.time)
            oprot.writeFieldEnd()
        if self.report_url is not None:
            oprot.writeFieldBegin('report_url', TType.STRING, 7)
            oprot.writeString(self.report_url.encode('utf-8') if sys.version_info[0] == 2 else self.report_url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MessageDetail(object):
    """
    Attributes:
     - id
     - msg_type
     - msg_summary
     - msg_content
     - to_person
     - from_person
     - to_person_name
     - from_person_name
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'msg_type', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'msg_summary', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'msg_content', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'to_person', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'from_person', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'to_person_name', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'from_person_name', 'UTF8', None, ),  # 8
    )

    def __init__(self, id=None, msg_type=None, msg_summary=None, msg_content=None, to_person=None, from_person=None, to_person_name=None, from_person_name=None,):
        self.id = id
        self.msg_type = msg_type
        self.msg_summary = msg_summary
        self.msg_content = msg_content
        self.to_person = to_person
        self.from_person = from_person
        self.to_person_name = to_person_name
        self.from_person_name = from_person_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.msg_summary = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.msg_content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.to_person = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.from_person = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.to_person_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.from_person_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MessageDetail')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.msg_type is not None:
            oprot.writeFieldBegin('msg_type', TType.STRING, 2)
            oprot.writeString(self.msg_type.encode('utf-8') if sys.version_info[0] == 2 else self.msg_type)
            oprot.writeFieldEnd()
        if self.msg_summary is not None:
            oprot.writeFieldBegin('msg_summary', TType.STRING, 3)
            oprot.writeString(self.msg_summary.encode('utf-8') if sys.version_info[0] == 2 else self.msg_summary)
            oprot.writeFieldEnd()
        if self.msg_content is not None:
            oprot.writeFieldBegin('msg_content', TType.STRING, 4)
            oprot.writeString(self.msg_content.encode('utf-8') if sys.version_info[0] == 2 else self.msg_content)
            oprot.writeFieldEnd()
        if self.to_person is not None:
            oprot.writeFieldBegin('to_person', TType.STRING, 5)
            oprot.writeString(self.to_person.encode('utf-8') if sys.version_info[0] == 2 else self.to_person)
            oprot.writeFieldEnd()
        if self.from_person is not None:
            oprot.writeFieldBegin('from_person', TType.STRING, 6)
            oprot.writeString(self.from_person.encode('utf-8') if sys.version_info[0] == 2 else self.from_person)
            oprot.writeFieldEnd()
        if self.to_person_name is not None:
            oprot.writeFieldBegin('to_person_name', TType.STRING, 7)
            oprot.writeString(self.to_person_name.encode('utf-8') if sys.version_info[0] == 2 else self.to_person_name)
            oprot.writeFieldEnd()
        if self.from_person_name is not None:
            oprot.writeFieldBegin('from_person_name', TType.STRING, 8)
            oprot.writeString(self.from_person_name.encode('utf-8') if sys.version_info[0] == 2 else self.from_person_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HealthControllerPlan(object):
    """
    Attributes:
     - id
     - code
     - starttime
     - endtime
     - doctorPhrcode
     - doctorName
     - status
     - plan_url
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'starttime', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'endtime', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'doctorPhrcode', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'doctorName', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'status', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'plan_url', 'UTF8', None, ),  # 8
    )

    def __init__(self, id=None, code=None, starttime=None, endtime=None, doctorPhrcode=None, doctorName=None, status=None, plan_url=None,):
        self.id = id
        self.code = code
        self.starttime = starttime
        self.endtime = endtime
        self.doctorPhrcode = doctorPhrcode
        self.doctorName = doctorName
        self.status = status
        self.plan_url = plan_url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.starttime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.endtime = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.doctorPhrcode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.doctorName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.plan_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HealthControllerPlan')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.starttime is not None:
            oprot.writeFieldBegin('starttime', TType.STRING, 3)
            oprot.writeString(self.starttime.encode('utf-8') if sys.version_info[0] == 2 else self.starttime)
            oprot.writeFieldEnd()
        if self.endtime is not None:
            oprot.writeFieldBegin('endtime', TType.STRING, 4)
            oprot.writeString(self.endtime.encode('utf-8') if sys.version_info[0] == 2 else self.endtime)
            oprot.writeFieldEnd()
        if self.doctorPhrcode is not None:
            oprot.writeFieldBegin('doctorPhrcode', TType.STRING, 5)
            oprot.writeString(self.doctorPhrcode.encode('utf-8') if sys.version_info[0] == 2 else self.doctorPhrcode)
            oprot.writeFieldEnd()
        if self.doctorName is not None:
            oprot.writeFieldBegin('doctorName', TType.STRING, 6)
            oprot.writeString(self.doctorName.encode('utf-8') if sys.version_info[0] == 2 else self.doctorName)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 7)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.plan_url is not None:
            oprot.writeFieldBegin('plan_url', TType.STRING, 8)
            oprot.writeString(self.plan_url.encode('utf-8') if sys.version_info[0] == 2 else self.plan_url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HealthControllerRemind(object):
    """
    Attributes:
     - plancode
     - schemecode
     - content
     - crequeny
     - exe_time
     - plantype
     - userid
     - username
     - doctorid
     - doctorname
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'plancode', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'schemecode', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'content', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'crequeny', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'exe_time', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'plantype', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'userid', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'username', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'doctorid', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'doctorname', 'UTF8', None, ),  # 10
    )

    def __init__(self, plancode=None, schemecode=None, content=None, crequeny=None, exe_time=None, plantype=None, userid=None, username=None, doctorid=None, doctorname=None,):
        self.plancode = plancode
        self.schemecode = schemecode
        self.content = content
        self.crequeny = crequeny
        self.exe_time = exe_time
        self.plantype = plantype
        self.userid = userid
        self.username = username
        self.doctorid = doctorid
        self.doctorname = doctorname

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.plancode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.schemecode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.crequeny = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.exe_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.plantype = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.userid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.doctorid = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.doctorname = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HealthControllerRemind')
        if self.plancode is not None:
            oprot.writeFieldBegin('plancode', TType.STRING, 1)
            oprot.writeString(self.plancode.encode('utf-8') if sys.version_info[0] == 2 else self.plancode)
            oprot.writeFieldEnd()
        if self.schemecode is not None:
            oprot.writeFieldBegin('schemecode', TType.STRING, 2)
            oprot.writeString(self.schemecode.encode('utf-8') if sys.version_info[0] == 2 else self.schemecode)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 3)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.crequeny is not None:
            oprot.writeFieldBegin('crequeny', TType.STRING, 4)
            oprot.writeString(self.crequeny.encode('utf-8') if sys.version_info[0] == 2 else self.crequeny)
            oprot.writeFieldEnd()
        if self.exe_time is not None:
            oprot.writeFieldBegin('exe_time', TType.STRING, 5)
            oprot.writeString(self.exe_time.encode('utf-8') if sys.version_info[0] == 2 else self.exe_time)
            oprot.writeFieldEnd()
        if self.plantype is not None:
            oprot.writeFieldBegin('plantype', TType.STRING, 6)
            oprot.writeString(self.plantype.encode('utf-8') if sys.version_info[0] == 2 else self.plantype)
            oprot.writeFieldEnd()
        if self.userid is not None:
            oprot.writeFieldBegin('userid', TType.STRING, 7)
            oprot.writeString(self.userid.encode('utf-8') if sys.version_info[0] == 2 else self.userid)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 8)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.doctorid is not None:
            oprot.writeFieldBegin('doctorid', TType.STRING, 9)
            oprot.writeString(self.doctorid.encode('utf-8') if sys.version_info[0] == 2 else self.doctorid)
            oprot.writeFieldEnd()
        if self.doctorname is not None:
            oprot.writeFieldBegin('doctorname', TType.STRING, 10)
            oprot.writeString(self.doctorname.encode('utf-8') if sys.version_info[0] == 2 else self.doctorname)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InterfaceLog(object):
    """
    Attributes:
     - phrCode
     - ip
     - mac
     - interfaceName
     - lng
     - lat
     - orgId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'phrCode', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'ip', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'mac', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'interfaceName', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'lng', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'lat', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'orgId', 'UTF8', None, ),  # 7
    )

    def __init__(self, phrCode=None, ip=None, mac=None, interfaceName=None, lng=None, lat=None, orgId=None,):
        self.phrCode = phrCode
        self.ip = ip
        self.mac = mac
        self.interfaceName = interfaceName
        self.lng = lng
        self.lat = lat
        self.orgId = orgId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.phrCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.mac = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.interfaceName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.lng = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.lat = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.orgId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('InterfaceLog')
        if self.phrCode is not None:
            oprot.writeFieldBegin('phrCode', TType.STRING, 1)
            oprot.writeString(self.phrCode.encode('utf-8') if sys.version_info[0] == 2 else self.phrCode)
            oprot.writeFieldEnd()
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 2)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.mac is not None:
            oprot.writeFieldBegin('mac', TType.STRING, 3)
            oprot.writeString(self.mac.encode('utf-8') if sys.version_info[0] == 2 else self.mac)
            oprot.writeFieldEnd()
        if self.interfaceName is not None:
            oprot.writeFieldBegin('interfaceName', TType.STRING, 4)
            oprot.writeString(self.interfaceName.encode('utf-8') if sys.version_info[0] == 2 else self.interfaceName)
            oprot.writeFieldEnd()
        if self.lng is not None:
            oprot.writeFieldBegin('lng', TType.STRING, 5)
            oprot.writeString(self.lng.encode('utf-8') if sys.version_info[0] == 2 else self.lng)
            oprot.writeFieldEnd()
        if self.lat is not None:
            oprot.writeFieldBegin('lat', TType.STRING, 6)
            oprot.writeString(self.lat.encode('utf-8') if sys.version_info[0] == 2 else self.lat)
            oprot.writeFieldEnd()
        if self.orgId is not None:
            oprot.writeFieldBegin('orgId', TType.STRING, 7)
            oprot.writeString(self.orgId.encode('utf-8') if sys.version_info[0] == 2 else self.orgId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PeripheralConfigure(object):
    """
    Attributes:
     - id
     - peripheralId
     - peripheralName
     - bluetoothId
     - bluetoothName
     - peripheralPic
     - guidePic
     - instructionPic
     - isUse
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.STRING, 'peripheralId', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'peripheralName', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'bluetoothId', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'bluetoothName', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'peripheralPic', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'guidePic', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'instructionPic', 'UTF8', None, ),  # 8
        (9, TType.STRING, 'isUse', 'UTF8', None, ),  # 9
    )

    def __init__(self, id=None, peripheralId=None, peripheralName=None, bluetoothId=None, bluetoothName=None, peripheralPic=None, guidePic=None, instructionPic=None, isUse=None,):
        self.id = id
        self.peripheralId = peripheralId
        self.peripheralName = peripheralName
        self.bluetoothId = bluetoothId
        self.bluetoothName = bluetoothName
        self.peripheralPic = peripheralPic
        self.guidePic = guidePic
        self.instructionPic = instructionPic
        self.isUse = isUse

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.peripheralId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.peripheralName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.bluetoothId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.bluetoothName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.peripheralPic = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.guidePic = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.instructionPic = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.isUse = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PeripheralConfigure')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.peripheralId is not None:
            oprot.writeFieldBegin('peripheralId', TType.STRING, 2)
            oprot.writeString(self.peripheralId.encode('utf-8') if sys.version_info[0] == 2 else self.peripheralId)
            oprot.writeFieldEnd()
        if self.peripheralName is not None:
            oprot.writeFieldBegin('peripheralName', TType.STRING, 3)
            oprot.writeString(self.peripheralName.encode('utf-8') if sys.version_info[0] == 2 else self.peripheralName)
            oprot.writeFieldEnd()
        if self.bluetoothId is not None:
            oprot.writeFieldBegin('bluetoothId', TType.STRING, 4)
            oprot.writeString(self.bluetoothId.encode('utf-8') if sys.version_info[0] == 2 else self.bluetoothId)
            oprot.writeFieldEnd()
        if self.bluetoothName is not None:
            oprot.writeFieldBegin('bluetoothName', TType.STRING, 5)
            oprot.writeString(self.bluetoothName.encode('utf-8') if sys.version_info[0] == 2 else self.bluetoothName)
            oprot.writeFieldEnd()
        if self.peripheralPic is not None:
            oprot.writeFieldBegin('peripheralPic', TType.STRING, 6)
            oprot.writeString(self.peripheralPic.encode('utf-8') if sys.version_info[0] == 2 else self.peripheralPic)
            oprot.writeFieldEnd()
        if self.guidePic is not None:
            oprot.writeFieldBegin('guidePic', TType.STRING, 7)
            oprot.writeString(self.guidePic.encode('utf-8') if sys.version_info[0] == 2 else self.guidePic)
            oprot.writeFieldEnd()
        if self.instructionPic is not None:
            oprot.writeFieldBegin('instructionPic', TType.STRING, 8)
            oprot.writeString(self.instructionPic.encode('utf-8') if sys.version_info[0] == 2 else self.instructionPic)
            oprot.writeFieldEnd()
        if self.isUse is not None:
            oprot.writeFieldBegin('isUse', TType.STRING, 9)
            oprot.writeString(self.isUse.encode('utf-8') if sys.version_info[0] == 2 else self.isUse)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
