#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from user import UserService
from user.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  AccountInfo login(AccountInfo accountInfo)')
    print('  AccountInfo findXKAccountByProofNum(string proofNum)')
    print('  bool checkBindstate(string deviceId, string userId)')
    print('  AccountInfo registerAccount(AccountInfo accountInfo, string deviceId, string verifyCode)')
    print('  AccountInfo registerAndBindAccount(AccountInfo accountInfo, string deviceId, string verifyCode)')
    print('  AccountInfo updateAccount(AccountInfo accountInfo)')
    print('  void editPassword(string userId, string oldPassword, string newPassword)')
    print('   getMembers(string userId)')
    print('  void addMember(string userId, string password, string loginUserId)')
    print('   deleteMembers( userIds, string loginUserId)')
    print('   getCaregiverInfoService(string userId, string deviceId)')
    print('  void bindDeviceByUserName(string userName, string password, string deviceId)')
    print('  void bindDeviceByUserId(string userId, string deviceId)')
    print('   getAccountInfosByDeviceId(string deviceId)')
    print('   deleteAccountsByDeviceId( userIds, string deviceId)')
    print('   getFamilyInfosByUserId(string userId)')
    print('  string getVerifyCodeByDeviceId(string deviceId)')
    print('  void sendSmsVerifyCode(string phoneNum, string verifyCode, string deviceId)')
    print('  void validateSmsVerifyCode(string phoneNum, string smsVerifyCode, string deviceId)')
    print('  void resetPassword(string phoneNum, string newPassword, string smsVerifyCode, string deviceId)')
    print('  void bindDeviceByFamilyId(string familyId, string deviceId)')
    print('  void unBindDeviceByFamilyId(string familyId, string deviceId)')
    print('   getDoctorInfoService(string userId, string deviceId)')
    print('   getDoctorInfoByDeviceID(string deviceId)')
    print('   getRecipeListByUserID(string userId, string startTime)')
    print('   getRecipeListByDeviceID(string deviceId, string startTime)')
    print('   getphotoBydeviceID(string deviceId, string shareTime)')
    print('   getphotoInfoByurl( photourls)')
    print('  string getUserNameByUserID(string userId)')
    print('  FamilyInfo checkBindStateByDeviceID(string deviceId)')
    print('  void messageNotify(MessageInfo msgInfo)')
    print('   getOutsideListByDeviceId(string deviceId)')
    print('  string hostlogin(string deviceId, string hostid)')
    print('   getAllServices(string deviceId)')
    print('   getUsingServices(string deviceId)')
    print('  string addOutside(string deviceId, OutsideInfo info)')
    print('   getServiceRecords(string deviceId, string ServiceId)')
    print('   getServiceHistory(string deviceId, string serviceId)')
    print('  i32 getFamilyPoints(string deviceId)')
    print('   getPointsHistory(string deviceId, i32 num)')
    print('  i32 updateServiceRecords(i32 recordId, i32 result)')
    print('   getHealthReportLists(string userid, i32 type, i32 startindex, i32 endindex)')
    print('   getHealthReportListsByFamilyId(string userid, i32 type, i32 startindex, i32 endindex, string familyId)')
    print('   getNewRecipeListByUserID(string userId, string startTime, string endTime)')
    print('   getNewRecipeListByDeviceID(string deviceId, string startTime, string endTime)')
    print('   getNewphotoBydeviceID(string deviceId, string starTime, string endtime)')
    print('  i32 serviceCardGetUserPoints(string userId)')
    print('   serviceCardGetPointsHistory(string userId, i32 num)')
    print('  ServiceCardResult serviceCardLoginByCardNum(AccountInfo accountInfo, string cardNo)')
    print('  ServiceCardResult serviceCardLoginByAccount(AccountInfo accountInfo)')
    print('  ServiceCardResult BindCardToPerson(string deviceid, string cardNo, string pwd, string userid)')
    print('   getPurchasedServices(string deviceId)')
    print('  MessageDetail getPushMessage(string msgid)')
    print('   getHealthControllerPlan(string userid)')
    print('   getHealthControllerRemindByMember(string userid)')
    print('   getHealthControllerRemindByDeviceId(string deviceId)')
    print('   getHealthControllerRemindByDevice(string deviceid)')
    print('  void sendMessageToManager(AccountInfo accountInfo, string deviceid)')
    print('  ServiceCardResult serviceLoginByProofNum(string proofNum, string deviceid)')
    print('  string getCallDoctor(string serviceid)')
    print('  void saveInterfaceLog(InterfaceLog interfaceLog)')
    print('   getPeripheralConfigureList()')
    print('  YTJ_MemberHealthInfo getMemberHealthInfo(string personPHRCode)')
    print('  void updateMemeberHealthInfo(string personPHRCode, YTJ_MemberHealthInfo healthInfo)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = UserService.Client(protocol)
transport.open()

if cmd == 'login':
    if len(args) != 1:
        print('login requires 1 args')
        sys.exit(1)
    pp.pprint(client.login(eval(args[0]),))

elif cmd == 'findXKAccountByProofNum':
    if len(args) != 1:
        print('findXKAccountByProofNum requires 1 args')
        sys.exit(1)
    pp.pprint(client.findXKAccountByProofNum(args[0],))

elif cmd == 'checkBindstate':
    if len(args) != 2:
        print('checkBindstate requires 2 args')
        sys.exit(1)
    pp.pprint(client.checkBindstate(args[0], args[1],))

elif cmd == 'registerAccount':
    if len(args) != 3:
        print('registerAccount requires 3 args')
        sys.exit(1)
    pp.pprint(client.registerAccount(eval(args[0]), args[1], args[2],))

elif cmd == 'registerAndBindAccount':
    if len(args) != 3:
        print('registerAndBindAccount requires 3 args')
        sys.exit(1)
    pp.pprint(client.registerAndBindAccount(eval(args[0]), args[1], args[2],))

elif cmd == 'updateAccount':
    if len(args) != 1:
        print('updateAccount requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateAccount(eval(args[0]),))

elif cmd == 'editPassword':
    if len(args) != 3:
        print('editPassword requires 3 args')
        sys.exit(1)
    pp.pprint(client.editPassword(args[0], args[1], args[2],))

elif cmd == 'getMembers':
    if len(args) != 1:
        print('getMembers requires 1 args')
        sys.exit(1)
    pp.pprint(client.getMembers(args[0],))

elif cmd == 'addMember':
    if len(args) != 3:
        print('addMember requires 3 args')
        sys.exit(1)
    pp.pprint(client.addMember(args[0], args[1], args[2],))

elif cmd == 'deleteMembers':
    if len(args) != 2:
        print('deleteMembers requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteMembers(eval(args[0]), args[1],))

elif cmd == 'getCaregiverInfoService':
    if len(args) != 2:
        print('getCaregiverInfoService requires 2 args')
        sys.exit(1)
    pp.pprint(client.getCaregiverInfoService(args[0], args[1],))

elif cmd == 'bindDeviceByUserName':
    if len(args) != 3:
        print('bindDeviceByUserName requires 3 args')
        sys.exit(1)
    pp.pprint(client.bindDeviceByUserName(args[0], args[1], args[2],))

elif cmd == 'bindDeviceByUserId':
    if len(args) != 2:
        print('bindDeviceByUserId requires 2 args')
        sys.exit(1)
    pp.pprint(client.bindDeviceByUserId(args[0], args[1],))

elif cmd == 'getAccountInfosByDeviceId':
    if len(args) != 1:
        print('getAccountInfosByDeviceId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAccountInfosByDeviceId(args[0],))

elif cmd == 'deleteAccountsByDeviceId':
    if len(args) != 2:
        print('deleteAccountsByDeviceId requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteAccountsByDeviceId(eval(args[0]), args[1],))

elif cmd == 'getFamilyInfosByUserId':
    if len(args) != 1:
        print('getFamilyInfosByUserId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getFamilyInfosByUserId(args[0],))

elif cmd == 'getVerifyCodeByDeviceId':
    if len(args) != 1:
        print('getVerifyCodeByDeviceId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getVerifyCodeByDeviceId(args[0],))

elif cmd == 'sendSmsVerifyCode':
    if len(args) != 3:
        print('sendSmsVerifyCode requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendSmsVerifyCode(args[0], args[1], args[2],))

elif cmd == 'validateSmsVerifyCode':
    if len(args) != 3:
        print('validateSmsVerifyCode requires 3 args')
        sys.exit(1)
    pp.pprint(client.validateSmsVerifyCode(args[0], args[1], args[2],))

elif cmd == 'resetPassword':
    if len(args) != 4:
        print('resetPassword requires 4 args')
        sys.exit(1)
    pp.pprint(client.resetPassword(args[0], args[1], args[2], args[3],))

elif cmd == 'bindDeviceByFamilyId':
    if len(args) != 2:
        print('bindDeviceByFamilyId requires 2 args')
        sys.exit(1)
    pp.pprint(client.bindDeviceByFamilyId(args[0], args[1],))

elif cmd == 'unBindDeviceByFamilyId':
    if len(args) != 2:
        print('unBindDeviceByFamilyId requires 2 args')
        sys.exit(1)
    pp.pprint(client.unBindDeviceByFamilyId(args[0], args[1],))

elif cmd == 'getDoctorInfoService':
    if len(args) != 2:
        print('getDoctorInfoService requires 2 args')
        sys.exit(1)
    pp.pprint(client.getDoctorInfoService(args[0], args[1],))

elif cmd == 'getDoctorInfoByDeviceID':
    if len(args) != 1:
        print('getDoctorInfoByDeviceID requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDoctorInfoByDeviceID(args[0],))

elif cmd == 'getRecipeListByUserID':
    if len(args) != 2:
        print('getRecipeListByUserID requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRecipeListByUserID(args[0], args[1],))

elif cmd == 'getRecipeListByDeviceID':
    if len(args) != 2:
        print('getRecipeListByDeviceID requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRecipeListByDeviceID(args[0], args[1],))

elif cmd == 'getphotoBydeviceID':
    if len(args) != 2:
        print('getphotoBydeviceID requires 2 args')
        sys.exit(1)
    pp.pprint(client.getphotoBydeviceID(args[0], args[1],))

elif cmd == 'getphotoInfoByurl':
    if len(args) != 1:
        print('getphotoInfoByurl requires 1 args')
        sys.exit(1)
    pp.pprint(client.getphotoInfoByurl(eval(args[0]),))

elif cmd == 'getUserNameByUserID':
    if len(args) != 1:
        print('getUserNameByUserID requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUserNameByUserID(args[0],))

elif cmd == 'checkBindStateByDeviceID':
    if len(args) != 1:
        print('checkBindStateByDeviceID requires 1 args')
        sys.exit(1)
    pp.pprint(client.checkBindStateByDeviceID(args[0],))

elif cmd == 'messageNotify':
    if len(args) != 1:
        print('messageNotify requires 1 args')
        sys.exit(1)
    pp.pprint(client.messageNotify(eval(args[0]),))

elif cmd == 'getOutsideListByDeviceId':
    if len(args) != 1:
        print('getOutsideListByDeviceId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getOutsideListByDeviceId(args[0],))

elif cmd == 'hostlogin':
    if len(args) != 2:
        print('hostlogin requires 2 args')
        sys.exit(1)
    pp.pprint(client.hostlogin(args[0], args[1],))

elif cmd == 'getAllServices':
    if len(args) != 1:
        print('getAllServices requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllServices(args[0],))

elif cmd == 'getUsingServices':
    if len(args) != 1:
        print('getUsingServices requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUsingServices(args[0],))

elif cmd == 'addOutside':
    if len(args) != 2:
        print('addOutside requires 2 args')
        sys.exit(1)
    pp.pprint(client.addOutside(args[0], eval(args[1]),))

elif cmd == 'getServiceRecords':
    if len(args) != 2:
        print('getServiceRecords requires 2 args')
        sys.exit(1)
    pp.pprint(client.getServiceRecords(args[0], args[1],))

elif cmd == 'getServiceHistory':
    if len(args) != 2:
        print('getServiceHistory requires 2 args')
        sys.exit(1)
    pp.pprint(client.getServiceHistory(args[0], args[1],))

elif cmd == 'getFamilyPoints':
    if len(args) != 1:
        print('getFamilyPoints requires 1 args')
        sys.exit(1)
    pp.pprint(client.getFamilyPoints(args[0],))

elif cmd == 'getPointsHistory':
    if len(args) != 2:
        print('getPointsHistory requires 2 args')
        sys.exit(1)
    pp.pprint(client.getPointsHistory(args[0], eval(args[1]),))

elif cmd == 'updateServiceRecords':
    if len(args) != 2:
        print('updateServiceRecords requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateServiceRecords(eval(args[0]), eval(args[1]),))

elif cmd == 'getHealthReportLists':
    if len(args) != 4:
        print('getHealthReportLists requires 4 args')
        sys.exit(1)
    pp.pprint(client.getHealthReportLists(args[0], eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'getHealthReportListsByFamilyId':
    if len(args) != 5:
        print('getHealthReportListsByFamilyId requires 5 args')
        sys.exit(1)
    pp.pprint(client.getHealthReportListsByFamilyId(args[0], eval(args[1]), eval(args[2]), eval(args[3]), args[4],))

elif cmd == 'getNewRecipeListByUserID':
    if len(args) != 3:
        print('getNewRecipeListByUserID requires 3 args')
        sys.exit(1)
    pp.pprint(client.getNewRecipeListByUserID(args[0], args[1], args[2],))

elif cmd == 'getNewRecipeListByDeviceID':
    if len(args) != 3:
        print('getNewRecipeListByDeviceID requires 3 args')
        sys.exit(1)
    pp.pprint(client.getNewRecipeListByDeviceID(args[0], args[1], args[2],))

elif cmd == 'getNewphotoBydeviceID':
    if len(args) != 3:
        print('getNewphotoBydeviceID requires 3 args')
        sys.exit(1)
    pp.pprint(client.getNewphotoBydeviceID(args[0], args[1], args[2],))

elif cmd == 'serviceCardGetUserPoints':
    if len(args) != 1:
        print('serviceCardGetUserPoints requires 1 args')
        sys.exit(1)
    pp.pprint(client.serviceCardGetUserPoints(args[0],))

elif cmd == 'serviceCardGetPointsHistory':
    if len(args) != 2:
        print('serviceCardGetPointsHistory requires 2 args')
        sys.exit(1)
    pp.pprint(client.serviceCardGetPointsHistory(args[0], eval(args[1]),))

elif cmd == 'serviceCardLoginByCardNum':
    if len(args) != 2:
        print('serviceCardLoginByCardNum requires 2 args')
        sys.exit(1)
    pp.pprint(client.serviceCardLoginByCardNum(eval(args[0]), args[1],))

elif cmd == 'serviceCardLoginByAccount':
    if len(args) != 1:
        print('serviceCardLoginByAccount requires 1 args')
        sys.exit(1)
    pp.pprint(client.serviceCardLoginByAccount(eval(args[0]),))

elif cmd == 'BindCardToPerson':
    if len(args) != 4:
        print('BindCardToPerson requires 4 args')
        sys.exit(1)
    pp.pprint(client.BindCardToPerson(args[0], args[1], args[2], args[3],))

elif cmd == 'getPurchasedServices':
    if len(args) != 1:
        print('getPurchasedServices requires 1 args')
        sys.exit(1)
    pp.pprint(client.getPurchasedServices(args[0],))

elif cmd == 'getPushMessage':
    if len(args) != 1:
        print('getPushMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.getPushMessage(args[0],))

elif cmd == 'getHealthControllerPlan':
    if len(args) != 1:
        print('getHealthControllerPlan requires 1 args')
        sys.exit(1)
    pp.pprint(client.getHealthControllerPlan(args[0],))

elif cmd == 'getHealthControllerRemindByMember':
    if len(args) != 1:
        print('getHealthControllerRemindByMember requires 1 args')
        sys.exit(1)
    pp.pprint(client.getHealthControllerRemindByMember(args[0],))

elif cmd == 'getHealthControllerRemindByDeviceId':
    if len(args) != 1:
        print('getHealthControllerRemindByDeviceId requires 1 args')
        sys.exit(1)
    pp.pprint(client.getHealthControllerRemindByDeviceId(args[0],))

elif cmd == 'getHealthControllerRemindByDevice':
    if len(args) != 1:
        print('getHealthControllerRemindByDevice requires 1 args')
        sys.exit(1)
    pp.pprint(client.getHealthControllerRemindByDevice(args[0],))

elif cmd == 'sendMessageToManager':
    if len(args) != 2:
        print('sendMessageToManager requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendMessageToManager(eval(args[0]), args[1],))

elif cmd == 'serviceLoginByProofNum':
    if len(args) != 2:
        print('serviceLoginByProofNum requires 2 args')
        sys.exit(1)
    pp.pprint(client.serviceLoginByProofNum(args[0], args[1],))

elif cmd == 'getCallDoctor':
    if len(args) != 1:
        print('getCallDoctor requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCallDoctor(args[0],))

elif cmd == 'saveInterfaceLog':
    if len(args) != 1:
        print('saveInterfaceLog requires 1 args')
        sys.exit(1)
    pp.pprint(client.saveInterfaceLog(eval(args[0]),))

elif cmd == 'getPeripheralConfigureList':
    if len(args) != 0:
        print('getPeripheralConfigureList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getPeripheralConfigureList())

elif cmd == 'getMemberHealthInfo':
    if len(args) != 1:
        print('getMemberHealthInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getMemberHealthInfo(args[0],))

elif cmd == 'updateMemeberHealthInfo':
    if len(args) != 2:
        print('updateMemeberHealthInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateMemeberHealthInfo(args[0], eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
